[{"content":"B站Up主@奶爸爱赛车的视频笔记\n\u003c!DOCTYPE HTML\u003e 基本概念 PI，Performance Index，车辆的性能等级，地平线5共有七个分组 100 – 500 → D级车 501 – 600 → C级车 601 – 700 → B级车 701 – 800 → A级车 801 – 900 → S1级车 901 – 998 → S2级车 999 → X级车 由于等级分组的存在，对应车只能参加对应等级的比赛，因此参加比赛的车都会压着上限去改装 改装 改造 发动机 改装性价比比较高的发动机 6.2L V8 Racing V12 Racing V8 5.2L/8.4L V10 3.2L I6 1.6L/2.0L I4 VVT 虽然如此但是我还是会尽量保持和现实生活中真车一样的发动机，比如保时捷现实中也都用水平对置6缸，放个V12总感觉怪怪的 传动 我一般也会保持原厂 进气 离心增压性优先选择，价比高于涡轮和机械增压 宽体套件 选帅的 空气动力 加入前后尾翼可以调节下压力，增加操控，但是会降低急速 我一般选帅的，外观件只要帅就不在乎性能了 轮胎 轮胎类型 拉力胎是最均衡的轮胎，受各种外界因素的影响都很小，各种轮胎对比如下图，可见在PI有限的情况下拉力胎的性价比是最高的\n受PI限制，不同分组的车适合的轮胎如下表\n分组 比赛类型 轮胎 A 800 公路 拉力/半热熔 S1 900 公路 拉力/漂移/半热熔/热熔 S2 998 公路 热熔 侧向G力是车辆在弯中能承受的最大加速度，越大的侧向G力能承受的G越高。目标侧向G力如下表\n分组 比赛类型 目标侧G B 700 公路 1.1 - 1.6 A 800 公路 1.6 - 2.0 S1 900 公路 2.0 - 2.5 S2 998 公路 2.5 - 2.8 胎宽 轮胎越宽，抓地力越强，操控越好 四驱和后驱只升级后胎宽 前驱优先升级前胎宽 轮毂 选帅的 但是大轮毂除了帅和降低PI以外全是缺点（影响不大），根据车型不同我一般选18 - 20寸的 轮距 通常后轮距升级到最宽 传动 离合器 增加换挡速度，我一般会选上赛车版离合器 变速箱 我自己用手动挡开车，真实世界里的WRC，GT3和勒芒一般都是6速，F1用8速，所以我在游戏里也一般使用赛车6速变速箱 传动轴 用于减重 差速器 必须要加 刹车和底盘 刹车 性价比比较低，越野和拉力不需要升级刹车 悬挂 一低遮百丑，我一般选最低的 防倾杆 前后防倾杆都是必须要加的 前防倾杆尤其重要 底盘强化 看情况 车身减重 看情况，车身减重后惯性小，过弯更轻松，提高操控 偏操控的调教优先考虑最大减重 拉力漂移优先考虑减重，直线加速看情况吧，F = ma，F，m和抓地力都很重要 引擎 性价比最高的是排气系统和节气门 然后是燃料，点火和气缸 最后是气阀，活塞和进气过滤 凸轮轴能提高发动机转速，但消耗PI也很多 中冷和油冷，大幅增加重量 飞轮能改善油门响应，但性价比不高 调教参数 胎压 低胎压增加轮胎和地面的接触面积，增加抓地力\n高胎压增加轮胎的转向灵敏度（轮胎转向灵活度，不等于车辆操控）\n前低后高会让车辆偏转向过度，前高后低会让车偏转向不足\n对于公路赛，不同车重设置胎压如下表\n车重 前 / 后 气压 \u0026lt; 1000 kg 1.5 / 1.5 Bar 1000 - 1400 kg 1.8 / 1.8 Bar \u0026gt; 1400 kg 2.0 / 2.0 Bar 拉力 / 越野，上表 -0.3 Bar\n直线加速：前最高，后最低，3.8 / 1.0 Bar\n漂移：也是前高后低，但得慢慢调\n变速箱 扭力决定加速度，马力决定最高速度 峰值扭矩到峰值马力之间就是发动机的最佳转速 启动加速打滑，说明瞬间输出扭力太大，解决办法是线性油门慢慢加油或者一档拉长 万能齿比 6速：2.89 / 1.99 / 1.49 / 1.18 / 0.97 / 0.81 7速：3.75 / 2.38 / 1.70 / 1.34 / 1.11 / 0.96 0.85 8速：3.88 / 2.68 / 2.01 / 1.60 / 1.33 / 1.14 / 1.00 / 0.89 调节好齿比之后再拉动第一个最终传动比，使理论最高速和最大转速相等即可 轮胎定位 关于倾角（Camber），束脚（Toe）和前后倾角（Front Caster）的图解：\n外倾角 公路赛外倾角可以设置为-0.5 / -0.5，拉力赛可以设置为0 / 0.5，漂移调教设置为-5 / -2 束角 正束角能轻微改善转向不足，但太大会不稳定，反之负束角会让车保持直线 因此对于前驱和四驱车来说（天然转向不足），前轮可以添加不大于0.5的正束角，后轮加不超过0.2 对于大马力后驱，后轮可以加一点负束角 漂移调教设置为5 / 1 前后倾角 前后倾角，初始设置可以用最大值7，如果转向太灵活可以慢慢调小 防倾杆 前防倾杆越软，后防倾杆越硬越能改善转向不足，同理如果出现转向过度则调高前防倾杆 对于前驱和四驱可以设置为1 / 65，如果需要改善弯中稳定性四驱可以设置为10 / 65，前驱可以设置为1 / 56 对于后驱，初始可以设置为10 / 56 拉力 / 越野，初始可以设置为10 / 25 皮卡，初始可以设置为1 / 65 直线加速65 / 1 弹簧 弹簧 前软后硬能改善转向不足，前硬后软能减少转向过度 对于前驱和四驱，设置为前弹簧最软，后弹簧2/3处，很多四驱调教都是前面最软后面最硬 对于后驱，前后硬度都不超过调整范围1/3，初始可以设置为80 / 100，大马力后驱可以前后软硬度一样 拉力 / 越野悬挂偏软，前弹簧不超过1/6，后弹簧不超过1/4 拉力前软后硬 越野前后软硬度一样 车重轻的越野车可以前后都设置最软 直线加速前轮最硬，后轮最软 车身高度 公路按照默认的高的一侧配平即可 拉力 / 越野前后都设置为最高 直线加速前轮最高，后轮最低 漂移则都用最低 阻尼 回弹硬度是弹簧被压缩之后的回弹速度，越软回弹越快\n压缩硬度弹簧被压缩的速度，越软被压缩越快\n回弹硬度永远大于压缩硬度，且理论关系为 $$ 压缩=回弹\\times(0.5 - 0.75) $$\n回弹硬度 调整范围通常在8 - 14 如果遇到落地被弹飞，就要把回弹调硬 前软后硬能改善转向不足，前硬后软改善转向过度 前驱四驱在8 - 14内前软后硬 后驱前硬后软 直线加速20 / 1 压缩硬度 公路：设置为回弹的0.4 拉力 / 越野：设置为回弹的0.25 如果过路肩轮胎弹起，就要把压缩调软 空力 如果前解锁，直接拉到最高 后下压力越大，后轮抓地力越强 太大会造成转向不足 A级别以及以下可以设为最低，然后慢慢调 后驱车需要偏高的后下压力 前驱和四驱则不超过一般的位置 PI级别越高的车对后下压力需求越高 刹车 刹车重心靠前，增加刹车时的转向过度，重心靠后，改善转向过度，增加转向不足 通常要大于50% 漂移刹车平衡100% 差速器 0%指的两边轮胎完全放开，两个轮胎各转各的，100%则正好相反 加速设置控制踩油门时，减速则控制松油门 前轮 前驱只有前差设置，初始设置50% / 0% 加速 一般设置为偏低，更好的弯中和出弯操控，但是太低会造成低速弯入弯转向不足和中高速弯中及出弯的转向过度 公路：20% - 90% 拉力：30% - 90% 越野：80% - 100% 减速 一般为0 如果在后差减速调高的情况下入弯依然转向过度，则可以适当调高 通常都不高于加速设定 后轮 后驱只有后差设置，初始设置为85% / 5%，大马力后驱可以调低后差加速，适当调高后差减速 后差加速数值越高，加速时锁定越快，踩油门越容易产生转向过度，越小锁定越慢，踩油门越稳定，但是产生转向不足 后差减速越大，减速入弯越稳定 马力越大需要后差加速的数值越大，一般在80% - 95% 后驱漂移调教 加速100% 减速90% 拉力 / 越野 如果减速转弯的时候经常转向过度造成掉头，需要把后差减速调高 中央 四驱有这三个 控制扭矩前后分配（偏前驱，偏后驱），但是拉到最左或最右都不会成为完全前驱或者完全后驱的状态 公路：75% 拉力 / 越野：60% Telemetry 悬挂 可以根据这个调节悬挂的软硬度 其他轮胎数据 过弯的时候观察外侧轮胎的外倾角，0°最理想，不常出现正外倾即可 轮胎温度 理想状态下，轮胎内侧 \u0026gt; 中间 \u0026gt; 外侧温度 内外侧温差不超过10°C，如果温差太大，说明负外倾太大 ","permalink":"https://kyxie.me/zh/blog/game/forza-horizon-5/car-turning/","summary":"B站Up主@奶爸爱赛车的视频笔记 \u003c!DOCTYPE HTML\u003e 基本概念 PI，Performance Index，车辆的性能等级，地平线5共有七个分组 100 – 500 → D级车 501 – 600","title":"地平线5车辆调教指南"},{"content":"我本人也算是Minecraft的老粉丝了，初中就开始在手机上玩，还记得高一的时候每天晚上10点上完晚自习回家之后都得盖个楼修个桥的。后来换手机存档丢了 + Minecraft被网易代理 + 高考边忙之后就慢慢的玩的少了。\n这篇文章详细讲解一下在Windows下载安装畅玩Java版Minecraft教程。\nJava Java版我的世界首先需要安装Java，可以去Oracle官网下载JDK，这里建议下载Java 17。搞后端的小伙伴用IntelliJ下载JDK更省事儿。\nHMCL HMCL是Minecraft的启动器，可以从这里下载\n建议去LittleSkin皮肤站注册个账号，顺便找一些自己喜欢的皮肤\n直接在HMCL中绑定LittleSkin的账号\n之后点击Games，下载一个游戏实体，这里我选择的版本是1.18.2，Forge版本选择40.2.0\n下载完成后就可以启动游戏了\nMac 我尝试了一下MacBook也可以玩，毕竟所有的代码都是Java写的，而Java又是跨平台的。还是从HMCL下载，按照提示下载下来的是.jar包。我们在命令行运行\njava -jar HMCL-3.6.12.jar 即可运行HMCL了。\n联机 如果想和朋友联机，基本的步骤是：\n我和我的小伙伴都安装MC客户端，版本号一致 我或者小伙伴一个人搭建服务器，假设我搭建了服务器 我开放端口转发，允许小伙伴接入，给小伙伴开放白名单（或者是用内网穿透） 小伙伴同样设置一个离线账户，一个LittleSkin账户 小伙伴的MC选择Multiple Player，地址填我的公网IP（或域名，或内网穿透地址） 可以参考这篇文章：Debian使用Docker搭建Minecraft服务器 | Kunyang\u0026rsquo;s Blog\n客户端模组 可以从CurseForge下载模组，下面是几个必备模组：\nJEI：合成配方查看器\n非必要前置模组：Configured JER：显示怪物掉落、矿物分布图等，基于 JEI\nAppleSkin：显示饱食度、饥饿恢复速度等，辅助 HUD 信息显示\nMouse Tweaks：\n增强鼠标拖拽物品体验，快捷整理物品、批量移动等 双击左键可以归类 按住Shift拖动鼠标，就能把物品放到箱子里 滚动滚轮也可以转移物品到背包 JourneyMap：小地图 + 实时大地图，可浏览网页界面\nJade：物品提示，鼠标指向提示信息\nCustom Skin Loader：皮肤模组\nForgematica\nLitematica的Forge版本，在创造模式中设计建筑，然后生存模式中投影建筑\n需要前置模组：MaFgLib\n使用CTRL + 滚轮切换模式\n模式1可以选中方格，选择立方体的对角线，用于制作原理图\n按M打开Forgematica的主菜单，点击选区编辑器，可以保存原理图\n保存后原理图存放在了.minecraft/schematics，也可以从论坛中找别人的原理图\n之后可以切换到模式5，点击鼠标右键，就能在想要的地方插入原理图了，按住ALT滑动鼠标滚轮还能位置微调\n如果需要旋转，则需要按M → 原理图编辑 → 配置，右下角就有旋转了\n按M → 配置菜单 → 渲染层可以选择单层渲染，然后定位到玩家层\nPlanet Minecraft可以找到别人创作的原理图，且Forgematica和Litematica的原理图是通用的\nTweakerge\nTweakeroo的Forge版本 快捷键X + C 游戏增强，比如改善Gamma值，让矿洞变亮 EasierVillagerTrading reForged\nEasierVillagerTrading的Forge版本 村民快速交易 支持版本较少，支持1.18.2 皮肤 我遇见了一下三个问题，以及对应的解决方案：\n线下模式能看见自己皮肤，线上看不见\n成功进入服务器后，我发现我的皮肤并没有加载出来，然后进入Single Player Mode一试发现此时的皮肤可以加载出来，我以为是服务端没有向LittleSkin发送API导致还需要下载什么mod或者插件，找了半天原因也没找到，后来发现了一篇HMCL的文章：离线模式下更换皮肤 - Hello Minecraft! Launcher解决了问题\n本地要再创建一个离线账户，和LittleSkin使用同样的用户名，然后在衣架按钮上选择LittleSkin\n最后以离线账户Launch Game，加入服务器就可以显示皮肤了。\n线上模式自己能看见自己的皮肤，朋友看不见你的皮肤\n没有装Custom Skin Loader 皮肤变了，不是自己在LittleSkin配置的皮肤\n详见：CustomSkinLoader | LittleSkin 用户使用手册 ","permalink":"https://kyxie.me/zh/blog/game/minecraft/minecraft-client/","summary":"我本人也算是Minecraft的老粉丝了，初中就开始在手机上玩，还记得高一的时候每天晚上10点上完晚自习回家之后都得盖个楼修个桥的。后来换手","title":"Minecraft安装客户端"},{"content":" ","permalink":"https://kyxie.me/zh/blog/tech/server/debian/minecraft/","summary":"","title":"使用Docker部署Minecraft服务器"},{"content":"我的折腾历史 使用树莓派安装OpenWrt做主系统，但是又想做一个我的世界服务器，树莓派性能不太够需要换设备 买了Mini PC准备做我的世界服务器，Debian本身也可以做软路由，全部使用命令行也不是不行，但是还是觉得OpenWrt的Web Manager做的挺不错的，有点不想放弃 尝试过一些可以在Debian上跑的Web Manager比如Cockpit觉得还是差点意思，Webmin就更不行了，像是20年前的系统 使用Debian作为主系统，部署OpenWrt的Docker容器，先是使用Docker的Host模式但觉得失去的Docker隔离的意义而且无故添加了很多复杂的配置，实在是不优雅。然后折腾macvlan发现docker容器和宿主机无法通信折腾到头疼，遂放弃 使用PVE虚拟机安装OpenWrt，再安装Debian将默认网关指向OpenWrt 家里突然停电了一次，害怕使用PVE不稳定，于是回归之前的设定，树莓派做OpenWrt网关，Mini PC做Debian服务器，自己干自己的事儿 打算把树莓派出了，太大材小用了，我之前$70买的居然能卖$100。这差价可以再买个nanopi r2s来做网关了 需要的硬件和软件 硬件 一台有网线接口的电脑 内存2GB以上的树莓派4B+ 8GB以上的小SD卡，可以插在树莓派上 SD卡的读卡器 一根网线 显示器（非必须），Micro USB - HDMI线（非必须） 软件 Balena Etcher，MacBook用户可以选择下载这个，也可以选择用命令行代替 VM Virtual Box和Ubuntu虚拟机，非必须，用于编译OpenWrt固件，不过也可以选择下载别人编译好的固件。有一点需要注意，我第一次编译60GB就足够了，但是第二次希望编译一个固件库，想把所有功能全部选上，60GB不够，建议分配128GB储存 SecureCRT或PuTTy，非必须，不知道大家用什么命令行终端，但是我MacBook和Windows都是用系统自带的命令行终端 获得镜像 官网下载 可以从OpenWrt的官网下载镜像\n本地编译 官网的固件比较轻量化，一般什么都没有，好在我们也可以随时安装自己需要的应用。如果不想每次刷固件都把之前安装过的应用再重新装一遍，就需要我们自己编译固件了。这个仓库：Lean允许我们自己选择合适的应用，并且编译到内核。readme有比较详细的编译步骤。可以先在本地编译一次熟悉一下编译的流程，然后再使用GitHub Actions编译。\n第一次编译 首先在Ubuntu上clone repo\ngit clone https://github.com/coolsnowwolf/lede.git 安装依赖包\nsudo apt update -y sudo apt full-upgrade -y sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \\ bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \\ git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \\ libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \\ libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python3 \\ python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \\ uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev 更新feed并选择配置\ncd lede ./scripts/feeds update -a ./scripts/feeds install -a make menuconfig 输入这个命令后就开启了配置页面，我使用的是树莓派4B，下面是这些配置的具体说明，可以按需选择编译\n# 编译的目标系统 TargetSystem: - Broadcom BCM27xx Subtarget: - BCM2711 boards (64 bit) TargetProfile: - Raspberry Pi 4B/400/4CM (64bit) # 镜像参数 TargetImages: - squashfs - KernelPartitionSize: 64 - RootFilesystemPartitionSize: 2048 # LuCI设置 LuCI: Collections: - luci # 开启luci Modules: Translations: - Chinese(zh-cn) # 中文支持 Themes: - luci-theme-agron # 添加主题 # LuCI应用 Applications: - luci-app-adguardhome # 去广告 - luci-app-advanced-reboot - luci-app-alist # 文件共享，alist编译比较耗费时间，完全没必要编译进内核，可以当作软件下载 - luci-app-aria2 # 下载工具 - luci-app-cloudflared - luci-app-ddns - luci-app-diskman - luci-app-dockerman # Docker - luci-app-filebrowser # 文件管理 - luci-app-filetransfer - luci-app-firewall # 防火墙 - luci-app-frps - luci-app-frpc # 内网穿透 - luci-app-hd-idle # 硬盘休眠 - luci-app-lucky - luci-app-opkg # 软件包 - luci-app-openvpn - luci-app-openvpn-server - luci-app-passwall 翻墙 - luci-app-qos # 服务质量 - luci-app-samba # 网络共享 - luci-app-smartdns\t# 优化科学上网 - luci-app-upnp # UPnP服务 - luci-app-usb-printer - luci-app-wol # 网络唤醒 Protocols: - luci-protocol-wireguard # 可选工具 BaseSystem: - block-mount # 在LuCI界面添加\u0026lt;挂载点\u0026gt;菜单 - blockd # 自动挂载设备 - wireless-tools # 无线扩展工具 Administration: - htop # better top # 文件系统 KernelModules: Filesystems: - kmod-fs-ext4 - kmod-fs-f2fs - kmod-fs-ntfs - kmod-fs-squashfs - kmod-fs-vfat - kmod-fuse # 网卡支持 NetworkDevices: - kmod-xxx # 有线网卡支持，跟以下几项可根据需求选择性添加 NetworkSupport: - kmod-wireguard WirelessDrivers: - kmod-rt2800-usb # 添加Ralink RT5370芯片的USB无线网卡驱动 USBSupport: - kmod-usb-net: - kmod-usb-net-asix # 添加支持亚信的有线网卡支持 - kmod-usb-net-asix-ax88179 # 添加USB3.0的有线网卡芯片AX88179的驱动 - kmod-usb-net-rtl8152 # 添加USB2/3的有线网卡RTL8152/3芯片支持 - kmod-usb-net-sr9700 # 添加USB2.0的有线网卡SR9700芯片支持 - kmod-usb-core # 启用USB支持 - kmod-usb-hid # USB键鼠支持 - kmod-usb-ohci # 添加OHCI支持，老USB才需要 - kmod-usb-storage # 启用USB存储 - kmod-usb-storage-extras - kmod-usb-uhci # 添加UHCI支持，老USB才需要 - kmod-usb2 # 开启USB2支持 - kmod-usb3 # 开启USB3支持 # 网络工具 Network: DownloadManager: - ariang # Aria2管理页面 FileTransfer: - curl # 添加curl命令 - wget-ssl # 添加wget命令 IP Addresses and Names: - ddns-scripts-cloudflare # 用于ddns - drill\t# DDNS VPN: - wireguard-tools # 实用工具 Utilities: Compression: - bsdtar # tar打包工具 - gzip # GZ 压缩套件 Disc: - fdisk # 磁盘分区工具 - lsblk # 磁盘查看工具 Filesystem: - f2fs-tools - ntfs-3g # NTFS读写支持 - resize2fs # 分区大小调整 Terminal: - screen # 添加screen - losetup - pciutils # 添加lspci命令 - qrencode # wireguard qrcode - usbutils # 添加lsusb命令 目前我使用的配置\nTargetSystem: - Broadcom BCM27xx Subtarget: - BCM2711 boards (64 bit) TargetProfile: - Raspberry Pi 4B/400/4CM (64bit) TargetImages: - squashfs - KernelPartitionSize: 64 - RootFilesystemPartitionSize: 6144 LuCI: Themes: - luci-theme-agron Applications: - luci-app-adguardhome - luci-app-autoreboot - luci-app-ddns - luci-app-filetransfer - luci-app-firewall - luci-app-nlbwmon - luci-app-opkg - luci-app-passwall - luci-app-ramfree - luci-app-sqm - luci-app-wol Protocols: - luci-protocol-wireguard Network: IP Addresses and Names: - ddns-scripts-cloudflare - drill - tcpdump Utilities: - qrencode 关于Target Images，这里总结一下：\n如果你希望直接运行在物理主机，比如树莓派直接在SD卡刷固件，使用squashfs 如果你想把OpenWrt打包成Docker镜像，选择tar.gz 如果你想把主系统设置为PVE虚拟机，OpenWrt作为虚拟机的一个系统运行在MiniPC上，详见：x86 Mini PC安装PVE | Kunyang\u0026rsquo;s Blog 如果你暂时还没决定将来要怎么部署，可以先都选了 不同的架构的可选项是不一样的 RootFilesystemPartitionSize是安装之后的系统大小，我树莓派的SD卡为8G因此选择了6144M，如果你想使用PVE的话这里就不需要纠结了，可以在PVE上分配硬盘的大小 配置完成后选择Save，会保存为一个.config文件。在最后一步安装之前还需要安装screen，用于创建持久会话，否则如果不小心关了ssh之前编译的就都没了（你猜我是怎么知道的）\nsudo apt install screen screen -S buildlede 最后执行命令用8个线程下载dl库，第一次编译用1个线程编译。在这里一开始我用的AWS的Ubuntu一直下不下来，没有办法换成了本地的Ubuntu虚拟机才下载编译成功\nmake download -j8 make V=s -j1 单独编译 有时候用着用着发现我们需要安装一个插件，这种情况下我们可以单独编译一个插件\n编辑.config文件\nmake menuconfig 找到我们想单独编译的插件，比如luci-app-diskman，这是个管理路由器上的磁盘和分区的插件，第一次编译选择为[*]，意思是作为一个内置模块编译，不可以卸载。这次的话我们可以选择为[M]，意思是作为一个模块编译\n使用如下命令可以编译\nmake package/luci-app-diskman/compile V=s 打开openwrt，System → File Transfer选择文件上传，右下角安装就可以了\n我安装完后OpenWrt没有立刻出现新安装的插件，过了一段时间才出现的\n如果要单独编译内核模块，比如kmod-wireguard，可以在kernel module中选中它为[M]，然后运行\nmake package/kernel/linux/compile V=s 很快编译就完成了，编译出来的包在bin/packages/\u0026lt;target\u0026gt;/\u0026lt;package-repo\u0026gt;/kmod-wireguard_xxx.ipk\n第二次编译 拉取最新feeds\nsudo sh -c \u0026#34;apt update \u0026amp;\u0026amp; apt upgrade -y\u0026#34; git pull ./scripts/feeds update -a \u0026amp;\u0026amp; ./scripts/feeds install -a 清除旧的编译产物（可选）\nmake clean # 源码有大规模更新或者内核更新后执行，以保证编译质量 # 此操作会删除 /bin 和 /build_dir 目录中的文件 make dirclean # 如果要更换架构，例如要从 x86_64 换到 MediaTek Ralink MIPS 建议执行以下命令深度清理 # 此操作会删除 /bin 和 /build_dir 目录的中的文件（make clean），以及 /staging_dir、/toolchain、/tmp 和 /logs 中的文件 编译\nmake defconfig make download -j8 find dl -size -1024c -exec ls -l {} \\; make -j$(nproc) || make -j1 || make -j1 V=s GitHub Actions编译 熟悉了本地编译的流程之后就推荐使用GitHub Actions进行编译了，这样可以把脏活累活全部交给云，本来想自己写Workflow的yaml，但是找到了这个仓库，决定还是不重复造轮子了哈哈哈。\n注意如果希望自动将Artifact发布到Release的话，需要赋予PAT权限，在Settings → Developer Settings → Personal access tokens → Tokens (classic) → 你的Token，勾选workflow和write:packages\n烧录 直接烧录的image我们选择openwrt-bcm27xx-bcm2711-rpi-4-squashfs-factory.img.gz\nWindows 可以使用Balena Etcher或者其他的disk imager软件将image烧录到SD卡中，非常简单，按顺序一步一步来即可\nMacOS MacOS也可以使用Balena Etcher将镜像导入到SD卡中，如果不想下载软件，直接使用命令行也是可以的\n找到SD卡的磁盘编号，这里我的SD卡磁盘为/dev/disk4\ndiskutil list /dev/disk4 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *7.9 GB disk4 1: Windows_FAT_32 BOOT 67.1 MB disk4s1 2: Linux 109.1 MB disk4s2 (free space) 7.7 GB - 由于我这里以前装过一个不带GUI版本的OpenWrt，SD卡多了几个分区，这次打算重新装一个带着GUI的\n首先恢复分区，这个命令同时把SD卡进行格式化\ndiskutil eraseDisk FAT32 SDCARD MBRFormat /dev/disk4 恢复分区之后\ndiskutil list /dev/disk4 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *7.9 GB disk4 1: DOS_FAT_32 SDCARD 7.9 GB disk4s1 输入以下命令卸载（但不移除） SD 卡，否则会显示busy\ndiskutil unmountDisk /dev/disk4 解压下载的image\ngunzip ./openwrt-bcm27xx-bcm2711-rpi-4-squashfs-factory.img.gz 使用 dd 写入解压后的 .img 文件，注意这一步千万不要抄错了磁盘编号，否则伤害不可逆，dd是个很强的命令\nsudo dd if=/Users/xxx/Desktop/openwrt-bcm27xx-bcm2711-rpi-4-squashfs-factory.img of=/dev/disk4 bs=1M status=progress 如果不报错一般就是成功了\n最后将SD卡从电脑拔出，插到树莓派上，启动树莓派，这时使用网线将树莓派的以太网接口和电脑的以太网接口相连。由于OpenWrt 默认将树莓派的eth0接口桥接到br-lan并使用 IP 地址 192.168.1.1，我们要配置一下电脑端的Ethernet接口是否也在192.168.1.x的子网，x可以选2 - 255的随便一个数\n当树莓派就跟电脑在相同子网后，在浏览器中输入192.168.1.1，就能登录到OpenWrt的GUI（LuCI）了，默认用户名和密码是root和password\n大功告成了\n使用Docker容器 详见：将OpenWrt制作为Docker镜像 | Kunyang\u0026rsquo;s Blog\n连接路由器 我家主路由器使用的子网为192.168.2.x，需要将树莓派改为这个子网下。 单网口 由于树莓派为单网口，只有一个eth0，还是建议把这个网口设置为lan口\nvi /etc/config/network config interface \u0026#39;lan\u0026#39; option device \u0026#39;br-lan\u0026#39; option proto \u0026#39;static\u0026#39; option netmask \u0026#39;255.255.255.0\u0026#39; option ip6assign \u0026#39;60\u0026#39; option ipaddr \u0026#39;192.168.2.66\u0026#39; option gateway \u0026#39;192.168.2.1\u0026#39; option dns \u0026#39;192.168.2.1\u0026#39; 禁用DHCP，防止跟主路由器的DHCP冲突\nvi /etc/config/dhcp config dhcp \u0026#39;lan\u0026#39; option interface \u0026#39;lan\u0026#39; option ignore \u0026#39;1\u0026#39; 检查防火墙配置\nvi /etc/config/firewall config zone option name \u0026#39;lan\u0026#39; list network \u0026#39;lan\u0026#39; option input \u0026#39;ACCEPT\u0026#39; option output \u0026#39;ACCEPT\u0026#39; option forward \u0026#39;ACCEPT\u0026#39; 应用设置\n/etc/init.d/network restart 这时由于我们电脑还在192.168.1.x子网，但是树莓派已经到了192.168.2.x子网了，所以连接必定是断开的，我们再把电脑端的Ethernet端口改回192.168.2.x子网，就又能重新访问了\n将树莓派与电脑断开连接，插到路由器的LAN口上，应该能正常访问网络，而且电脑也能访问树莓派了\n设置旁路由 以上步骤只是将树莓派作为一个用网设备加入了家庭的局域网，我们的终端设备还是沿着主路由这条线进行通信，要想作为旁路由还需要进一步设置\n其实很简单，我们只要将Wifi的网关从路由器之前DHCP自动分配的地址改为旁路由树莓派即可，假设我的主路由器IP地址为192.168.2.1，我的电脑IP地址为192.168.2.54，我的树莓派的IP地址为192.168.2.66，我需要这么修改：\nMacBook也一样\n同样的iPhone也可以设置，这里我就不放图了\n因为怕炸网我暂时先使用这种非侵入式的设置，它只影响把网关设置为软路由的终端，这样一旦网坏了只影响部分设备，或者我修改一下网关修改到主路由器的IP地址就可以了\n教程详见：\n安装插件 卸载插件 可以在System → Software → Installed中卸载插件 注意直接编译进内核固件的插件无法卸载 安装插件 直接安装 国外源Arm\nsrc/gz openwrt_core https://downloads.openwrt.org/releases/23.05.0/targets/bcm27xx/bcm2711/packages src/gz openwrt_base https://downloads.openwrt.org/releases/23.05.0/packages/aarch64_cortex-a72/base src/gz openwrt_luci https://downloads.openwrt.org/releases/23.05.0/packages/aarch64_cortex-a72/luci src/gz openwrt_packages https://downloads.openwrt.org/releases/23.05.0/packages/aarch64_cortex-a72/packages src/gz openwrt_routing https://downloads.openwrt.org/releases/23.05.0/packages/aarch64_cortex-a72/routing src/gz openwrt_telephony https://downloads.openwrt.org/releases/23.05.0/packages/aarch64_cortex-a72/telephony 国外源x86\nsrc/gz openwrt_core https://downloads.openwrt.org/releases/23.05.0/targets/x86/64/packages src/gz openwrt_base https://downloads.openwrt.org/releases/23.05.0/packages/x86_64/base src/gz openwrt_luci https://downloads.openwrt.org/releases/23.05.0/packages/x86_64/luci src/gz openwrt_packages https://downloads.openwrt.org/releases/23.05.0/packages/x86_64/packages src/gz openwrt_routing https://downloads.openwrt.org/releases/23.05.0/packages/x86_64/routing src/gz openwrt_telephony https://downloads.openwrt.org/releases/23.05.0/packages/x86_64/telephony 国内源 Arm\nsrc/gz openwrt_core https://mirrors.tencent.com/lede/snapshots/targets/bcm27xx/bcm2711/packages src/gz openwrt_base https://mirrors.tencent.com/lede/snapshots/packages/aarch64_cortex-a72/base src/gz openwrt_luci https://mirrors.tencent.com/lede/releases/18.06.9/packages/aarch64_cortex-a72/luci src/gz openwrt_packages https://mirrors.tencent.com/lede/snapshots/packages/aarch64_cortex-a72/packages src/gz openwrt_routing https://mirrors.tencent.com/lede/snapshots/packages/aarch64_cortex-a72/routing src/gz openwrt_telephony https://mirrors.tencent.com/lede/snapshots/packages/aarch64_cortex-a72/telephony 国内源x86\nsrc/gz openwrt_core https://mirrors.tencent.com/lede/releases/24.10.0-rc1/targets/x86/64/packages src/gz openwrt_base https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/base src/gz openwrt_helloworld https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/helloworld src/gz openwrt_luci https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/luci src/gz openwrt_packages https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/packages src/gz openwrt_routing https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/routing src/gz openwrt_telephony https://mirrors.tencent.com/lede/releases/24.10.0-rc1/packages/x86_64/telephony 自己编译 首先需要在Ubuntu上编译插件\nmake menuconfig 在LuCI → Applications可以把固件全选上，毕竟我们是做个固件库，之后有啥需求就装啥。选择时应该模块化，按空格让前面括号里出现一个M。保存后回到命令行开始编译\nmake -j1 V=s 编译完成后在bin\\packages中就能找到我们编译的全部插件了，而且都为.ipk格式\n常见使用场景 DDNS 详见：OpenWrt配置DDNS | Kunyang\u0026rsquo;s Blog 去广告 详见：OpenWrt部署AdGuardHome | Kunyang\u0026rsquo;s Blog 外网访问我的Windows台式机 Wireguard 详见：OpenWrt配置Wireguard | Kunyang\u0026rsquo;s Blog ZeroTire 所需插件 luci-app-zerotire OpenVPN 所需插件 luci-app-openvpn luci-app-openvpn-server luci-i18n-openvpn-server-zh-cn luci-i18n-openvpn-zh-cn open-vpn-easy-rsa openvpn-openssl 其他Self Hosted服务 详见：Debian 🌀 | Kunyang\u0026rsquo;s Blog ","permalink":"https://kyxie.me/zh/blog/tech/server/openwrt/raspberrypi-openwrt/","summary":"我的折腾历史 使用树莓派安装OpenWrt做主系统，但是又想做一个我的世界服务器，树莓派性能不太够需要换设备 买了Mini PC准备做我的世界服务","title":"树莓派4B+安装OpenWrt用作旁路由"},{"content":"好久没折腾自行车了，最近刚换了roval的破风把，准备打算在车把也内走线，这样车把握起来就爽快多了。我自己拆车试了一下，结果被Shimano 7020两根油管两根线管一共4根线实在是折磨得不轻，于是有了买套Shimano 8170的念头，故刷起了加拿大的各大自行车网站。这不刷不知道一刷吓一跳，一套Shimano 8170至少得$3000，税后怎么着奔$4000去了。看了一眼淘宝国内的价格居然都跌到￥8000了，干脆从国内空运一套过来，在这里开个帖子记录一下我的装车的全过程。\n先说结论：我自认为我算是动手能力非常非常强的了，但是在装车的过程中还是踩了无数个坑，这里有点心疼国内的技师们，国外装个车就得$300+。\n拆车 想换套件换车把的同时做个大保健，然后开起了漫长的拆车之旅：\n首先是不知道自己该用什么中轴工具，找了半天自己的中轴型号是螺纹中轴(Thread Bottom Bracket) SM-BBR60 BSA，于是乎Temu买工具，等了半个月\n其次是中轴拿不下来，于是乎去the Home Depot买了个橡皮锤和wire cutter\n然后是是手变速线拿不下来，拆掉7020的螺丝之后才发现线头需要跟手变的孔对准（这里提醒大家如果想自己搞一定要勇于拆，一般来说不会装不上，拆下来才能明白他的原理）\n然后是油管自己剪不断，看了可利呼的视频发现应该拿小刀切\n\u003c!DOCTYPE HTML\u003e 然后是这个线管穿线实在是穿不出来，后来发现了有专门的导线工具，于是我用了替换下来的变速线当导线工具（其实这时我还没有打算换套件，想继续用用7020来着）\n然后发现前刹车油管剪短了\n然后发现四根线根本无法同时从车把里穿出来\n这时由于我的手变没有油堵，刹车油已经弄得我新车把到处都是了（这时有了非常坚定的念头要换套件）\n放弃，套件挂咸鱼（最后竟然一共卖了C$600，也算是出乎我的意料了）\n配置 我的整车配置：\n车架：Specialized Tarmac SL6 Sport 套件：Shimano Ultegra R8170 前轮：Roval Rapide CLII 后轮：Roval Rapide CLX 弯把：Roval Rapide Handlebar 400mm 把立：Specialized Future Stem 100mm 坐垫：Specialized Power Comp 坐管：S-Works Carbon Seatpost 锁踏：Shimano Dura-Ace PD R9100 把带：Supacaz Super Sticky Kush 外胎：Continental GP5000 25c 内胎：RideNow TPU 码表：Garmin Edge 530 尾钩：Sigeyi 表架：扭矩 尾包：Silca Mattone Seat Pack 把包：Rapha Expore Bar Bag 2.4L 装车 后夹器 首先安装后夹器，将前叉拆下来，在穿油管的时候可以线把油管伸出头管，然后套上防止异响的保护套，然后再从头部油管口伸出油管 穿油管还是比较难的，这里淘宝买的引导线救了大命了\n然后用螺丝固定后夹器，注意特殊螺丝靠后\n不要忘记安装垫片\n最后安装保险栓\n前夹器 前叉穿线太痛苦了，再一次感谢淘宝买的引导线 把组 将手变固定在弯把上，放在地上或者使用激光仪调整平衡 千万不要忘记锁紧吊芯，注意吊芯上的箭头应该对准把立螺丝的缝隙（有些车需要对准前面） 调整把组垫片 将弯把固定在把立上 锁紧碗组盖 锁紧把立盖子 将码表架固定在把立上 电池 将电池固定在座管内部，可以用专用的Di2 battery holder，我这里就直接拿电工胶布固定了一下\n电池的三根线成等腰三角形，上面的连接后拨，左边的连接前拨，剩下的不动就行，但是也不要把保护套摘掉。\n后拨 我使用Sigeyi的直装尾勾（不小心买了绿色，但是绿色的实在是太丑了），因此需要先将原厂的吊耳摘下来，这里拧了好久实在是拧不下来，无奈还是去找车店了\n使用Shimano自带的工具将线连接，分别连接后拨电池和前拨电池\n手机下载E-TUBE按住后拨按钮2秒，开始闪烁蓝灯时（不要按的时间太长了），就可以开始配对了，注意这里要等后拨电量比较充足的时候才能进行\n不要忘记装电线堵头\n前拨 这里电线要绕一圈然后从车架内进入，最后连接座管内的电池\n注意别忘了装电线堵头\n喜玛诺自带配件中有一个前拨折线配件\n手变 穿线\n首先需要切线，将油管跟手变末端对齐，做一个记号，再在记号后面21mm处再做一个记号，第二个记号就是截管的位置\n使用专用的截管工具截管\n将手变油管堵头螺丝拿下来，注意拿纸垫在下边，用来吸油，然后将橄榄头拿出来\n先穿入手变油管堵头螺丝，然后再将橄榄头穿入油管，最后用专用顶针工具将油针顶进油管（如果先顶针的话橄榄头有可能塞不进去）\n将螺丝拧紧，扭力是8Nm，一定要拧紧，否则会漏油\n灌油\n首先将轮组拿下，一定注意碟片不要沾到油 然后将夹器的来令片拆下来，来令片也不能沾到油，拆掉之后可以用六角扳手用力按压活塞，将活塞撑开到尽可能宽，然后使用专门卡住活塞的工具，顶住活塞 将手变的油缸螺丝拧下来，灌油工具有专门的连接件，一定要先把连接件拧上，再装油杯（也有可能是一体的没有连接件，总之一定要拧紧，直接插入是不行的），否则会漏油 将注射器连着管插入夹器中，然后拧开注油螺丝，就可以开始注油了，注油的同时可以弹一弹油管将空气排出 注意当注油螺丝没有拧紧的时候，刹车是肯定能按倒底的，只有当注油螺丝拧紧后才会按不到底 把多余的油擦干净 中轴 我的中轴规格是SM-BBR60 BSA螺纹中轴 牙盘和曲柄 不要忘记涂抹界面脂（又有人说界面脂会导致拆不下来，苹果酱即可，等我问问技师）\n13N的扭力固定曲柄\n链条 有字面朝外\n我们需要确定链条长度，我使用的是这个方法\n\u003c!DOCTYPE HTML\u003e 注意：截取链条的时候一定要注意，一定要让我们需要的链条的两端都为内导板（下图只是想介绍什么是内导板和外导板，Shimano的链条基本上都用魔术扣了很少用这样的销钉），如果我们一个为内导板一个是外导板的话魔术扣是装不上的，而且用截链器只截掉一节外导板是非常困难的\n下图办法也可以使用，我最后安装链条的时候不下心多截了一两节让链条变短了，事实证明一两节不太影响\n魔术扣第一次很难装上，我们需要把魔术扣转动到牙盘左上方，而且牙盘正好朝前，这时拿脚用力一踩曲柄就能把魔术扣装上了\n变速 首先将套件调至最大飞，然后调节张力螺丝，配合喜玛诺自带的卡尺，调整后拨和最大飞的间距\n按住后拨按钮两秒，蓝灯闪烁时可以在E-TUBE软件中连接套件，选择Maintainance，按照步骤调节前拨，注意软件上的示意图是从上到下俯视观察的\n\u003c!DOCTYPE HTML\u003e 然后将后拨调至从大到小第五个飞轮，软件中微调使后拨和飞轮处在同一个水平面\n下面视频为7170的前拨调节，注意8170的前拨没有限位螺丝\n\u003c!DOCTYPE HTML\u003e 缠把带 最后就是缠把带了，虽然缠了好多次了但是还是很不会缠，最好还是找两个例子左边一个右边一个，不然我脑子转不过来，这个网上的教程应该也一大堆了 用电工胶布拧紧的时候要把胶布在车把上粘几圈，否则把带容易往下掉 回想起我第一次缠把带的时候b站找了半天竟然只有一个GCN的缠把带教学视频，如今看来公路车真的火起来了 Footer 最后放几张装好的照片\n文中的装车YouTube视频来自于\nUpdate 1，碗组 不知道为什么刚组装好车的时候没有发现这个问题，大概骑了一个月以后车把开始转不动，火山盖磨车架。一开始以为是苹果酱涂少了，抹酱后发现依旧不行。后边以为是吊芯太紧了，研究了半天如何拆卸闪电的吊芯，发现他实在是太难拆了感觉需要上锤子。实在搞不下来去找了Yonge街上的Bike Depot，阿三店员一脸客气地收了我CAD$10（不过取车的时候Manager并没有收我钱）。从车店取车回家以后用松的吊芯又重新安装了一遍把组，发现依旧磨车架。最终发现是缺少了垫片，无奈淘宝下单，等我妈来加拿大的时候给我捎过来。\n神奇啊我妈带来的0.1mm的垫片竟然给问题解决了，就差0.1mm！\nUpdate 2，套件升级 ","permalink":"https://kyxie.me/zh/blog/bike/8170/","summary":"好久没折腾自行车了，最近刚换了roval的破风把，准备打算在车把也内走线，这样车把握起来就爽快多了。我自己拆车试了一下，结果被Shimano","title":"Specialized Tarmac SL6装车"},{"content":"Aug 2021, Bank of China 我的第一张信用卡是出国前和我爹一起去中国银行办的卓隽，我用我爹的副卡，不太清楚额度是多少。我只是刚到加拿大的前几天用这张卡，出了隔离之后办了Scotiabank就不再使用了，以后如果回国买水果产品分期的话说不定也会偶尔用用，反正我爹还钱。\n这张卡无年费，开卡奖励不清楚，返现不清楚，但是摸起来比加拿大的银行卡要厚好多，质感好一些，不知道是不是心理作用。据说这张卡现在有了CAD直接结算的，这样的话用起来会更方便。\nSep 2021, Scotiabank Scene+ 由于办学签来加拿大走的是SDS通道需要买个$10000的GIC，光大银行离家近，我就直接办的光大银行的GIC。光大银行对接的是Scotiabank，来到加拿大以后找了家Scotiabank的branch就给我开了checking account和信用卡，额度是$500。由于额度太少了我当时买好多东西都是先提前往里充钱，再刷卡消费，把信用卡花成了prepaid card。因为这是我第一张加拿大信用卡，所以也不会关卡。\n这张卡无年费，开卡送5000 Scene+积分，Sobeys旗下的超市，双立人，Cineplex都是2x积分，其他消费1x积分，之前换电影票好像是1250分，后来变成总价格 * 100 Scene+积分。最开始也没研究怎么薅羊毛，所以我在毕业之前一直在用这张卡。\nJan 2023, BMO Cashback 这个时候找到工作，就开始研究怎么薅羊毛了，最开始申请的是这张BMO的买菜卡，额度$1000。由于一开始只想找个无年费且返现高的就申请了这张，确实这张卡在无年费的里面算比较好的了。\n这张卡无年费，好像也没有什么开卡奖励（好像是前1个月还是3个月买菜10%返现），买菜3%返现（每月$500的cap），流媒体账单1%返现，其他消费0.5%返现，Mastercard应该会把沃尔玛算作Grocery因此也有3%（待考证）。最主要的是由于22年趁着黑五开了Costco，当时一直没有Mastercard来刷Costco，这下终于可以在Costco消费了。这张卡用了半年，基本只有买菜在用，返了$300多，因此还是挺不错的。\n2024年五月关卡。\nMar 2023, CIBC Costco 很快我就发现只有买菜返现可不行，还得再申请一张卡用来对应吃饭的返现，于是开始研究无年费饭卡。本来想申请Simplii是4%返现，但是听说非PR不太好下卡，最后还是选择了Costco的信用卡，刚开始给我的额度是$3000，后来他们给我提升到$6000。\n这张卡无年费，但是必须要有Costco会员，吃饭3%返现，Costco加油3%返现，其他加油站2%返现，Costco网站消费2%返现，但是网站价格要更贵一些，其他消费1%返现。这张卡也用了半年，感觉返现速度比较慢，半年多也才返了$300。打算把Costco停掉之后转到CIBC的其他卡。\n由于取消了Costco会员，2024年五月关卡。\nAug 2023, Triangle MC 这段时间被SportChek店员忽悠着办了一张Triangle的卡。他应该是按照惯例问我要不要办这张卡，我当时还对信用卡研究没有这么深，以为这是那张带着免费拖车的卡，于是稀里糊涂就同意了，这店员一听我同意了也很懵逼，可能是被拒绝惯了。正当我准备拿出自己的信用卡付款的时候店员说不用了，会把消费记到这张新信用卡身上。我问会不会被hard pull，他说可以不激活卡，这样就只会soft pull一下，我又问那我不激活怎么给这张信用卡付款，他说在你checking账户加入payee就可以了，最后我说好吧就这样办了这张卡。后来还是没发现该怎么不激活就还款，也懒得打电话问，干脆就激活了，当时也没管有没有hard pull。总结永远不要办沃尔玛，SportChek这种店员老大妈过来围着问你要不要办的卡。\n其实这张卡也挺不错的，无年费，Triangle加油直接每升便宜5分钱，Canadian Tire旗下包括SportChek都是4%返现。后边办了Cobalt之后基本上油价便宜的时候会去Canadian Tire加油刷这个卡，油价贵的时候去别的地方加油刷Cobalt，所有的返现都会转化成CT Money然后在Canadian Tire旗下的商店使用。\n不过对于加油问题我刚算了一下，假设油价为a，加油体积为b，Triangle真实的加油消费为：(a - 0.04) * b = ab - 0.04b，Cobalt真实加油消费为：ab * (1 - 0.016 * 2) = 0.968ab。也就是说当油价低于1.25的时候Triangle才比Cobalt划算，我来加拿大之后还没有遇见过这么便宜的油价，那这张MC真是屁用没有了，等着买了房子转成黑卡吧。\n黑卡WEMC除了这张普通卡有的服务以外，还有免费拖车和地税服务。不过我也暂时也用不上，等到时候再换卡就可以了。不过所有的WEMC信用卡都有免费的Boingo WiFi，之前在国泰航空上看到过这个，等什么时候有了张WEMC上飞机的时候试试。黑卡还有一点就是长时间不用的话就会自己关卡，所以得等有了房子之后用来交地税才能保证经常用。\nOct 2023, AMEX Cobalt 点击链接开卡，送15000MR\n由于之前一直只想办无年费的信用卡，且觉得加拿大AMEX接受率不高，再加上觉得使用PPP过于麻烦，于是并没有考虑办AMEX的卡。后来在朋友的忽悠下，正好那段时间Cobalt refer别人奖励翻倍，于是我也办了张Cobalt，也幸亏如此，如果再晚一个周开卡的话，Cobalt奖励就从之前的30000MR变成了15000MR，这羊毛又薅到了。\n这张卡月费$12.99，相当于年费$155.88，开卡奖励每月花$500返2500MR持续12个月（现在变成了每月花$750返1250MR持续12个月）。吃饭（美国的餐厅也可以），买菜（建兴超市也可以刷）都是5x积分，流媒体（包括Apple Music）3x积分，酒店Airbnb机票加油 2x积分，其他消费1x积分，refer一个人送5000MR。我开卡两个月就拿了40000MR简直是太爽了（1MR可以看作$0.016）。所有的MR积分都可以1:1地转化为Areoplan积分，刷几个月一张回国机票就出来了。\n经过了几个月的记账之后发现，平时消费最多的地方不在买菜和外出吃饭而在于其他消费。好不容易办一张有年费的信用卡那可得薅个痛快，于是我开始买Paypower Prepaid Mastercard (PPP)。PPP也算是老羊毛了，比较安全，在超市里搭一根香蕉基本不会被FR。\n之前算过买reloadable的PPP和non-reloadable PPP的区别，假设我一个人，每个月买$2500的PPP。\nNon-reloadable:\nNon-reloadable的算法就很简单了，每张卡$9.95+tax就完了，一次买$500，不过这样的话我1个月最多也就买2张PPP，能5x积分的就直接拿Cobalt刷了。\nimport math COBALT_MONTHLY_FEE = 12.99 AMEX_VALUE = 0.016 # Let 1MR = $0.016 TAX_RATE = 1.13 PPP_NONRELOADABLE = 9.95 * TAX_RATE PPP_PER_MONTH = 1 class NONRELOAD: def __init__(self): self.cost = COBALT_MONTHLY_FEE + PPP_PER_MONTH * PPP_NONRELOADABLE self.cashback = round(round(500 + PPP_NONRELOADABLE, 2) * 5) * PPP_PER_MONTH * AMEX_VALUE self.profit = self.cashback - self.cost if __name__ == \u0026#34;__main__\u0026#34;: nonreload = NONRELOAD() print(f\u0026#39;Non-reload ppp cost\u0026#39;.ljust(30) + f\u0026#39;= {nonreload.cost:.2f}\u0026#39;) print(f\u0026#39;Non-reload ppp cashback\u0026#39;.ljust(30) + f\u0026#39;= {nonreload.cashback:.2f}\u0026#39;) print(f\u0026#39;Non-reload ppp profit\u0026#39;.ljust(30) + f\u0026#39;= {nonreload.profit:.2f}\u0026#39;) 按照每个月2张PPP算下来的返现是：\nNon-reload ppp cost = 35.48 Non-reload ppp cashback = 81.79 Non-reload ppp profit = 46.32 剩余的$2500 - $9.95 * 1.13 * 2 - $500 * 2 = $1477 肯定都是5x积分了，当然我是穷逼肯定不会都花完，就当$1000来算，这样最终的返现为：$1000 * 5 * 0.016 + $46.32 = $126.32。\nNon-reloadable的缺点就是每次只能买$500的卡，花完了就得再去超市买，所以如果想买超过$500的商品就比较麻烦了，可以搭配着gift card来使用。另外一个缺点就是最后剩下点钱不知道该怎么办了，本超级社恐肯定是不会厚着脸皮让店员separate to two bills的，我就都拿来充Presto卡了（Good News，最近Presto卡可以加到Apple Pay了，充值更方便，建议不要申请一张新的卡，可以更新Presto App后convert老卡到Apple Pay，这样一张卡更好管理，缺点就是实体卡就不能用了）。\nReloadable:\nReloadable由于需要耗费太多精力了，而且需要找菜店店员帮我充值，所以本超级社恐一直懒得搞，不过要是有人知道Richmond Hill或者Markham哪里可以买reloadable的ppp也麻烦告诉我一下😁。\n基本原理就是这样的，如果有一张其他的高返现的信用卡，比如说Rogers Bank新出的那张红卡，（不太清楚PPP能不能给这张卡还账单毕竟是张新卡，只是拿来举个例子）。0年费，而且只要是Rogers或者Fido用户都可以3%返现，那就可以平时的消费全部刷红卡，然后去超市用Cobalt买PPP用来还红卡的账单。\n当然PPP也是有一定费用的，PPP每次最多充$500，总金额最高是$2500，reload手续费是$6.95，月费是$4.95，每次付账单手续费是$1.95。付账单也有金额限制，每24小时最多$1000，每7天最多$2500，每30天最多$5000。\n假设我1个月花$2000，就需要买4张PPP来还账单：\nimport math COBALT_MONTHLY_FEE = 12.99 AMEX_VALUE = 0.016 # Let 1MR = $0.016 TAX_RATE = 1.13 PPP_NONRELOADABLE = 9.95 * TAX_RATE PPP_PER_MONTH = 2 PPP_RELOAD_FEE = 6.95 * TAX_RATE PPP_BILL_FEE = 1.95 * TAX_RATE PPP_MONTHLY_FEE = 4.95 * TAX_RATE MONTHLY_COST = 1000 # How much do I spend only by ppp per month PPP_BILL_AMOUNT = 1000 # How much PPP can pay bill at a time ROGERS_CASHBACK_RATE = 0.03 class RELOAD: def __init__(self): self.reload_cost = PPP_PER_MONTH * PPP_RELOAD_FEE self.card_cost = COBALT_MONTHLY_FEE + PPP_MONTHLY_FEE self.bill_cost = math.ceil(MONTHLY_COST / PPP_BILL_AMOUNT) * PPP_BILL_FEE self.rogers_cashback = MONTHLY_COST * ROGERS_CASHBACK_RATE self.cobalt_cashback = round(round(500 + PPP_RELOAD_FEE, 2) * 5) * PPP_PER_MONTH * AMEX_VALUE self.cost = self.reload_cost + self.card_cost + self.bill_cost self.cashback = self.rogers_cashback + self.cobalt_cashback self.profit = self.cashback - self.cost if __name__ == \u0026#34;__main__\u0026#34;: reload = RELOAD() print(f\u0026#39;Reload ppp total cost\u0026#39;.ljust(30) + f\u0026#39;= {reload.cost:.2f}\u0026#39;) print(f\u0026#39;Reload ppp total cashback\u0026#39;.ljust(30) + f\u0026#39;= {reload.cashback:.2f}\u0026#39;) print(f\u0026#39;Reload ppp profit\u0026#39;.ljust(30) + f\u0026#39;= {reload.profit:.2f}\u0026#39;) 所以同样是花$2000，这样最终的返现是：\nReload ppp cost = 54.40 Reload ppp cashback = 222.50 Reload ppp profit = 168.09 这样每个月比Non-reloadable多$41，也算是还行吧。\n现在Non-reloadable Paypower也是可以加入Apple Pay了，省的每次还要刷磁条卡刷完再签字显得很埋汰。\nJan 2024, TD Areoplan 最近薅了把TD的羊毛，开checking account绑定工资再还一次账单，能拿$400，新移民能waive掉第一年的年费。开saving账户存$5000能拿$100，存$10000拿$200。开TSFA，FHSA，RRSP 3个账户中的1个存$5000拿$150，3个中的2个各存$5000拿$350。信用卡本来想申请黑色的Areoplan卡结果被拒了说我不是PR，于是打算申请白色的，开卡消费一次送10000Areoplan积分，90天内消费$1000还能再拿10000Areoplan积分，第一年都是免年费的。算下来总共是$750的cash，20000Areoplan积分，免去了$292.4的月费。\n由于这张卡我就是打算薅开户奖励的，因此也不怎么在意返点。它年费是$89，买菜，加油，Air Canada消费1x积分，其他消费$1.5返1Areoplan积分，在星巴克消费可以多返50%Areoplan积分（也就是1.5x积分）。基本上都没有Cobalt好。\n黑卡的话是消费返10000Areoplan积分，半年之内消费$5000返25000Areoplan积分（Jan 3, 2024之后Approve的卡是20000），一年之内消费$7500返15000Areoplan积分（Jan 3, 2024之后Approve的卡是10000），纯开户奖励的话还真没有白卡好，而且必须要PR才行。\n2025年一月关卡。\nFeb 2024, Rogers WEMC Rogers刚把自家的WEMC给升级了，于是马上办了这张卡，GCR给返了$50。所有消费2%返现，Fido, Rogers用户可以多redeem 50%也就是3%返现，这些跟Rogers Mastercard都一样。多出来的是美元的3%返现（叠加1.5倍，综合下来是2%的返现，优于EQ的0.5%和WS的1%）。不过这张卡对我来说也就是WEMC自带的Boingo可能会有点用，毕竟有Cobalt + PPP平时用的可能不怎么多，但不可否认是张很不错的抽屉卡，之后会留着PPP不够用了应急用，或者买一件超过500刀的东西用，或者刷美元时候用。\n有DP说这个卡退款不给退FX May 2024，AMEX Marriott 点击链接开卡，送55000 Marriott Points\n已经有计划5月份申请了AMEX Marriott Bonvoy了，目前是史高奖励，开卡后3个月内花$3000送65000万豪分，开卡后6个月内在汽油和旅游上的消费$1额外返3点万豪积分，GCR返$75， $60（又变成$75了）（80000 + $75 $60$75），refer的话能多5000积分（85000），按照1万豪分0.9cents来看的话还是GCR更划算一点。\n这个卡是个抽屉卡，年费$120，第二年开始（交完年费后8个星期）每年送一张35k免房券（在兑换房间的时候可以最多Cover 35k Points，举个例子，假设一晚上要50k分，可以用一张免房券 + 自己掏15k分；假设一晚上10k分，那也是要用一张免房券），在万豪消费$1返5积分。相当于$120住一晚上酒店，在北美住酒店基本上一晚上也要$200，所以说总体上来说算是挺不错了，但是不免FX fee比较傻逼。\nSep 2024, AMEX Green 点击链接开卡，送12500MR\n由于要出去旅游申请了AMEX绿卡，我用GCR申请的有$30的返现，3个月刷满$1000送10000MR，然后打电话给AMEX match到刷满$1250送12500MR。\n最基础的无年费AMEX卡，花$1返1分，申请着收藏用。\nJun 2025, Scotiabank Momentum Visa Infinite 目前对这个卡有兴趣，但是还在观望。主要原因是可以使用Chexy租房。这个卡年费$120，买菜，Recurring Bill 4%；加油，daily transit 2%；其他1%。Chexy的基本原理就是使用Chexy给房东转房租，消费Scotiabank卡，Chexy收取1.75%的手续费，然后替你把房租e-transfer转给房东，Chexy的支出在Scotiabank这个卡属于recurring bill 4%，因此还是有利可图的。\n我目前房租一个月$1000，车保险$270.87，健身房$50，那么我的总收益就是(1000 * 1.0175 + 270.87 + 50) * 0.04 * 12 - 120 = 522.42。\n最近也在考虑搬家，假设后边房租一个月$1800，车保险变成$240，使用公寓的健身房，那我的总收益就是(1800 * 1.0175 + 240) * 0.04 * 12 - 120 = 874.32。\n这个卡的开卡奖励是前3个月10%的cash back，第一年免年费，此外GCR奖励$100。\nChexy找人refer奖励$15，最近也刚开始和Areoplan合作，第一次使用Chexy付账单奖励2000分，前六个月消费$5000奖励5000分，前12个月连续使用奖励1000分，对于房租来说肯定够了。\nUpdate：傻逼Scotiabank不让我申请这张卡，我猜的理由是我之前开过他们家的卡（就是我第一张卡，额度只有$500的）然后关了，这咋还记仇了神经病吧。\n","permalink":"https://kyxie.me/zh/blog/wool/credit-cards/","summary":"Aug 2021, Bank of China 我的第一张信用卡是出国前和我爹一起去中国银行办的卓隽，我用我爹的副卡，不太清楚额度是多少。我只是刚到加拿大的前几天用这张卡，出了隔","title":"加拿大🇨🇦信用卡薅羊毛心得"},{"content":"安装过程 首先需要安装Hugo，安装Hugo需要利用一个包管理工具，对于Windows系统Hugo可以直接用Winget来安装，打开终端输入\nwinget install Hugo.Hugo.Extended 如果提示not recognized as the name of cmdlet，查找C:\\Users\\Username\\AppData\\Local\\Microsoft\\WindowsApps目录下有没有winget.exe，如果存在则添加这个目录到环境变量，否则去应用商店找winget，这是windows官方提供的windows包管理工具，一般系统里都会自带\nHugo的tutorial介绍了如何创建一个项目，其中step2（.yml的config文件）和step3（下载主题）要根据PaperMod的guide来配置\n文件介绍 content：用于放博客内容 data：不用管 layouts：自定义的HTML public：项目导出文件 resources：自定义的CSS和JavaScript static：存放的图片 themes：主题 进入themes/PaperMod则是PaperMod的相关代码，比较主要的目录有：\nassets：PaperMod的CSS和JavaScript代码 layouts：PaperMod的HTML Config.yml 建议直接按照GitHub - xyming108/sulv-hugo-papermod进行配置\n创建文章 在终端输入 hugo new 文章名称.md 就会在 content 文件夹下创建markdown文件，文章头部信息可以修改这篇文章的属性\n常见的头部字段功能\n基本字段\ntitle: 页面标题，用于显示在浏览器标题、文章标题等地方\ndate: 创建日期，例如 2024-11-15T20:00:00+00:00\nlastmod: 最近修改时间，常用于生成更新时间\ndraft: 是否为草稿（true 表示草稿，生成站点时会被忽略）\nauthor: 作者名称 description: 页面描述，用于 SEO 和摘要\nslug: 页面友好的 URL 片段\nurl: 自定义页面 URL type: 页面类型（例如 post、page），决定模板的选择\n分类和标签\ncategories: 页面所属分类，例如 [\u0026ldquo;Tech\u0026rdquo;, \u0026ldquo;Programming\u0026rdquo;]\ntags: 页面标签，例如 [\u0026ldquo;Hugo\u0026rdquo;, \u0026ldquo;Static Site Generator\u0026rdquo;]\n页面内容控制\nsummary: 页面摘要，如果未指定，会自动从内容中提取\nweight: 排序权重，数值越小越靠前\naliases: 页面别名，用于创建 URL 重定向，例如 [\u0026quot;/old-url/\u0026quot;]\nlayout: 指定使用的布局模板，例如 single 或 list\noutputs: 输出格式，默认是 HTML，可以是 JSON、AMP 等\nresources: 页面资源，用于定义图片、PDF 等\nSEO和社交\nkeywords: 页面关键字，例如 [\u0026ldquo;Hugo\u0026rdquo;, \u0026ldquo;Markdown\u0026rdquo;, \u0026ldquo;SEO\u0026rdquo;]\ncanonical: Canonical URL，指定搜索引擎的首选页面地址\nimages: 页面分享时的图片链接（用于社交平台）\n创建子文件夹 可以直接用文件夹来管理目录，比如这是我中文博客的目录\n@Kunyang ➜ blog git(master) tree /F D:. │ _index.md │ ├───Life │\t... ├───Tech │ │ _index.md │ │ │ ├───Web │ │ Papermod.md | | ... │ │ _index.md │ │... │ └───Wool ... 可以看到每一层都有一个 _index.md 用来管理文件层级，文件中只包含头部信息。由于我使用了多语言，因此第一层不要添加 url 字段\n# zh/blog/_index.md title: \u0026#34;博客 📒\u0026#34; date: 2022-06-11T21:59:32-04:00 draft: false hidemeta: true 除此之外，在其他的子文件夹中的 _index.md 建议都添加 url 字段\n# zh/blog/tech/web/_index.md title: \u0026#34;建站 🚧\u0026#34; date: 2024-11-15T01:01:32-04:00 draft: false hidemeta: true url: \u0026#34;/zh/blog/tech/web/\u0026#34; weight: 1 可以使用 weight 字段来排序\n最后更新 可以修改 post_meta.html 加入\n{{- $scratch := newScratch }} {{ $date := .Date }} {{ $lastmod := \u0026#34;\u0026#34; }} {{- if not .Lastmod.IsZero -}} {{ $lastmod = .Lastmod }} {{- end }} {{- if not .Date.IsZero -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; (.Date) (.Date | time.Format (default \u0026#34;January 2, 2006\u0026#34; site.Params.DateFormat)))) }} {{- end }} {{- if ne $lastmod $date -}} {{- $scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;\u0026lt;span title=\u0026#39;%s\u0026#39;\u0026gt;%s%s\u0026lt;/span\u0026gt;\u0026#34; (.Lastmod) (i18n \u0026#34;updated\u0026#34;) (.Lastmod | time.Format (default \u0026#34;January 2, 2006\u0026#34; site.Params.DateFormat)))) }} {{- end }} ... {{- with ($scratch.Get \u0026#34;meta\u0026#34;) }} {{- delimit . \u0026#34;\u0026amp;nbsp;·\u0026amp;nbsp;\u0026#34; -}} {{- end -}} 本地预览 在终端输入 hugo server -D 启动，建议新建一个.bat文件执行这条指令。 启动服务器后，打开浏览器，本地预览网址为 localhost:1313。 网站部署 我用的是GitHub Page\n在GitHub里创建一个仓库，名称叫做 你的名字.github.io 当我们本地预览没问题了的时候，在终端输入 hugo -F --cleanDestinationDir，在 public 文件夹下就会生成输出文件 我们将 public 文件夹作为GitHub Page的本地仓库，每次生成输出文件就推送到GitHub上，GitHub Page就会自动帮我们部署了 自定义域名 建议早一点买个域名，避免配置完一遍结果更换了域名又得重新再配置一遍。\n点击GitHub右上角头像 → Settings → Pages → Add a Domain\n填入自己的域名，我的是 kyxie.me，然后会生成一个DNS TXT record，相当于一个用户名和密码，验证一下这个域名是属于你的\n我的域名是在cloudflare申请的，在kyxie.me -\u0026gt; DNS -\u0026gt; Records -\u0026gt; Add Records，添加三条规则，前两条为\nType Name Target CNAME @ kyxie.github.io CNAME www kyxie.github.io 第三条Type是TXT，Name为GitHub生成的Record，TTL选择Auto，Content是GitHub生成的Value\n然后在SSL/TLS -\u0026gt; Edge Certificates -\u0026gt; 勾选Always Use HTTPS\n配置完后回到GitHub，点击Verify，成功后会如图所示\n我的网站框架为Hugo，在static文件下添加一个文件 CNAME，没有后缀名，内容为你的域名 kyxie.me，然后publish出来push到GitHub就好了\n多语言 如果我们想要使用多语言（中英为例），就需要在 content 文件夹下准备两个文件夹，例如 Chinese 和English，一个放中文，另一个放英文。\n在 config.yml 中需要做以下修改：\ndefaultContentLanguage: en defaultContentLanguageInSubdir: true languages: en: languageName: \u0026#34;English\u0026#34; contentDir: content/English zh: languageName: \u0026#34;中文\u0026#34; contentDir: content/Chinese 搜索功能 分别在中英文的文件夹下创建 search.md（hugo new search.md），修改文件头为\ntitle: \u0026#34;Search\u0026#34; date: ... draft: false layout: search config.yml中添加\nmenu: main: -identifier: Search name: Search url: search weight: ... Hover 主要在 themes/PaperMod/assets/css/common/header.css 中修改。\n左上角Home的hover\n.logo a:hover { transition: 0.15s; color: grey; } 社交媒体hover\nsvg:hover { transition: 0.15s; } .social-icons a:nth-child(1) svg:hover{ color: #C84370 !important; } .social-icons a:nth-child(2) svg:hover { color: grey !important; } ... nth-child可以设置各个图标的hover颜色\n黑夜模式和白天模式的hover\n#moon:hover { transition: 0.15s; color: deepskyblue; } #sun:hover { transition: 0.15s; color: gold; } menu中链接hover\n#menu a:hover { transition: 0.15s; color: grey; } 按钮hover，在themes/PaperMod/assets/css/common/profile-mode.css中修改\n.button:hover { -webkit-transform: scale(1.1); -moz-transform: scale(1.1); -ms-transform: scale(1.1); -o-transform: scale(1.1); /* box-shadow: 0 0 0 1px grey; */ transform: scale(1.1) translateZ(0) translate3d(0, 0, 0) rotate(0.01deg); } 自定义社交媒体图标 利用SVG图标制作网站，比如icons8，找到我们需要的图标，例如微信\n可以利用左侧菜单栏的Stroke调节线条粗细\n点击 download，SVG Embed，自定义图标大小为24*24，然后点击 copy HTML\n在 themes/PaperMod/layouts/partials/svg.html 中粘贴复制的HTML\n需要修改为 fill=currentColor stroke=currentColor，才能适应白天黑夜切换\n微信和微博的图标\n{{- else if (eq $icon_name \u0026#34;wechat\u0026#34;) -}} \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; x=\u0026#34;0px\u0026#34; y=\u0026#34;0px\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 50 50\u0026#34;\u0026gt; \u0026lt;g fill=\u0026#34;currentColor\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M 19 6 C 9.746094 6 2 12.359375 2 20.5 C 2 24.894531 4.292969 28.679688 7.835938 31.324219 L 5.179688 39.304688 L 13.472656 34.167969 C 15.1875 34.707031 17.082031 35 19 35 C 19.746094 35 20.472656 34.945313 21.195313 34.863281 C 23.378906 39.105469 28.328125 42 34 42 C 35.722656 42 37.316406 41.675781 38.796875 41.234375 L 45.644531 45.066406 L 43.734375 38.515625 C 46.3125 36.375 48 33.394531 48 30 C 48 23.789063 42.597656 18.835938 35.75 18.105469 C 34.398438 11.125 27.324219 6 19 6 Z M 19 8 C 26.308594 8 32.328125 12.351563 33.703125 18.011719 C 26.183594 18.148438 20 23.355469 20 30 C 20 31.019531 20.160156 32.003906 20.4375 32.941406 C 19.964844 32.980469 19.484375 33 19 33 C 17.101563 33 15.199219 32.710938 13.632813 32.15625 L 13.183594 32 L 8.820313 34.699219 L 10.1875 30.59375 L 9.5625 30.171875 C 6.082031 27.820313 4 24.445313 4 20.5 C 4 13.640625 10.65625 8 19 8 Z M 13 14 C 11.898438 14 11 14.898438 11 16 C 11 17.101563 11.898438 18 13 18 C 14.101563 18 15 17.101563 15 16 C 15 14.898438 14.101563 14 13 14 Z M 25 14 C 23.898438 14 23 14.898438 23 16 C 23 17.101563 23.898438 18 25 18 C 26.101563 18 27 17.101563 27 16 C 27 14.898438 26.101563 14 25 14 Z M 34 20 C 40.746094 20 46 24.535156 46 30 C 46 32.957031 44.492188 35.550781 42.003906 37.394531 L 41.445313 37.8125 L 42.355469 40.933594 L 39.105469 39.109375 L 38.683594 39.25 C 37.285156 39.71875 35.6875 40 34 40 C 27.253906 40 22 35.464844 22 30 C 22 24.535156 27.253906 20 34 20 Z M 29.5 26 C 28.699219 26 28 26.699219 28 27.5 C 28 28.300781 28.699219 29 29.5 29 C 30.300781 29 31 28.300781 31 27.5 C 31 26.699219 30.300781 26 29.5 26 Z M 38.5 26 C 37.699219 26 37 26.699219 37 27.5 C 37 28.300781 37.699219 29 38.5 29 C 39.300781 29 40 28.300781 40 27.5 C 40 26.699219 39.300781 26 38.5 26 Z\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;/svg\u0026gt; {{- else if (eq $icon_name \u0026#34;weibo\u0026#34;) -}} \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; x=\u0026#34;0px\u0026#34; y=\u0026#34;0px\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 172 172\u0026#34;\u0026gt; \u0026lt;g fill=\u0026#34;currentColor\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;4\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M120.4,20.64c-2.67406,0 -5.25406,0.26875 -7.74,0.71219c-1.86781,0.3225 -3.1175,2.10969 -2.795,3.9775c0.3225,1.88125 2.10969,3.13094 3.9775,2.80844c2.17688,-0.38969 4.35375,-0.61813 6.5575,-0.61813c20.93563,0 37.84,16.90438 37.84,37.84c0,4.52844 -0.83312,8.85531 -2.31125,12.91344c-0.45687,1.16906 -0.25531,2.48594 0.5375,3.45344c0.80625,0.9675 2.05594,1.42437 3.29219,1.19594c1.23625,-0.22844 2.24406,-1.11531 2.63375,-2.29781c1.73344,-4.75687 2.72781,-9.87656 2.72781,-15.265c0,-24.65781 -20.06219,-44.72 -44.72,-44.72zM120.4,41.28c-1.46469,0 -2.84875,0.14781 -4.16562,0.37625c-1.86781,0.33594 -3.13094,2.10969 -2.795,3.99094c0.3225,1.86781 2.10969,3.1175 3.9775,2.795c1.00781,-0.17469 2.00219,-0.28219 2.98312,-0.28219c9.54063,0 17.2,7.65938 17.2,17.2c0,2.05594 -0.37625,4.01781 -1.06156,5.87219c-0.645,1.78719 0.28219,3.7625 2.06938,4.4075c1.78719,0.645 3.7625,-0.26875 4.4075,-2.05594c0.92719,-2.55312 1.46469,-5.32125 1.46469,-8.22375c0,-13.26281 -10.81719,-24.08 -24.08,-24.08zM72.46844,42.6775c-11.04562,0 -27.50656,8.66719 -42.18031,23.07219c-14.76781,14.76781 -23.40813,30.24781 -23.40813,43.57781c0,25.9075 33.12344,41.3875 65.88406,41.3875c42.47594,0 70.90969,-24.46969 70.90969,-43.91375c0,-11.87875 -10.07812,-18.35562 -19.08125,-21.23125c-2.15,-0.72562 -3.60125,-1.08844 -2.52625,-3.96406c0.72563,-1.73344 1.77375,-5.01219 1.77375,-9.36594c0,-4.945 -3.44,-9.23156 -10.32,-9.9975c-0.79281,-0.08062 -2.13656,-0.14781 -3.82969,-0.14781c-5.6975,0 -15.48,0.71219 -22.52125,3.66844c0,0 -1.38406,0.57781 -2.49938,0.57781c-1.00781,0 -1.80062,-0.48375 -1.11531,-2.37844c2.52625,-7.91469 2.16344,-14.39156 -1.80063,-18.00625c-2.23062,-2.23062 -5.42875,-3.27875 -9.28531,-3.27875zM72.46844,49.5575c1.43781,0 3.37281,0.215 4.43438,1.26313l0.1075,0.12094l0.12094,0.1075c1.54531,1.41094 1.51844,5.61687 -0.09406,10.72312c-1.38406,3.99094 -0.09406,6.75906 0.81969,8.04906c1.51844,2.16344 4.00437,3.39969 6.81281,3.39969c2.28438,0 4.39406,-0.79281 5.14656,-1.11531c5.50938,-2.31125 13.88094,-3.13094 19.87406,-3.13094c1.53187,0 2.60687,0.05375 3.07719,0.1075c2.78156,0.30906 4.1925,1.37063 4.1925,3.15781c0,3.23844 -0.77937,5.61688 -1.23625,6.73219l-0.05375,0.1075l-0.04031,0.09406c-1.075,2.88906 -1.06156,5.50938 0.04031,7.80719c1.62594,3.39969 4.82406,4.46125 6.54406,5.03906l0.28219,0.09406c5.34813,1.70656 14.2975,5.88562 14.2975,14.68719c0,7.90125 -6.81281,17.65688 -18.90656,25.16844c4.77031,-5.54969 7.47125,-12.05344 7.47125,-19.05437c0,-21.01625 -24.37562,-37.47719 -55.48344,-37.47719c-31.10781,0 -55.47,16.46094 -55.47,37.47719c0,0.645 0.01344,1.27656 0.05375,1.90812c-0.45687,-1.76031 -0.69875,-3.60125 -0.69875,-5.49594c0,-11.16656 7.59219,-24.91312 21.33875,-38.65969c14.86188,-14.59313 29.48188,-21.11031 37.36969,-21.11031zM69.875,82.33156c26.84813,0 48.60344,13.69281 48.60344,30.59719c0,16.89094 -21.75531,30.58375 -48.60344,30.58375c-26.83469,0 -48.59,-13.69281 -48.59,-30.58375c0,-16.90437 21.75531,-30.59719 48.59,-30.59719zM66.27375,89.52063c-10.38719,0.08062 -20.47875,5.76469 -24.85937,14.52594c-5.40188,11.13969 -0.36281,23.38125 12.59094,27.33187c12.95375,4.31344 28.42031,-2.16344 33.82219,-14.02875c5.38844,-11.5025 -1.43781,-23.73062 -14.39156,-26.95562c-2.365,-0.61813 -4.77031,-0.88688 -7.16219,-0.87344zM71.63531,104.06c1.98875,0 3.60125,1.59906 3.60125,3.58781c0,1.98875 -1.6125,3.60125 -3.60125,3.60125c-1.98875,0 -3.60125,-1.6125 -3.60125,-3.60125c0,-1.98875 1.6125,-3.58781 3.60125,-3.58781zM56.47781,107.64781c1.12875,0.01344 2.2575,0.18812 3.31906,0.55094c4.60906,1.46469 6.02,5.83188 3.18469,9.47344c-2.4725,3.64156 -8.12969,5.45563 -12.38938,3.64156c-4.23281,-1.81406 -5.29437,-6.19469 -2.82187,-9.46c1.85437,-2.74125 5.30781,-4.24625 8.7075,-4.20594z\u0026#34;\u0026gt; \u0026lt;/path\u0026gt; \u0026lt;/g\u0026gt; \u0026lt;path d=\u0026#34;\u0026#34; fill=\u0026#34;none\u0026#34;\u0026gt;\u0026lt;/path\u0026gt; \u0026lt;/svg\u0026gt; 目录栏目放侧边 详见：GitHub - xyming108/sulv-hugo-papermod。\nMarkdown渲染风格 详见：折腾 Hugo \u0026amp; PaperMod 主题 - Dvel\u0026rsquo;s Blog\n流量统计 我使用了Umami，详见：Debian使用Docker部署Umami | Kunyang\u0026rsquo;s Blog\n插入B站，YouTube视频或PPT 详见：GitHub - xyming108/sulv-hugo-papermod\n插入音乐播放器 详见：Hugo插入音乐播放器\n隐藏歌词：lrc-type=0\n修改全局字体 首先找到喜欢的字体，然后可以在Google Fonts中查询字体，我目前的文章字体为CodeNewRoman。Google Fonts会生成HTML和css，将HTML插入到themes/PaperMod/layouts/partials/extend_head.html中，将CSS插入到themes/PaperMod/assets/css/extended/blank.css。\nbody { font-family: \u0026#39;Code New Roman\u0026#39;, sans-serif; font-size: 1rem; line-height: 1.5; margin: 0; } 修改代码字体 与全局字体类似，区别为CSS代码插入的位置不同。\n.post-content pre, code { font-family: \u0026#39;Code New Roman\u0026#39;, sans-serif; max-height: 40rem; } 评论功能 详见：GitHub - xyming108/sulv-hugo-papermod\nGmail邮箱配置 登录Google Account，进入Security / Signing in to Google / 2-Step Verification / App passwords。点击Generate，并记住这个16位的密码\n在Twikoo中进行配置：\nSENDER_EMAIL：你的gmail邮箱\nSENDER_NAME：发件人名，我写的是Notification from Kunyang\u0026rsquo;s Blog\nSMTP_SERVICE：Gmail\nSMTP_HOST：smtp.gmail.com\nSMTP_PORT：587\nSMTP_SECURE：true\nSMTP_USER：你的gmail邮箱\nSMTP_PASS：16位的应用密码\nSMTP_SUBJECT：邮件主题，我写的是You have received a response from Kunyang\u0026rsquo;s Blog\nMAIL_TEMPLATE：邮件模板，我的是\n\u0026lt;div style=\u0026#34;border-top:2px solid #12ADDB;box-shadow:0 1px 3px #AAAAAA;line-height:180%;padding:0 15px 12px;margin:50px auto;font-size:12px;\u0026#34;\u0026gt; \u0026lt;h2 style=\u0026#34;border-bottom:1px solid #dddddd;font-size:14px;font-weight:normal;padding:13px 0 10px 8px;\u0026#34;\u0026gt; You have received a new response from \u0026lt;a style=\u0026#34;text-decoration:none;color:#12ADDB;\u0026#34; href=\u0026#34;https://kyxie.github.io/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Kunyang\u0026#39;s Blog\u0026lt;/a\u0026gt; \u0026lt;/h2\u0026gt; ${PARENT_NICK} Your comment: \u0026lt;div style=\u0026#34;padding:0 12px 0 12px;margin-top:18px\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;background-color:#f5f5f5;padding:10px 15px;margin:18px 0;word-wrap:break-word;\u0026#34;\u0026gt; ${PARENT_COMMENT} \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; \u0026lt;strong\u0026gt;${NICK}\u0026lt;/strong\u0026gt; says: \u0026lt;/p\u0026gt; \u0026lt;div style=\u0026#34;background-color:#f5f5f5;padding:10px 15px;margin:18px 0;word-wrap:break-word;\u0026#34;\u0026gt; ${COMMENT} \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt; Click \u0026lt;a style=\u0026#34;text-decoration:none;color:#12ADDB;\u0026#34; href=\u0026#34;${POST_URL}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;to view the reply\u0026lt;/a\u0026gt;, welcome to \u0026lt;a style=\u0026#34;text-decoration:none;color:#12ADDB;\u0026#34; href=\u0026#34;${SITE_URL}\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;${SITE_NAME}\u0026lt;/a\u0026gt;。\u0026lt;br\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 配置完成后评论消息就会有gmail邮箱发送的邮件提醒了，outlook邮箱配置见：关于邮箱配置的问题？ · twikoojs/twikoo · Discussion #249 (github.com)。\n自定义邮箱回复模板 详见：自定义Twikoo邮件通知模板 | Guo Le\u0026rsquo;s Blog\n代码高亮 在两个地方修改\n一个是themes/PaperMod/assets/css/common/post-single.css：\n.post-content pre code { display: block; margin: auto 0; padding: 10px; /* 主要代码颜色 */ color: #abb2bf; font-weight: 200; overflow-x: auto; word-break: break-all; } 另一个是在themes/PaperMod/assets/css/hljs/an-old-hope.min.css，这是我自己修改的：\n/* 注释 */ .hljs-comment, .hljs-quote { font-weight: 200; color: #7f848e; } .hljs-deletion, /* html标签 */ .hljs-name, .hljs-regexp, .hljs-tag { font-weight: 200; color: #e06c75; } /* html属性 */ .hljs-tag { font-weight: 200; color: #d19a66; } /* css类名 */ .hljs-template-variable, .hljs-variable, .hljs-selector-class, .hljs-selector-id { font-weight: 200; color: #a9b600; } /* 内置函数 */ .hljs-built_in, .hljs-builtin-name { font-weight: 200; color: #56b6c2; } /* 函数输入 */ .hljs-params { font-weight: 200; color: #e5c07b; } /* 数字 */ .hljs-number { font-weight: 200; color: #d19a66; } /* css属性 */ .hljs-attribute { font-weight: 200; color: #ee7c2b; } /* 字符串 */ .hljs-addition, .hljs-bullet, .hljs-symbol, .hljs-string { font-weight: 200; color: #98c379; } /* 函数名称 */ .hljs-section, .hljs-title { font-weight: 200; color: #56b6c2; } /* 关键字 */ .hljs-keyword, .hljs-selector-tag, .hljs-literal, .hljs-link, .hljs-meta, .hljs-type { font-weight: 200; color: #c678dd; } .hljs { display: block; overflow-x: auto; background: #1c1d21; color: #c0c5ce; padding: 0.5em; } .hljs-emphasis { font-style: italic; } .hljs-strong { font-weight: 700; } /* 选中时的背景颜色 */ .hljs ::selection, .hljs::selection { background-color: #3d4556; } 代码边框圆角 themes/PaperMod/assets/css/common/post-single.css中修改：\n.post-content .highlight pre { background-color: var(--theme) !important; margin: 0; } 添加友链 详见：GitHub - xyming108/sulv-hugo-papermod\n图床 之前一直在使用Imgur的图床，但是国内的小伙伴说即使挂了梯子也看不到图片，现在有了域名打算利用Cloudflare自己做一个图床\n首先下载PicGo，Windows用户可以在GitHub下载.exe文件，Mac用户则建议使用Homebrew下载，命令为\nbrew install picgo --cask 下载完之后在LaunchPad出现了PicGo的图标，但是假如显示损坏让你移动到垃圾桶，这时只需要在终端输入\nsudo xattr -r -d com.apple.quarantine /Applications/PicGo.app 就可以解决问题了，安装完之后出现在顶部状态栏（Windows在右下角）\n然后回到Cloudflare，创建一个R2 bucket，我就叫img，将地址选在美国西部（这是因为后面的CDN也在美西）\n然后回到R2 Overview -\u0026gt; 右上角Manage R2 API Tokens，取个名字，然后选择Object Read and Write，可以选择只应用于特定的Bucket，也可以不选\n然后会生成一堆信息，有Token value，Access Key ID，Secret Access Key和jurisdiction-specific endpoints，这个页面只显示一遍，建议拿个小本本记好\n再来到 img 桶 -\u0026gt; Setting，里面有个 R2.dev subdomain 选择为Allow\n然后需要绑定一个域名，注意这里不能再使用 kyxie.me 了，但是可以设置一个子域名，比如img.kyxie.me，cloudflare会自动在DNS中添加一个Record\n回到PicGo，插件设置里搜索S3，然后安装S3插件，注意这里需要下载Node.js环境\n然后在图床设置中打开Amazon S3，然后配置信息，如图所示\n下面还有个自定义域名可以暂时填写 img.kyxie.me，为了让国内小伙伴也能打开图片，我使用WebP Cloud Services将图像缓存，这样会打开更快\n注册用户后点击Create Proxy -\u0026gt; 选择美国Hillsboro, OR -\u0026gt; Proxy Origin Url就是 http://img.kyxie.me，选择确定之后系统会生成一个url类似于 http://xxx.webp.li，再把这个url粘贴到PicGo的自定义域名，配置好之后如图所示\n这样我们的图床就搭建好了，PicGo也可以使用了，经过测试国内的小伙伴也都能打开图片了\n如果想添加水印，详细见这里\n","permalink":"https://kyxie.me/zh/blog/tech/web/papermod/","summary":"安装过程 首先需要安装Hugo，安装Hugo需要利用一个包管理工具，对于Windows系统Hugo可以直接用Winget来安装，打开终端输入 winget","title":"Hugo + PaperMod搭建技术博客"},{"content":"翻GitHub找到了statistics-for-strava这个仓库，看着更新还挺频繁的，文档也非常完善，于是打算自己部署一下。\n部署 首先要去Strava的API页面新创建一个APP，Authorization Callback Domain要填写自己将来部署的网站，我的是strava.kyxie.me。创建APP成功后就会得到Client ID，Client Secret，Access Token和Refresh Token\n创建docker-compose.yml，根据自己的情况修改，我接入了cloudflared网络部署在了公网，宿主机使用8000端口\nservices: app: image: robiningelbrecht/strava-statistics:latest container_name: strava restart: unless-stopped volumes: - ./config:/var/www/config/app - ./build:/var/www/build - ./storage/database:/var/www/storage/database - ./storage/files:/var/www/storage/files env_file: ./.env ports: - 8000:8080 networks: - cloudflared networks: cloudflared: external: true 创建.env，目前STRAVA_REFRESH_TOKEN可以先不填，因为容器启动后才会使用到\n# The client id of your Strava app. STRAVA_CLIENT_ID=YOUR_CLIENT_ID # The client secret of your Strava app. STRAVA_CLIENT_SECRET=YOUR_CLIENT_SECRET # You will need to obtain this token the first time you launch the app. # Leave this unchanged for now until the app tells you otherwise. # Do not use the refresh token displayed on your Strava API settings page, it will not work. STRAVA_REFRESH_TOKEN=YOUR_REFRESH_TOKEN_OBTAINED_AFTER_AUTH_FLOW # Valid timezones can found under TZ Identifier column here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List TZ=America/Toronto # The UID and GID to create/own files managed by statistics-for-strava PUID=1000 PGID=1000 在反向代理添加域名，statistics-for-strava自动监听8080端口，我把容器名改为了strava\nSubdomain: strava Domain: your_domain Type: HTTP URL: strava:8080 此时可以看到创建了一个文件夹config，进入文件夹后创建config.yaml文件，注意一定是config.yaml，不是config.yml\ngeneral: # The URL on which the app will be hosted. This URL will be used in the manifest file. # This will allow you to install the web app as a native app on your device. appUrl: \u0026#39;http://localhost:8080/\u0026#39; # Optional subtitle to display in the navbar. # Useful for distinguishing between multiple instances of the app. # Leave empty to disable. appSubTitle: null # Optional, a link to your profile picture. Will be used to display in the nav bar and link to your Strava profile. # Any image can be used; a square format is recommended. # Leave empty to disable this feature. profilePictureUrl: null # Optional, full URL with ntfy topic included. This topic will be used to notify you when a new HTML build has run. # Leave empty to disable notifications. ntfyUrl: null athlete: # Your birthday. Needed to calculate heart rate zones. birthday: \u0026#39;YYYY-MM-DD\u0026#39; # The formula used to calculate your max heart rate. The default is Fox (220 - age). # Allowed values: arena, astrand, fox, gellish, nes, tanaka (https://pmc.ncbi.nlm.nih.gov/articles/PMC7523886/table/t2-ijes-13-7-1242/) # Or you can set a fixed number for any given date range. maxHeartRateFormula: \u0026#39;fox\u0026#39; # If you\u0026#39;re not sure about your zones, leave this unchanged — the defaults are sensible. heartRateZones: # Relative or absolute. # Relative will treat the zone numbers as percentages based on your max heart rate, while absolute will treat them as actual heartbeats per minute. # This mode will apply to all heart rate zones you define. mode: relative # The default zones for all activities. default: zone1: from: 50 to: 60 zone2: from: 61 to: 70 zone3: from: 71 to: 80 zone4: from: 81 to: 90 zone5: from: 91 to: null # Infinity and beyond. # 🔥 PRO tip: You can further refine your heart rate zones by specifying date ranges and sport types. # Read more about the possibilities on https://statistics-for-strava-docs.robiningelbrecht.be/#/configuration/main-configuration?id=athlete-heart-rate-zones # maxHeartRateFormula: # \u0026#34;2020-01-01\u0026#34;: 198 # \u0026#34;2025-01-10\u0026#34;: 193 # History of weight (in kg or pounds, depending on appearance.unitSystem). Needed to calculate relative w/kg. # Make sure to replace the YYYY-MM-DD examples with your own weight history. # Read more about the weight history on https://statistics-for-strava-docs.robiningelbrecht.be/#/configuration/main-configuration?id=athlete-weight-history weightHistory: \u0026#34;YYYY-MM-DD\u0026#34;: 100 # Optional, history of FTP. Needed to calculate activity stress level. # ftpHistory # \u0026#34;2024-10-03\u0026#34;: 198 # \u0026#34;2025-01-10\u0026#34;: 220 # ftpHistory: [] appearance: # Allowed options: en_US, fr_FR, it_IT, nl_BE, de_DE, pt_BR, pt_PT or zh_CN locale: \u0026#39;en_US\u0026#39; # Allowed options: metric or imperial unitSystem: \u0026#39;metric\u0026#39; # Time format to use when rendering the app # Allowed formats: 24 or 12 (includes AM and PM) timeFormat: 24 # Date format to use when rendering the app # For valid PHP date formats: https://www.php.net/manual/en/datetime.format.php # If you don\u0026#39;t know how to use these formats, leave this unchanged — the defaults are sensible. dateFormat: short: \u0026#39;d-m-y\u0026#39; # This renders to 01-01-25 normal: \u0026#39;d-m-Y\u0026#39; # This renders to 01-01-2025 import: # Strava API has rate limits (https://statistics-for-strava-docs.robiningelbrecht.be/#/troubleshooting/faq?id=why-does-it-take-so-long-to-import-my-data), # to make sure we don\u0026#39;t hit the rate limit, we want to cap the number of new activities processed # per import. Considering there\u0026#39;s a 1000 request per day limit and importing one new activity can # take up to 3 API calls, 250 should be a safe number. numberOfNewActivitiesToProcessPerImport: 250 # Sport types to import. Leave empty to import all sport types # With this list you can also decide the order the sport types will be rendered in. # A full list of allowed options is available on https://statistics-for-strava-docs.robiningelbrecht.be/#/configuration/main-configuration?id=supported-sport-types sportTypesToImport: [] # Activity visibilities to import. Leave empty to import all visibilities # This list can be combined with sportTypesToImport. # Allowed values: [\u0026#34;everyone\u0026#34;, \u0026#34;followers_only\u0026#34;, \u0026#34;only_me\u0026#34;] activityVisibilitiesToImport: [] # Optional, the date (YYYY-MM-DD) from which you want to start importing activities. # Any activity recorded before this date, will not be imported. # This can be used if you want to skip the import of older activities. Leave empty to disable. skipActivitiesRecordedBefore: null # An array of activity ids to skip during import. # This allows you to skip specific activities during import. # [\u0026#34;123456789\u0026#34;, \u0026#34;987654321\u0026#34;] activitiesToSkipDuringImport: [] metrics: # By default, the app calculates your Eddington score for Rides, Runs, and Walks. # Each category includes a list of sport types used in the calculation. # This setting lets you customize which sport types are grouped together and how the Eddington score is calculated. # If you\u0026#39;re not familiar with the Eddington score, it\u0026#39;s best to leave this as is for now and explore it once the app is running. # 🔥 PRO tip: it\u0026#39;s possible to use the same sport type over multiple eddington numbers. eddington: # The label to be used for the tabs on the Eddington page. - label: \u0026#39;Ride\u0026#39; # A boolean to indicate if this score should be displayed in the side navigation. # You can only enable two of these at the same time. showInNavBar: true # The sport types to include in the Eddington score for this tab. # Only sport types that belong to the same activity type (category) can be combined. # For a complete list of supported sport and activity types, visit: https://statistics-for-strava-docs.robiningelbrecht.be/#/configuration/main-configuration?id=supported-sport-types sportTypesToInclude: [\u0026#39;Ride\u0026#39;, \u0026#39;MountainBikeRide\u0026#39;, \u0026#39;GravelRide\u0026#39;, \u0026#39;VirtualRide\u0026#39;] - label: \u0026#39;Run\u0026#39; showInNavBar: true sportTypesToInclude: [\u0026#39;Run\u0026#39;, \u0026#39;TrailRun\u0026#39;, \u0026#39;VirtualRun\u0026#39;] - label: \u0026#39;Walk\u0026#39; showInNavBar: false sportTypesToInclude: [\u0026#39;Walk\u0026#39;, \u0026#39;Hike\u0026#39;] zwift: # Optional, your Zwift level (1 - 100). Will be used to render your Zwift badge. Leave empty to disable this feature level: null # Optional, your Zwift racing score (0 - 1000). Will be used to add to your Zwift badge if zwift.level is filled out. racingScore: null 启动容器\ndocker compose up -d 就得到了文档里说的要求你更新Refresh Token，登录成功后会告诉你你的refresh token，然后粘贴在.env中。如果返回了Bad Request，说明在创建APP的时候Callback Domain填错了\n之后再回到项目部署的域名，会让你导入数据，运行\ndocker compose exec app bin/console app:strava:import-data 由于Strava Rate Limit有限制，15min里最多Call 100个API，且一天做多2000 Call个API，且上传一条activity应该需要消耗3个API，因此这条命令是压着速度运行的。建议：\n使用screen，防止一不小心中断丢失console 最开始在config.yaml中设置numberOfNewActivitiesToProcessPerImport为250，等上传完第一轮后，假设还有activities没上传完，隔天再设置为500，这样系统会从断点继续上传，等初始的activities全部上传完之后再重新调回250 上传完之后构建Web页面\ndocker compose exec app bin/console app:strava:build-files 重启容器\ndocker compose down docker compose up -d 图表很漂亮，而且包含了很多Strava会员才有的功能\n同步 上述操作步骤可以允许我们在内网和外网同时查看，如果希望每次骑完车都可以自动上传，上传后本地自动拉取，可以使用宿主机的crontab，官网文档有教程：Statistics for Strava | Scheduling\n也可以使用Strava的Webhook，我自己写了个小工具：GitHub - Kyxie/strava-webhook，本地起一个服务，Strava向本地发送请求的时候转发给同网络的Strava容器，监督它自动更新。\n首先修改.env，添加一些字段\n# The client id of your Strava app. STRAVA_CLIENT_ID=YOUR_CLIENT_ID # The client secret of your Strava app. STRAVA_CLIENT_SECRET=YOUR_CLIENT_SECRET # You will need to obtain this token the first time you launch the app. # Leave this unchanged for now until the app tells you otherwise. # Do not use the refresh token displayed on your Strava API settings page, it will not work. STRAVA_REFRESH_TOKEN=YOUR_REFRESH_TOKEN_OBTAINED_AFTER_AUTH_FLOW # Valid timezones can found under TZ Identifier column here: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List TZ=America/Toronto # The UID and GID to create/own files managed by statistics-for-strava PUID=1000 PGID=1000 # Webhook STRAVA_VERIFY_TOKEN=YOUR_VERIFY_TOKEN STRAVA_CALLBACK_URL=YOUR_STRAVA_CALLBACK_URL 生成一个verify token，把这个token保存到.env中\nopenssl rand -hex 16 这个STRAVA_CALLBACK_URL是要部署的url + /webhook，假设我项目部署在https://strava.kyxie.me，这里我就填https://strava.kyxie.me/webhook\n修改docker-compose.yml，把webhook服务添加进来\nservices: app: image: robiningelbrecht/strava-statistics:latest container_name: strava restart: unless-stopped volumes: - ./config:/var/www/config/app - ./build:/var/www/build - ./storage/database:/var/www/storage/database - ./storage/files:/var/www/storage/files env_file: ./.env ports: - 8000:8080 networks: - cloudflared # 新添加 webhook: image: kyxie/strava-webhook:latest container_name: strava-webhook restart: unless-stopped env_file: ./.env volumes: - /var/run/docker.sock:/var/run/docker.sock ports: - 8001:8001 networks: - cloudflared networks: cloudflared: external: true 需要把Cloudflare的Bot Fight Mode给关掉，位于Cloudflare → Security → Bots → Bot Fight Mode，关掉之后建议再加上一些WAF的防护措施\n这个小工具还可以管理Strava Webhook的注册情况，在miniPC上运行下面代码就是注册Webhook\ncurl -X POST http://localhost:8001/subscription/register 同样地，取消订阅Webhook\ncurl -X POST http://localhost:8001/subscription/unregister 查看状态\ncurl http://localhost:8001/subscription/status 由于必须要暴露/webhook接口，最好再在Cloudflare WAF上加点限流保护\n部署好之后有了新的Activities就可以自动更新了\n隐私 然而这样直接部署到公网我觉得太暴露隐私了，所有人都能看到你所有的运动记录，代码作者似乎觉得这个系统只能一个人用，因此并没有做登录系统。\n我是希望继续部署在公网的，因为我需要使用Strava的Webhook做到自动更新，而且有一些Badge图片（都在localhost/files的url目录下）设计的挺精美，我觉得将来万一想要嵌在哪篇博客文章里。于是我又部署了一个nginx，cloudflare接入nginx，nginx控制strava容器的可见范围，只允许/files目录下的\n创建nginx文件夹，创建docker-compose.yml\nmkdir nginx cd nginx touch docker-compose.yml 编辑docker-compose.yml，让nginx也接入cloudflared网络，宿主机使用8080端口\nservices: nginx: image: nginx:alpine container_name: nginx restart: unless-stopped ports: - \u0026#34;8080:80\u0026#34; volumes: - ./conf.d:/etc/nginx/conf.d:ro networks: - cloudflared networks: cloudflared: external: true 创建文件夹conf.d，进入文件夹然后创建strava.conf\nmkdir -p conf.d cd conf.d touch strava.conf 编辑strava.conf，由于都在同一个Docker网络下，只需要写容器名即可，且应该使用容器内的端口号，我们暴露图片和webhook的路径\nserver { listen 80; server_name strava.kyxie.me; location = /files/strava-badge.svg { proxy_pass http://strava:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } location = /files/rides-this-week.svg { proxy_pass http://strava:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } location = /files/monthly-distance.svg { proxy_pass http://strava:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } location = /webhook { proxy_pass http://strava-webhook:8001; proxy_http_version 1.1; proxy_set_header Connection \u0026#34;\u0026#34;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location /files/ { return 403; } location / { return 403; } } 去cloudflared上修改\nSubdomain: strava Domain: your_domain Type: HTTP URL: nginx:80 这样就可以既能公网访问图片，就禁止别人看我的所有训练活动了，如果自己想看的话可以回到内网看\n小工具 添加体重 写了个脚本使用命令行添加体重，如果不指定日期就是默认为今天\n#!/bin/bash # 使用方法: sudo ./add-weight.sh 82 [2025-07-02] # 如果不指定日期，则默认使用今天 set -e # 参数 WEIGHT=\u0026#34;$1\u0026#34; DATE=\u0026#34;${2:-$(date +%F)}\u0026#34; # 空值检查 if [ -z \u0026#34;$WEIGHT\u0026#34; ]; then echo \u0026#34;错误：必须提供体重数值\u0026#34; echo \u0026#34;用法: ./add-weight.sh \u0026lt;体重\u0026gt; [日期，如 2025-07-02]\u0026#34; exit 1 fi # YAML 路径 CONFIG_FILE=\u0026#34;config/config.yaml\u0026#34; # 插入体重记录 awk -v date=\u0026#34;$DATE\u0026#34; -v weight=\u0026#34;$WEIGHT\u0026#34; \u0026#39; BEGIN { inserted = 0 } { print $0 if ($0 ~ /^ *weightHistory:/ \u0026amp;\u0026amp; inserted == 0) { inserted = 1 print \u0026#34; \\\u0026#34;\u0026#34; date \u0026#34;\\\u0026#34;: \u0026#34; weight } } \u0026#39; \u0026#34;$CONFIG_FILE\u0026#34; \u0026gt; tmp.yaml \u0026amp;\u0026amp; mv tmp.yaml \u0026#34;$CONFIG_FILE\u0026#34; echo \u0026#34;已插入体重记录 $DATE: $WEIGHT kg\u0026#34; 更新权限\nchmod +x add-weight.sh ","permalink":"https://kyxie.me/zh/blog/bike/strava/","summary":"翻GitHub找到了statistics-for-strava这个仓库，看着更新还挺频繁的，文档也非常完善，于是打算自己部署一下。 部署 首先要","title":"使用Docker部署Strava数据分析面板"},{"content":"Umami是个个人网站站点数据分析的工具，支持自己部署，使用他们的服务器好像最多可以跟踪三个站点。我还试过使用Plausible，但是对我而言有一点重，使用之后System Load增加了许多。\n部署 创建docker-compose.yml，根据自己的情况修改，这里我接入了cloudflared的网络，就可以实现公网访问了。\nservices: umami: container_name: umami image: ghcr.io/umami-software/umami:postgresql-latest # ports: # - \u0026#34;3000:3000\u0026#34; environment: DATABASE_URL: postgresql://umami:umami@db:5432/umami DATABASE_TYPE: postgresql APP_SECRET: your_secret depends_on: db: condition: service_healthy init: true restart: unless-stopped healthcheck: test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;curl http://localhost:3000/api/heartbeat\u0026#34;] interval: 5s timeout: 5s retries: 5 networks: - cloudflared db: container_name: umami-db image: postgres:15-alpine environment: POSTGRES_DB: umami POSTGRES_USER: umami POSTGRES_PASSWORD: umami volumes: - ./data:/var/lib/postgresql/data restart: unless-stopped healthcheck: test: [\u0026#34;CMD-SHELL\u0026#34;, \u0026#34;pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}\u0026#34;] interval: 5s timeout: 5s retries: 5 networks: - cloudflared networks: cloudflared: external: true 可以使用OpenSSL生成secret\nopenssl rand -base64 32 启动容器\ndocker compose up -d 在反向代理添加域名，umami自动监听3000端口\nSubdomain: data Domain: your_domain Type: HTTP URL: umami:3000 默认用户名为admin，默认密码为umami，可以直接用Web页面修改用户名密码\n添加网站后，在Setting → Tracking Code可以得到跟踪代码，我使用的个人网站主题为Hugo，将跟踪代码粘贴到layouts/partials/head.html\n最终效果还是很好看的，只是可惜之前的数据就没有记录了，可以在这里预览：Umami\n嵌入到博客前端 实现这个需要使用一个三段式的Proxy，前端脚本嵌入代码script.js，代码访问umami-api的接口，接口服务使用umami的token调用umami，得到数据后返回前端，前端可以根据初始值然后显示出来。我自己写了个小服务：GitHub - Kyxie/umami-api。\n在Umami中创建一个Team，将博客转移到Team中\n创建一个权限比较低的新用户，比如view only，把这个新用户加入到新创建的Team，我们最好不要直接使用高权限用户，因为万一token泄露很危险\n使用PostWoman或curl发送请求，username使用新用户的用户名和密码\ncurl -X POST https://umami_url/api/auth/login \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;username\u0026#34;, \u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; 响应体中我们能得到一个token\n在Cloudflared中新建一个hostname，我们需要让umami-api支持公网访问\nSubdomain: umami-api domain: your_domain type: HTTP URL: umami-api:3001 创建一个.env\nUMAMI_URL=[your_umami_url] UMAMI_TOKEN=[your_token] UMAMI_WEBSITE_ID=[your_website_id] CORS_ALLOW_ORIGIN=[your_blog_url] UMAMI_URL是Umami的URL，由于API和Umami在一个容器网络，可以填容器名称（http://umami:3000） UMAMI_TOKEN是刚才生成的token UMAMI_WEBSITE_ID是Umami中网站的id CORS_ALLOW_ORIGIN是允许访问服务的url（比如要嵌入的博客），可以不止一个，中间用逗号隔开 创建docker-compose.yml\numami-api: image: kyxie/umami-api:latest container_name: umami-api # ports: # - \u0026#34;3001:3001\u0026#34; env_file: .env restart: unless-stopped networks: - cloudflared 直接把这一段放到umami的stack中，加入cloudflared容器网络\n启动容器\ndocker compose up -d ","permalink":"https://kyxie.me/zh/blog/tech/web/umami/","summary":"Umami是个个人网站站点数据分析的工具，支持自己部署，使用他们的服务器好像最多可以跟踪三个站点。我还试过使用Plausible，但是对我而","title":"使用Docker部署Umami"},{"content":"我们在浏览器地址栏输入localhost + 端口 就可以在本机测试自己做的网站，但是如果想把服务暴露在公网，让别人访问url就能访问，则需要更多的配置。常见的方法有两个，Nginx和使用内网穿透。\n先说一下结论，Nginx比较适合部署在云服务器，而在自己家里的小服务器部署的服务更适合用内网穿透。一般云服务器都有公网IP且443端口是开放的，配置好之后我们就可以直接输入域名访问了。假设你的服务在家里，家里网络的HTTP 80和HTTPS 443端口一般是被运营商屏蔽了的，目的基本上除了安全就是防止用户因为商业用途私自搭建网站。\n解决的办法就是不用443端口了，使用一个别的端口然后Nginx再转发到443端口，那么访问服务的时候就得加上新的端口，比如yourdomain.com:4433，但是我个人感觉不是很优雅。第二个办法就是使用内网穿透，常见的解决方案有Cloudflared。\nNginx 使用80/443端口 首先创建一个新的文件夹，假设就放在~下，那么目录结构为\n~ ├── nginx │ └── docker-compose.yml └── service1 │ ├── docker-compose.yml │ └── volume └── service2 ├── docker-compose.yml └── volume 编辑Nginx的docker-compose.yml，这里我们使用了Let's Encrypt去自动签发HTTPS证书。\nservices: nginx-proxy: image: jwilder/nginx-proxy container_name: nginx-proxy restart: unless-stopped ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; volumes: - /var/run/docker.sock:/tmp/docker.sock:ro - ./certs:/etc/nginx/certs:ro - ./vhost.d:/etc/nginx/vhost.d - ./html:/usr/share/nginx/html - ./conf.d:/etc/nginx/conf.d networks: - nginx letsencrypt: image: jrcs/letsencrypt-nginx-proxy-companion container_name: nginx-letsencrypt restart: unless-stopped environment: - NGINX_PROXY_CONTAINER=nginx-proxy volumes: - /var/run/docker.sock:/var/run/docker.sock:ro - ./certs:/etc/nginx/certs - ./vhost.d:/etc/nginx/vhost.d - ./html:/usr/share/nginx/html depends_on: - nginx-proxy networks: - nginx networks: nginx: external: true 创建一个docker网络，名叫nginx\ndocker network create nginx 启动容器\ndocker compose up -d 这样Nginx和Let\u0026rsquo;s Encrypt就启动好了，后面当我们暴露服务（这篇文章讲述了我使用这个Nginx来配置Vaultwarden服务）的时候，就可以直接使用Nginx做反向代理了。\n使用其他端口 只需要将ports改成其他的端口，比如\nports: - \u0026#34;8080:80\u0026#34; - \u0026#34;8443:443\u0026#34; 注意事项：Let\u0026rsquo;s Encrypt仍然需要80端口用于更新证书，而且这个是无法修改的，所以如果这两个端口被封掉，可以进行访问，但是只能手动更新证书了。\nCloudflared Cloudflared是Cloudflared推出的内网穿透客户端，基本原理就是本地安装一个客户端，能和Cloudflare的服务器通信，这样就形成了一条隧道，当用户访问我们站点的时候，Cloudflare先接收，然后再把请求转发给miniPC，从而实现公网访问。\n使用这种方法我们甚至不需要公网IP，也不用开端口，Cloudflare能帮你做一些基本的防护。但是缺点是访问会受到Cloudflare的限制，国内访问可能会比较慢，以及需要一个域名。\nCloudflare配置 我们要去Cloudflare官网获取凭证，在Cloudflare开启Zero Trust，选择免费版即可\nNetwork → Tunnels → Add a tunnel\nTunnel Type选择Cloudflared\n跟着配置一步一步走，在Install一栏我们选择Docker，可以看到后面的Token，需要保管好这个token\n然后是添加Public Hostname，这个hostname就是你要暴露服务的hostname，假设我在miniPC上启动一个AList服务，AList使用的端口为5244，你希望访问alist.example.com就访问到这个服务，就应该这么填写\nSubdomain: alist Domain: example.com Type: HTTP URL: localhost:5244 但是如果你是Docker部署的（建议），那么可以要这么配置，意思是去访问Docker容器的端口（假设容器名叫alist）\nSubdomain: alist Domain: example.com Type: HTTP URL: alist:5244 这样云端就算是完成了，我们来配置miniPC端\nMiniPC 创建一个新的文件夹，就叫cloudflared，可以和其他的服务并列\n~ ├── cloudflared │ └── docker-compose.yml └── service1 │ ├── docker-compose.yml │ └── volume └── service2 ├── docker-compose.yml └── volume 创建docker-compose.yml，token就填写刚才的token，这样我们甚至不用挂载本地卷\nservices: cloudflared: image: cloudflare/cloudflared:latest container_name: cloudflared restart: unless-stopped command: tunnel --no-autoupdate run --token [YOUR TOKEN] networks: - cloudflared networks: cloudflared: external: true 创建docker网络就叫cloudflared\ndocker network create cloudflared 这样就算是配置完了，我们后面如果需要添加服务就新建一个域名到cloudflared即可\n其他方法 还有些协议就就不一一尝试了，原理基本上都和上面两个相同：\nCaddy：方向代理 Traefik：反向代理 FRP：内网穿透，分为FRPC和FRPS，在VPS上部署FRPS，miniPC或者软路由部署FRPC ZeroTire：内网穿透 Wireguard：非常轻量的VPN，可以先使用VPN连接自己家的内网，然后再访问 Tailscale：基于Wireguard的VPN ","permalink":"https://kyxie.me/zh/blog/tech/server/debian/public/","summary":"我们在浏览器地址栏输入localhost + 端口 就可以在本机测试自己做的网站，但是如果想把服务暴露在公网，让别人访问url就能访问，则需要更多","title":"将自己的服务暴露公网"},{"content":"上一篇文章讲述了Windows下载安装Minecraft终端，这样我们就可以在自己的电脑上玩我的世界了，但是如何和朋友一起玩呢，主要有三种方法\n局域网：类似的场景就是高中微机课大家一起联机打cs，所有设备连接同一个Wi-Fi就是在同一个局域网之下，小伙伴的电脑开了个Minecraft房间，就是在路由器内广播，这样假如我的电脑连了同一台路由器，就可以搜索到小伙伴的广播加入游戏。这样的缺点也是很明显的，必须要在同一个子网内，我和小伙伴必须要住在一起\nVPN：既然不住在一起，让小伙伴加入我的子网就可以了，假设我在我家Wireguard开一个VPN，让小伙伴连入我家的VPN，同样就是加入了子网可以联机玩了\n使用别人的服务器：上述做法有一个缺点就是小伙伴如果想加入我的房间，我必须要在线，不然他搜索不到我的房间。使用服务器就可以解决这个问题，因为服务器是24h不间断运行的。我之前好像使用过游侠的服务器，但是现在买了MiniPC之后可以自己搭建服务器了\n这篇文章讲一下在个人服务器中搭建Minecraft服务器，我们可以直接在服务器中安装环境，但是我是比较倾向于使用Docker安装所有程序的，便于程序之间的隔离以及管理。\n需要准备 一台miniPC，或者旧电脑，搭载Debian操作系统，可以24h运行 安装教程 准备阶段 安装Docker，我的Debian没安装GUI，只有一个命令行，因此只需要Docker Engine即可，详见Docker官网。\n创建目录，进入你的MiniPC，在想要存放服务器的地方创建一个文件夹，假设我的位置就在~/minecraft\ncd ~ mkdir minecraft cd minecraft 为了方便管理不同的游戏版本，我们再创建版本文件夹，假设我mc运行的版本是1.18.2，就再创建一个mc-1182\nmkdir mc-1182 cd mc-1182 Docker 准备Docker Compose配置文件docker-compose.yml\nversion: \u0026#34;3.8\u0026#34; services: mc: image: itzg/minecraft-server # 镜像名 tty: true # 支持容器交互 stdin_open: true # 允许命令行输入 ports: - \u0026#34;25565:25565\u0026#34; # 端口映射：宿主机25565 映射到容器25565 environment: EULA: \u0026#34;TRUE\u0026#34; # 必填，表示同意 Minecraft 的 EULA 协议 TYPE: \u0026#34;FORGE\u0026#34; # 服务端核心类型：可选 PAPER / SPIGOT / VANILLA / FORGE / FABRIC VERSION: \u0026#34;1.18.2\u0026#34; # Minecraft 游戏版本 INIT_MEMORY: 1G # JVM 初始内存分配 MAX_MEMORY: 2G # JVM 最大内存分配 ONLINE_MODE: \u0026#34;FALSE\u0026#34; # 是否启用正版验证（FALSE 表示允许离线启动） LEVEL: \u0026#34;world\u0026#34;\t# 世界名称 LEVEL_SEED: \u0026#34;Kyxie\u0026#34;\t# 世界种子（可为字符串或纯数字） # 可添加更多环境变量，格式为 KEY: VALUE，注意冒号后需空格 volumes: - ./server:/data # 将当前目录下 server 文件夹挂载到容器的 /data，用于保存世界、配置等数据 restart: unless-stopped # 自动重启策略：除非手动停止，否则容器异常时自动重启 关于选择游戏版本，如果你希望玩匠魂工业等大型模组，1.18.2是个比较好的选择，但是服务器核心要选择FORGE，如果只想轻量化的打打生存，那么可以选择1.20.1，游戏核心选择PAPER\n运行docker compose\ndocker compose up -d 这时候服务器就开始运行了，我们打开HMCL，点击Launch Game，等待进入游戏，点击Multiple Player，然后点击Add a server，Server的地址就填服务器的IP地址\n配置管理员 我们需要修改一些服务器的数据，把你的角色成为管理员（OP）\n首先找到容器的ID\ndocker ps 第一个CONTAINER ID就是要找的内容\n输入以下命令，监控容器的主进程\ndocker attach \u0026lt;CONTAINER ID\u0026gt; 这时我们进入了一个terminal，输入\nop \u0026lt;Your Username\u0026gt; 我的用户名就是Kyxie注意这里区分大小写\n退出的时候不能直接CTRL C，应该使用CTRL P再CTRL Q离开窗口\n常见命令 在服务器Linux的terminal中启动或者重启容器：docker compose up -d（和一开始相同） 把一个角色升级为管理员之后，角色游戏内点击/打开的terminal，就和docker attach的terminal效果一致了 切换模式：/gamemode creative切换为创造模式，有自动补全帮助可以切换其他模式 结束服务：/stop 详细的文档见：Minecraft Server on Docker (Java Edition)\n远程访问 完成了上述步骤就已经成功搭建好了一个Vanilla Minecraft服务器了，剩下的内容就是要将服务暴露到公网，有几种选择\n如果你没有公网IP，可以使用内网穿透，比如花生壳，向日葵，ZeroTire，Cloudflare ZeroTrust 如果你有公网IP，可以使用路由器端口转发，上述Docker Compose File提到的25565就是路由器要转发的端口，外网到25565端口的请求到达路由器，路由器将流量全部转发到miniPC的25565端口 端口转发 由于我有公网IP，我就只介绍这种方法了，国内还是没有公网IP的多，因此内网穿透的教程应该也很多。\n打开路由器的Web Manager，我们家的就是192.168.2.1，不同路由器的内网IP不一定一样，常见的还有192.168.1.1等等\n配置入站出站规则\nRule Name Protocol Internal Port External Port Local IP Address Minecraft TCP 25565 25565 Server的IP Address 进入后台（docker attach或者游戏内的terminal），输入命令\nwhitelist on 然后添加朋友的用户名到whitelist，（OP总是可以加入游戏，不管在不在白名单内）\nwhitelist add Kyxie whitelist add friend_username whitelist reload 然后再让朋友搜索你家的公网IP就可以直接进入游戏了\n有些运营商会经常变动IP地址，如果你有自己的域名，可以通过DDNS来把IP地址配置为域名，详见：OpenWrt配置DDNS | Kunyang\u0026rsquo;s Blog\n","permalink":"https://kyxie.me/zh/blog/game/minecraft/minecraft-server-by-docker/","summary":"上一篇文章讲述了Windows下载安装Minecraft终端，这样我们就可以在自己的电脑上玩我的世界了，但是如何和朋友一起玩呢，主要有三种方","title":"使用Docker部署Minecraft服务器"},{"content":"Wireguard是一个非常轻量化的VPN，相比臃肿的OpenVPN配置要简单很多。非常适合组建自己家的VPN，这样比较敏感的服务就可以先连接到家里的VPN，然后再访问内网了。\n下图是我家的网络拓扑（详见：树莓派4B+安装OpenWrt用作旁路由 | Kunyang\u0026rsquo;s Blog）是把OpenWrt作为旁路由使用，其他设备的默认网关和DNS指向OpenWrt。\nOpenWrt 安装 所需插件：\nkmod-wireguard luci-proto-wireguard wireguard-tools 配置 Network → Interface → Add new interface，创建一个wireguard，名字就叫wg0\n点击Generate new key pair，会自动生成一个公钥一个私钥，IP地址可以随便写一个私有地址的网段，我填写192.168.100.1/24，这就是这个VPN的子网，然后设置默认端口，可以随便写，这里我设置55555\n然后来到Network → Firewall → General Setting，可以选择为wireguard单独创建一个zone，Input, Output和Forward全部开启，Masq关闭\n配置完之后在Interface → wg0 → Firewall Settings就能看到wg0被单独分配到了自己的zone\n如果OpenWrt是主路由，则需要在Firewall → Traffic Rules中开放端口\n像我家的情况OpenWrt是旁路由，则需要在主路由上做端口转发\n在Network → Interface → wg0点击Edit，然后转到Peers，点击Add peer\n添加Description，比如我的Windows台式机 我们可以点击创建新的密钥对 建议创建Preshared Key Allow IPs就是这个节点在这个VPN网络的IP地址，我输入192.168.100.2/32，注意掩码一定是32，一个设备应该只含有一个IP地址 如果该设备在家里，比如我的台式机，Endpoint填OpenWrt的地址，如果设备在外网，比如我的MacBook，则填家里的公网IP Keep Alive可以设置为25 Reload一下wg0接口\nWindows或Mac Os 安装 从这里下载Wireguard App\n配置 在OpenWrt → Network → Interface → wg0 → Edit Peer中可以很方便地为每个终端导出配置文件，复制粘贴在Windows客户端的wireguard中就可以了\n这是Windows的配置例子\n[Interface] PrivateKey = [Windows_PRIVATE_KEY] ListenPort = Port Address = 192.168.100.2/32\t# 这个IP是Windows在wireguard子网的IP DNS = [OpenWrt IP]\t# 可以设置为Wireguard Server（即OpenWrt）的真实IP地址 [Peer] PublicKey = [OpenWrt_PUBLIC_KEY] PresharedKey = [Windows_PSK] AllowedIPs = 192.168.100.0/24\t# 我的Windows和主路由在同一个子网，因此可以设置只有192.168.100.0/24的流量经过VPN Endpoint = [OpenWrt IP]:Port PersistentKeepalive = 25 MacBook 我的MacBook一般是带出家门使用的，因此不常常在我家的内网，除了AllowedIPs设置为所有流量经过VPN以外其他与上面相同\n[Interface] PrivateKey = [MacBook_PRIVATE_KEY] Address = 192.168.100.3/32 ListenPort = PORT DNS = [OpenWrt IP] [Peer] PublicKey = [OpenWrt_PUBLIC_KEY] PresharedKey = [MacBook_PSK] AllowedIPs = 0.0.0.0/0, ::/0\t# All traffic Endpoint = [Home Public IP]:Port\t# Public IP PersistentKeepAlive = 25 Linux 安装 sudo apt update sudo apt upgrade sudo apt install wireguard 配置 进入/etc/wireguard，并生成密钥对，也可以使用OpenWrt的Web manager来生成密钥对（使用OpenWrt集中的管理密钥对更方便，但是不安全）\nsudo -i cd /etc/wireguard umask 077 wg genkey | tee privatekey | wg pubkey \u0026gt; publickey 编辑配置文件wg0.conf\n[Interface] PrivateKey = [LINUX_PRIVATE_KEY] Address = 192.168.100.4/32 ListenPort = Port DNS = [OpenWrt IP] [Peer] PublicKey = [OpenWrt_PUBLIC_KEY] PresharedKey = [LINUX_PSK] AllowedIPs = 192.168.100.0/24\t# 我的Linux作为服务器也一直在家里 Endpoint = [OpenWrt IP]:Port PersistentKeepAlive = 25 启动Wireguard\nsudo wg-quick up wg0 如果需要reloead\nsudo wg-quick down wg0 sudo wg-quick up wg0 问题分析 如果报错\nroot@debian:/etc/wireguard# sudo wg-quick up wg0 [#] ip link add wg0 type wireguard [#] wg setconf wg0 /dev/fd/63 [#] ip -4 address add 192.168.100.4/32 dev wg0 [#] ip link set mtu 1420 up dev wg0 [#] resolvconf -a wg0 -m 0 -x /usr/bin/wg-quick: line 32: resolvconf: command not found [#] ip link delete dev wg0 没有安装resolvconf，需要下载\nsudo apt install resolvconf ","permalink":"https://kyxie.me/zh/blog/tech/server/openwrt/wireguard/","summary":"Wireguard是一个非常轻量化的VPN，相比臃肿的OpenVPN配置要简单很多。非常适合组建自己家的VPN，这样比较敏感的服务就可以先连","title":"OpenWrt配置Wireguard"},{"content":"Sep 2021, Scotiabank 之前办学签来加拿大走SDS用的是Scotiabank，因此我第一张checking account是Scotiabank的。学生账户的话免年费和无限次e-Transfer，但是非学生就要交管理费了，不过我好多同学毕业之后并没有去银行更新身份，即使银行系统里的学生身份到期，也一直没有收取管理费。\n我个人并不喜欢五大行，主要原因还是要交管理费，否则的话要在checking account里存$4000（简直神坑，按照5%的利率算，$4000存一年也有$200刀的利息了，还不如交管理费）。后来PGWP下来以后想去关卡，发现不同的branch对管理费要求还不一样，有的branch必须要每一天结束时checking account的balance都要大于$4000，有的branch则要求月末最后一天balance高于$4000就行，全靠branch经理心情决定。我在hwy404 \u0026amp; hwy7交叉口那个branch关卡，阿三姐找阿三经理问了好长时间，人家非得要我11刀月费否则不给关，然后我跑到hwy404 \u0026amp; steels那个branch，华人小哥给我秒关，可见其管理混乱。\nBTW我觉得Scotiabank比其他银行的App做得要好，滑动滑块转账我是真喜欢，但是不知道为什么总感觉Scotiabank给人e-Transfer到账时间要慢一点。\n我从国内的中国银行向Scotiabank电汇，手续费应该是$17左右。\nDec 2022, Tangerine 当时办这张卡是被Tangerine的信用卡吸引，可以自行设定2到3个categories 2%还是3%返现（后来发现这也不是什么好卡），我觉得有了checking account应该会更容易批信用卡（不仅不是什么好卡，反而因为我不是PR给我拒了），而且意识到自己学生身份快要过期所以想办一个不收管理费的checking account。因为主动开卡的意愿比较大，也没有研究该怎么做开卡任务，因此我好像一点开户奖励都没有捞到（血亏）。\n除此之外，同样是网上银行且受CDIC的保护，Tangerine给出的GIC利率总是比EQ低那么一点点，这导致我不怎么喜欢Tangerine，因此也不把它当作自己的主账户。Mar 2024 Tangerine提醒我账户长期未使用，如果2个月内checking account余额还是没有变动则要收取$10的Inactive fee，得，正好趁这功夫给你把账户全关了吧，于是我在May 2024把checking account关了。\n期间在往外转钱的时候从Wealthsimple link账户，当时Tangerine余额为$72.19，我转了$72.19（exactly the same amount）到Wealthsimple，过几天发现转账失败扣了我$45的overdraft fee。于是乎我给客服打电话问他为什么扣我钱，阿三小哥说你账户有$72.19你往外转了$72.19，然后两边尬了5秒钟，我又问所以你为什么扣我钱，阿三小哥说我问一下经理，回来之后表达歉意说要退我钱，然后又问我办不办overdraft protection1个月只要$5\u0026hellip;\n由于是Scotiabank旗下因此我觉得他往外e-Transfer也特别慢。\nMay 2023, Simplii 这张卡也是被他家的信用卡吸引，0年费吃饭4%返现。由于绑定工资可以拿到$400，refer能再拿$50便开了checking account。这张卡无管理费，无限次email transfer还是很爽的，可以去CIBC的ATM取现金，缺点就是一天取最多$200。\n个人对这张卡无感，目前已经清空了账户，2024年10月关卡。\nOct 2023, EQ Bank 这张卡是一张prepaid Mastercard，需要先转账到EQ bank的checking account中，再转到这个卡。我特别喜欢这张卡，觉得颜值超高，而且这张卡的包装方式很独特，是像个抽屉一样抽出来的。EQ Bank的GIC rate基本上是所有银行中最高的，而且受到CDIC保护，我的GIC基本上都是从EQ买的。\n这张卡在ATM取款是不收手续费的，更重要的是，它花外币也不收2.5%的手续费，而且还有0.5%的返现，我把ChatGPT，EZPass这种美元结算的都绑定在这张卡上（已经绑定到Rogers WEMC了他们家花美元虽然不免FX，但是3%的返现，还账单再1.5x合计是4.5%的返现）。因为平时花美元也不多，可能也就是去旅游的话会花，所以也没有单独去申请专门的外币卡。\nJan 2024, TD 最近薅了把TD的羊毛，开checking account绑定工资再还一次账单，能拿$400，新移民能waive掉第一年的年费。开saving账户存$5000能拿$100，存$10000拿$200。开TSFA，FHSA，RRSP 3个账户中的1个存$5000拿$150，3个中的2个各存$5000拿$350。\nTD这张卡如果接收从国内中国银行转来的汇款会收取$37.5的手续费，本来是$17.5，但是好像经过了一个中转银行就多收了$20。\n2025年1月关闭账户。\nMay 2024, Wealthsimple 这张卡与Wealthsimple的cash account相连，cash account里的现金4%的利率（绑定工资的话4.5%，资产超过$100000也是4.5%，不知道有没有叠加，有叠加，如果账户总资产超过$100000且将工资绑定在了cash account则5%利率，（现在低了很多）），所有消费1%返现，感觉卡面设计的还挺好看的就办下来了。有论坛说这张卡似乎（确实）也免FX，这么一比那是全方位秒杀EQ Card了，我暂时两个卡先都开着。\n我试了一下去只收debit卡的饭店刷这个卡和EQ card被拒绝消费了，看来prepaid卡还是不能算是严格意义上的debit卡。\nOct 2024, BMO 由于有国内汇款需求，TD的手续费太高，于是开了BMO的Checking Account。120天5.5%的利率，$600的Cash offer还算是挺不错了。\n国内中国银行向BMO汇款的手续费应该是$16左右。\nFeb 2025, CIBC CIBC最近在搞活动，开户奖励有~~$700~~，一月份是$700，我开卡的时候就低了不少，忘了是$500还是$600了，120天5%的利率，两年免年费，没啥意思其实。\n现在五月了这个Bonus还没收到。。。\nMay 2025, Meridian 这个卡只收到一张Membership Card，没有CCV没法交易，也没法加入Apple Pay，下图是随便找了张他家的Credit Card。开户绑定工资免一年年费，Cash Back $300，利率4.8%四个月，加拿大最近一直在降息，这利率算是比较可以的了，于是开了户。\n实测无论是使用EQ绑定Meridian，还是Meridian系统内绑定EQ都无法成功，只能去柜台找员工提供void check才能帮忙绑定。绑定之后入金每天最高也只能转账$10000，实在是有点鸡肋，打算一年之后关户。\nMay 2025, Wise 图卡面好看开了Wise的卡，加拿大收卡还是免费，干脆搞一张实体卡。开卡的话首先需要入金$30，绑定Checking Account最便宜手续费只有$0.09，入金之后可以立即取出。不过取款我尝试过连接EQ和CIBC都失败了，最后连接了BMO才成功，取款也是有手续费的，好像是$2.x，使用别人的refer链接开户可以waive掉这个手续费，我的refer链接为：https://wise.com/invite/dic/kunyangx2。\n我其实没有想好具体拿Wise来做什么，单纯觉得这个卡还挺好看的就申请了。外币兑换的话我觉得不如EQ或者WS好用，看到还能人民币转美元，但是仅限于在国内工作的外国人士，可能将来入籍了会派上一点用场。\nMay 2025, Crypto.com 最近比特币涨的挺疯，有点手痒炒炒币，看到这个可以整一张金属卡，于是开了户。一共有五种级别，第一种蓝卡是塑料卡，免账户费，第二档是红卡，需要质押$500，第三档需要质押$5000，后面的越来越高肯定不是我的选择。\n网上的攻略都是入金$500，然后买对应数量的CRO（也就是Crypto自己发行的币），质押半年，期间有免费的Spotify，查了查C$500大概等于3747CRO，算是低点，于是决定开卡。但是等我开卡之后发现规则改成了入金$650，质押一年？虽然这公司应该不太可能倒闭，湖人的主场都是他们冠名的，但是为了张金属卡冒这么大风险大可不必。\n最后还是选择了无年费的蓝卡（需要先充值$20，然后邮寄实体卡需要$4.99），这卡没有一点屁用，就权当收藏卡了。\n","permalink":"https://kyxie.me/zh/blog/wool/checking-accounts/","summary":"Sep 2021, Scotiabank 之前办学签来加拿大走SDS用的是Scotiabank，因此我第一张checking account是Scotiabank的。学生账户的话","title":"我使用过的加拿大🇨🇦支票账户"},{"content":"Vaultwarden是一个密码管理器，它有个好处就是可以跨平台使用，网页端可以添加Chrome插件，IOS端可以在password中设置为使用Vaultwarden进行Auto Fill，我之前一直是IOS自带的的，手机又一直在用Safari，所以在电脑上注册了账号手机还得重新保存一遍，因为害怕忘记所以所有的密码都只能设置成一样，这样的风险实在是太大了。\n密码管理器这种最好是部署在自己的服务器上，使用官方的话那就和IOS/Chrome差别不大了，这篇文章记录一下如何将它用Docker部署在我的miniPC上，使用Docker Compose和Cloudflared。\n还是要提醒一句，自己管理密码还是很烦心的，虽然安全性提高了太多，但是精力也是同步增长，后期导出导入密码，数据备份都会是一个不小的问题。\n部署 这里我试过两种部署方法，Nginx和Cloudflared，两种各有优劣。这篇文章主要将如何将服务加入他们的网络，前置配置请看之前的文章：\nNginx：将自己的服务暴露公网 | Kunyang\u0026rsquo;s Blog Cloudflared：将自己的服务暴露公网 | Kunyang\u0026rsquo;s Blog Nginx 首先我们需要配置好Nginx\n创建一个文件夹用于存放配置和Docker关联的数据，文件目录大致为\n~ ├── nginx └── vaultwarden ├── docker-compose.yml └── server 进入vaultwarden，创建一个docker-compose.yml\nservices: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden restart: unless-stopped expose: - \u0026#34;80\u0026#34; environment: DOMAIN: \u0026#34;https://your.domain.com\u0026#34; VIRTUAL_HOST: \u0026#34;your.domain.com\u0026#34; LETSENCRYPT_HOST: \u0026#34;your.domain.com\u0026#34; LETSENCRYPT_EMAIL: \u0026#34;you@example.com\u0026#34; ICON_SERVICE: \u0026#34;bitwarden\u0026#34; DISABLE_ICON_DOWNLOAD: \u0026#34;true\u0026#34; ADMIN_TOKEN: \u0026#39;your_admin_token\u0026#39; IP_HEADER: \u0026#34;X-Forwarded-For\u0026#34; SIGNUPS_ALLOWED: \u0026#34;false\u0026#34;\t# 默认禁止其他人新注册，防止别人白嫖你的服务 volumes: - ./data:/data networks: - nginx networks: nginx: external: true 其中这个ADMIN_TOKEN是你自定义的token，可以取任意字符串，建议越长越好，以抵抗别人的暴力破解。建议自己先想一个明文密码，然后使用argon2，将这个明文密码再转换成一个哈希值，把这个哈希值作为ADMIN_TOKEN。下面命令是让docker pull一个alpine，在alpine里下载argon2工具，然后生成一个token，再把token的$替换成$$，最后再删除容器。\ndocker run --rm alpine sh -c \u0026#39;apk add --no-cache argon2 openssl \u0026gt;/dev/null \u0026amp;\u0026amp; echo -n \u0026#34;YOUR SECRET\u0026#34; | argon2 $(openssl rand -base64 32) -e -id -k 19456 -t 2 -p 1 | sed \u0026#34;s/\\\\$/\\$\\$/g\u0026#34;\u0026#39; 注意：\n不要忘记这个明文密码 使用双$$之后，在docker-compose.yml中要使用单引号 启动容器\ndocker compose up -d 之后注册好域名，开放路由器的443端口，就可以公网访问了。\nCloudflared 首先我们需要配置好Cloudflared\n创建一个文件夹用于存放配置和Docker关联的数据，文件目录大致为\n~ ├── cloudflared └── vaultwarden ├── docker-compose.yml └── server 进入vaultwarden，创建一个docker-compose.yml，其余的和上述都一致，把网络换成cloudflared即可（之前需要创建过cloudflared这个docker network，且cloudflared容器已经加入了这个网络）\nservices: vaultwarden: image: vaultwarden/server:latest container_name: vaultwarden restart: unless-stopped expose: - \u0026#34;80\u0026#34; environment: DOMAIN: \u0026#34;https://your.domain.com\u0026#34; VIRTUAL_HOST: \u0026#34;your.domain.com\u0026#34; LETSENCRYPT_HOST: \u0026#34;your.domain.com\u0026#34; LETSENCRYPT_EMAIL: \u0026#34;you@example.com\u0026#34; ICON_SERVICE: \u0026#34;bitwarden\u0026#34; DISABLE_ICON_DOWNLOAD: \u0026#34;true\u0026#34; ADMIN_TOKEN: \u0026#39;your_admin_token\u0026#39; IP_HEADER: \u0026#34;X-Forwarded-For\u0026#34; SIGNUPS_ALLOWED: \u0026#34;false\u0026#34;\t# 默认禁止其他人新注册，防止别人白嫖你的服务 volumes: - ./data:/data networks: - cloudflared networks: cloudflared: external: true 注意cloudflared官网的配置应该和你本地的docker容器用一样的端口\n启动容器后可以登录到admin页面，url是your_hostname/admin，输入刚才的明文密码就可以进入了\n但是建议使用docker-compose.yml做配置，因为它的优先级高，这样可以避免冲突，admin页面仅用于读取\n添加SMTP，配置邮件，我用的是Gmail\nenvironment: SMTP_HOST: \u0026#34;smtp.gmail.com\u0026#34; SMTP_FROM: \u0026#34;YOUR EMAIL\u0026#34; SMTP_FROM_NAME: \u0026#34;Vaultwarden\u0026#34; SMTP_SECURITY: \u0026#34;starttls“ SMTP_PORT: \u0026#34;587\u0026#34; SMTP_USERNAME: \u0026#34;YOUR EMAIL\u0026#34; SMTP_PASSWORD: \u0026#34;YOUR PASSWORD\u0026#34; SMTP_AUTH_MECHANISM: \u0026#34;Plain\u0026#34; SMTP_TIMEOUT: \u0026#34;15\u0026#34; 填写完之后可以重启一个容器\n之后就可以去Users页面邀请新用户了，包括自己\n","permalink":"https://kyxie.me/zh/blog/tech/server/debian/vaultwarden/","summary":"Vaultwarden是一个密码管理器，它有个好处就是可以跨平台使用，网页端可以添加Chrome插件，IOS端可以在password中设置为","title":"使用Docker部署密码管理器"},{"content":"OpenWrt配置DDNS 前提条件 需要一个域名\n需要公网IP\n一些包\nddns-scripts-cloudflare luci-app-ddns drill 配置步骤 首先需要Cloudflare创建一条A记录，选一个域名，例如vpn.kyxie.me，IP地址可以随便填，反正将来还会被DDNS覆盖，Proxy status选择关闭，只进行DNS不进行代理\n在这里点击Create Token，创建一个专用的API token\n选择Edit Zone DNS，点击Use Template\n按照下图配置\n生成API Token后注意保存好，只会显示一次\n然后回到OpenWrt → Service → Dynamic DNS → Services，添加一个ddns_ipv4，下面是详细配置，注意必须要安装了ddns-scripts-cloudflare之后才能在DDNS Service provider找到cloudflare.com-v4\nddns: \u0026#34;Enabled\u0026#34;: true \u0026#34;Lookup Hostname\u0026#34;: \u0026#34;vpn.kyxie.me\u0026#34; \u0026#34;IP address version\u0026#34;: \u0026#34;IPV4-Address\u0026#34; \u0026#34;DDNS Service provider\u0026#34;: \u0026#34;cloudflare.com-v4\u0026#34; \u0026#34;Domain\u0026#34;: \u0026#34;vpn@kyxie.me\u0026#34; \u0026#34;Username\u0026#34;: \u0026#34;Bearer\u0026#34; \u0026#34;Password\u0026#34;: \u0026#34;Your API Token\u0026#34; \u0026#34;Use HTTP Secure\u0026#34;: true \u0026#34;Path to CA-Certificate\u0026#34;: \u0026#34;/etc/ssl/certs\u0026#34; 如果OpenWrt为主路由，这样应该可以完成DDNS解析了，但是如果OpenWrt为旁路由，由于路由器的wan口并不知道公网IP，需要使用借助网站来得知自己的公网IP，我们在Service → Dynamic DNS → Services → ddns_ipv4 → Edit → Advanced Settings → IP address source选择URL，URL to detect可以选择默认ipv4的urlhttp://checkip.dyndns.com\n这样DDNS的配置就完成了，以后如果运营商给你换了公网IP也不会影响域名的配对了\n配置完后可以去Cloudflare看看IP地址有没有刷新\n","permalink":"https://kyxie.me/zh/blog/tech/server/openwrt/ddns/","summary":"OpenWrt配置DDNS 前提条件 需要一个域名 需要公网IP 一些包 ddns-scripts-cloudflare luci-app-ddns drill 配置步骤 首先需要Cloudflare创建一条A记录，选一个域名，例如v","title":"OpenWrt配置DDNS"},{"content":"Wealthsimple 使用链接(https://wealthsimple.com/invite/VXU-UQ)或推荐码VXU-UQ开设账号，在开户后的30天内存$1即可获得$25奖励\nFeatures Core Premium 资金要求 $0 $100000 Commission Fee $0 $0 Cash Account 4% 4.5% USD FX 1.5% 1.5% Crypto Trading Fee 2% 1% USD Account $10 / mon $0 如果购买美元计价的股票买卖都是1.5%，加起来就是3% 如果是premium，买卖不收取1.5%手续费，但是加币转美元还是要收取外汇转换费1.5% 如果把工资的Direct Deposit绑在cash account上的话利率为4.5%，并且利率是可以和其他因素叠加的，比如我是Premium用户，我也绑了工资，那我的利率就是5%，详细信息可以看：我使用过的加拿大🇨🇦支票账户 | Kunyang\u0026rsquo;s Blog (kyxie.github.io) Questrade 使用邀请码855908417478550开户，存入$1000可收到奖励$50\nFeatures 交易股票每股$0.01，min $4.95 to max $9.95 买ETF$0，卖$0.01，min $4.95 to max $9.95 卷起来了，现在买卖应该都免费了 Questrade将部分账户金额头寸转移到其他金融机构的收费从原先的$25升至$150 TFSA RRSP无年费 可以存美元进RRSP USD Margin rate为3.25% IBKR 使用链接(https://ibkr.com/referral/kunyang118)开户，在账户中每存入USD$100的资产（现金或其他资产）可获得USD$1的IBKR股票，最高可获得USD$1000的股票，平均余额必须至少保有一年方可使股票解禁\nFeatures Trading Fee Fixed：每股USD $0.005，每次交易最低收USD $1，最高收交易价值的1% Tiered：低于300k Shares时，佣金为每股USD $0.0035，最低收USD $0.35，最高收交易价值的1%。但此收费方式还要加（或减）交易所费，清算费和规管等其他费用（加股交易Fixed每股$0.01，最低$1，最高为交易价值的0.5%） 对于大量资金和交易的客户，Fixed会比较划算。如果是少量资金入场的小伙伴，每次想一股一股的买，那Tiered更合适 兑换美金：最低换汇额度为CAD$2500，每笔收换汇金额的0.002%，最低收USD$2（当换汇金额低于USD$100,000时，手续费一直都是USD$2） 开设RRSP需要交$12.5 / season的季度费，因此不要在IBKR中开RRSP USD Margin Interest为1.59% Moomoo 使用链接(https://j.moomoo.com/02aeBS)开户，下载APP登录领$10\n悠酒世界上看到的开户奖励活动，还挺不错的，我没怎么仔细研究过这个平台具体的费用，买了几股NVDA CDR好像大概花了$2，不过我遇到过CDR卖不了的情况，Trade按钮消失了，消失一天后第二天又出现了。\n打算用来薅开户奖励，不作为长期使用的账户。\n提现时和IBKR流程一样，建议绑定一个Checking账户，每个月有一次免费的取款次数，后续提现$2一次。\nWeBull 使用链接(https://www.webull.ca/s/sF2caZuuDwCPHtmYjV)开户，Deposit $100可以得到$100\n加国理财看到的开户奖励活动，WeBull这个平台我自己用下来感觉挺不错的，不像moomoo就是个套壳的IBKR，WeBull体验下来很流畅。出金也很方便，不像IBKR有一个月只免费一次的限制，WeBull出金没有手续费。\n开户前90天内交易应该是免手续费的，90天之后我尝试着卖一股CASH.to要花费我$2.x的手续费。\n因为有手续费且还不低，不打算作为长期使用的账户，想着薅完开户奖励就关户。\nEQ 使用链接(https://join.eqbank.ca/?code=KUNYANG4168)或邀请码KUNYANG4168开户，Deposit $100可以得到$20\nFeatures EQ虽然不是券商，但是可以开一个免费的USD Account，3% interest，加拿大的银行USD to USD transfer免费。\n","permalink":"https://kyxie.me/zh/blog/wool/stock-brokers/","summary":"Wealthsimple 使用链接(https://wealthsimple.com/invite/VXU-UQ)或推荐码VXU-UQ开设账号，在开户后的30天内存","title":"加拿大券商对比"},{"content":"这篇文章就介绍使用Docker Compose来打造一个个人的家庭影院。\n基本的Workflow是这样的：\n本体就是Sonarr和Radarr，Sonarr是找剧的，Radarr是找电影的 他们俩从哪找片呢，从indexers，这个indexer就可以理解为片源，但是indexer多了就需要东西管理，这时引入了Prowlarr，它可以连接Sonarr和Radarr，以后只需要在Prowlarr添加indexers，然后就可以自动同步到Sonarr和Radarr了 找到了片源需要下载器，默认用qBittorrent，我看了下也可以使用Aria2和Transmission 最后一个Bazarr是用来管理字幕的 服务端配置好之后，再使用客户端就可以看电影了。\n部署 创建以下文件夹结构\n/media ├── config │ ├── bazarr │ ├── prowlarr │ ├── qbittorrent │ ├── radarr │ └── sonarr ├── docker-compose.yml ├── downloads └── library ├── movies └── tv 创建docker网络media\ndocker network create media 编辑docker-compose.yml\nservices: sonarr: image: lscr.io/linuxserver/sonarr:latest container_name: sonarr environment: - PUID=1000 - PGID=1000 - TZ=America/Toronto volumes: - ./config/sonarr:/config - ./downloads:/downloads - ./library/tv:/tv ports: - \u0026#34;8989:8989\u0026#34; networks: - media restart: unless-stopped radarr: image: lscr.io/linuxserver/radarr:latest container_name: radarr environment: - PUID=1000 - PGID=1000 - TZ=America/Toronto volumes: - ./config/radarr:/config - ./downloads:/downloads - ./library/movies:/movies ports: - \u0026#34;7878:7878\u0026#34; networks: - media restart: unless-stopped prowlarr: image: lscr.io/linuxserver/prowlarr:latest container_name: prowlarr environment: - PUID=1000 - PGID=1000 - TZ=America/Toronto volumes: - ./config/prowlarr:/config ports: - \u0026#34;9696:9696\u0026#34; networks: - media restart: unless-stopped bazarr: image: lscr.io/linuxserver/bazarr:latest container_name: bazarr environment: - PUID=1000 - PGID=1000 - TZ=America/Toronto volumes: - ./config/bazarr:/config - ./downloads:/downloads - ./library/movies:/movies - ./library/tv:/tv ports: - \u0026#34;6767:6767\u0026#34; networks: - media restart: unless-stopped flaresolverr: image: ghcr.io/flaresolverr/flaresolverr:latest container_name: flaresolverr environment: - PUID=1000 - PGID=1000 - LOG_LEVEL=info - TZ=America/Toronto networks: - media restart: unless-stopped qbittorrent: image: lscr.io/linuxserver/qbittorrent:latest container_name: qbittorrent environment: - PUID=1000 - PGID=1000 - TZ=America/Toronto - WEBUI_PORT=8080 volumes: - ./config/qbittorrent:/config - ./downloads:/downloads ports: - \u0026#34;9090:8080\u0026#34; - \u0026#34;6881:6881\u0026#34; - \u0026#34;6881:6881/udp\u0026#34; networks: - media restart: unless-stopped networks: media: external: true 配置 qBittorrent 打开qBittorrent，如果显示Unauthorized：\n由于我的服务是部署在Debian小主机上的，只有命令行，我从Windows上访问qBittorrent的话会收到限制，可能默认设置了不允许外部访问，需要修改配置文件\n首先关掉容器\ndocker compose down 打开/config/qbittorrent/qBittorrent/qBittorrent.conf\n[Preferences] WebUI\\Address=0.0.0.0 WebUI\\CSRFProtection=false WebUI\\HostHeaderValidation=false WebUI\\ServerDomains=* WebUI\\Username=admin 把WebUI\\Address改为0.0.0.0\n重启容器\ndocker compose up -d 查看logs，可以得到一个初始密码\ndocker logs qbittorrent --tail 50 然后在浏览器中输入admin和初始密码即可登录\n登陆后在齿轮⚙ → WebUI → Authentication可以修改用户名和密码，然后就不用管配置文件了\nProwlarr 左侧栏第一个Indexers，添加Indexer，可以先添加几个免费的试试，比如EZTV和YTS\n添加1337x的时候会显示blocked by CloudFlare Protection，这时候就需要FlareSolverr\nSettings → Indexers添加Index，使用FlareSolverr，由于在同一个Docker网络下，Host可以填http://flaresolverr:8191/ tag填写1337x 再回去添加Indexer，最下面的tag也填写1337x，这样再测试连接就成功了 我们先登录Sonarr和Radarr，设置用户名和密码（就会得到用户的API Key），然后在Prowlarr的Settings → Apps添加Sonarr和Radarr\nName: Sonarr Sync Level: Full Sync Prowlarr Server: http://prowlarr:9696 Sonarr Server: http://sonarr:8989 API Key: xxx Name: Radarr Sync Level: Full Sync Prowlarr Server: http://prowlarr:9696 Radarr Server: http://radarr:7878 API Key: xxx 在Settings → Download Clients添加qBittorrent下载器\nName: qBittorrent Enable: true Host: qbittorrent Port: 8080 Username: xxx Password: xxx Sonarr / Radarr 和Prowlarr相同，分别进入Settings → Download Clients，添加刚才的qBittorrent下载器 Bazarr Bazarr好像都不需要身份认证，在Settings可以绑定Sonnar和Radarr，同样地，Address写容器名即可 在Settings → Languages → Language Filter添加简体中文 Embedded Tracks Language开启 创建一个简体中文的Profile 默认Profile都设置为简体中文 在Settings → Providers中添加字幕源，可以使用zimuku和OpenSubtitles.com（这个需要注册用户） 找电影 全部配置好之后剩下的事情就很简单了，基本步骤就是：\n如果想找电影，就去Radarr直接搜电影名称，同理电视剧就去Sonarr找 加入愿望单 加入后就会自动连接qBittorrent帮我们下载 下载完后视频文件就在挂载的文件夹了 看电影 Infuse 我目前使用Infuse来看电影，通过SMB来访问服务器上挂载的文件夹，然后本地观看 优点是本地硬件解码，降低了我的miniPC的硬件压力 缺点是刮削没有Jellyfin强，没有账号管理功能，因此没有观看进度记忆功能 好像只能应用在苹果设备，iPhone，iPad，MacBook或者Apple TV Jellyfin Jellyfin的好处就是刮削能力比较强，能够显示完整的电影封面，演员信息，还支持多账号，管理每个人不同的观影记录等等\n如果服务器有独立显卡，可以直接考虑使用Jellyfin作为播放器，这样用户就可以直接在网页端观看了（我没有，我选择Infuse）\nInfuse也支持连接Jellyfin，但是要开Infuse会员，这样Infuse就完全当一个播放器用，刮削，多账户共享，观看记录功能交给Jellyfin 如果需要添加Jellyfin，可以在config文件夹下先创建jellyfin，然后修改docker-compose.yml，加入\njellyfin: image: jellyfin/jellyfin container_name: jellyfin user: \u0026#34;1000:1000\u0026#34; environment: - TZ=America/Toronto volumes: - ./config/jellyfin:/config - ./library:/media ports: - \u0026#34;8096:8096\u0026#34; networks: - media restart: unless-stopped 之后在Sonarr / Radarr的Settings → Connections可以添加Jellyfin，主要作用是下载完成后可以通知Jellyfin刷新一遍\n","permalink":"https://kyxie.me/zh/blog/tech/server/debian/cinema/","summary":"这篇文章就介绍使用Docker Compose来打造一个个人的家庭影院。 基本的Workflow是这样的： 本体就是Sonarr和Radarr，S","title":"使用Docker部署家庭影院"},{"content":"AdguardHome是一个去广告应用，但是它不仅仅能去广告，还能做一个局域网的DNS服务器。\n安装 这个应用因为算是网络管理相关，我就安装在了OpenWrt上，在编译时只需要勾选luci-app-adguardhome即可。\n然后在OpenWrt的管理页面然后下载核心（可能需要科学上网）。\n去广告 Web管理页面默认在3000端口\n默认的用户名密码为admin，admin\n在设置 → DNS设置 → 上游DNS服务器可以填写公共DNS服务器，比如\n# 国外 8.8.8.8 1.1.1.1 # 国内 223.5.5.5 114.114.114.114 之后把设备的DNS服务器改为OpenWrt即可\n默认DNS服务器 OpenWrt默认的DNS服务器为dnsmasq，它在监听53端口，既然我们已经安装了AdguardHome，完全可以把它作为DNS服务器，在OpenWrt输入命令\nuci set dhcp.@dnsmasq[0].port=\u0026#39;0\u0026#39; uci commit dhcp /etc/init.d/dnsmasq restart 可以让dnsmasq不监听53端口\n然后修改AdguardHome的配置文件，它的默认port为1753，可以改成53\n# vim /etc/AdGuardHome.yaml dns: bind_hosts: - 0.0.0.0 port: 53 重启AdguardHome\n/etc/init.d/AdGuardHome restart 这样AdguardHome就变成默认DNS服务器了，默认服务器的好处就是你可以用它来监控哪个设备请求了哪些服务，否则各个设备的请求得先被dnsmasq接收，然后再转到Adguard Home，这样在Adguard Home看到的所有的请求都来自于localhost\n给设备命名 把Adguard Home设置为默认DNS服务器还有个好处就是可以单独命名各个设备，之前访问debian服务器还得记住它的IP地址，现在只要记住设备的域名就可以了\n在过滤器 → DNS重写，添加重写规则，效果如图\n然后浏览器访问http://openwrt.home就能直接访问到OpenWrt的Web Manager了\n修改用户名密码 其实这个用户名密码没有很重要，因为Adguard Home肯定只在内网运行（我没有把OpenWrt部署到公网），但是为了以防万一还是修改一下用户名密码，admin/admin实在是太危险了\n详见：Configuration · AdguardTeam/AdGuardHome Wiki · GitHub\n如果你有Alpine，可以在Alpine内运行\ndocker run --rm alpine sh -c \u0026#39;apk add --no-cache apache2-utils \u0026gt;/dev/null \u0026amp;\u0026amp; htpasswd -B -C 10 -n -b username password\u0026#39; ","permalink":"https://kyxie.me/zh/blog/tech/server/openwrt/adguardhome/","summary":"AdguardHome是一个去广告应用，但是它不仅仅能去广告，还能做一个局域网的DNS服务器。 安装 这个应用因为算是网络管理相关，我就安装在了","title":"OpenWrt部署AdGuardHome"},{"content":"得益于MiniPC 24小时不间断加班，太适合在上面部署一些自动化下载上传以及文件管理功能了，这篇文章主要讲使用Docker来部署这些服务：\nSamba：Linux上运行它，可以把Linux映射成一个Windows磁盘，访问MiniPC文件只需要打开Windows的资源管理器 FileBrowser：图形化文件管理器，可以部署网页管理界面到公网，相当于自建云盘 BaiduPCS Go：命令行控制上传和下载文件到百度云 OpenList：AList的开源版，可以挂载一系列云盘，也可以挂载本地 Samba 使用Samba可以将Linux映射为Windows的一个本地磁盘，这样Windows的软件就可以直接打开Linux的文件夹了，大大方便了我们使用命令行来管理Linux文件。\n之前部署Samba是直接安装在Linux上的，后来试了试用Docker也完全可以。\nLinux直接安装 安装Samba\nsudo apt update sudo apt install samba 编辑Samba配置文件\nsudo nano /etc/samba/smb.conf 首先建议把[homes]下的所有内容注释掉，否则会自动把所有用户的~目录也一起共享出，我们可以在文本末尾添加内容来手动控制需要共享的目录\n[Name] path = /home/user1 browsable = yes read only = no guest ok = yes [Name]是共享文件夹的名称，会显示在Windows磁盘上\n设置Samba账户密码\nsudo smbpasswd -a user1 sudo smbpasswd -e user1 重启Samba服务\nsudo systemctl restart smbd Docker 使用Docker Compose安装Samba\nservices: samba: image: dperson/samba container_name: samba restart: unless-stopped ports: - \u0026#34;137:137/udp\u0026#34; - \u0026#34;138:138/udp\u0026#34; - \u0026#34;139:139/tcp\u0026#34; - \u0026#34;445:445/tcp\u0026#34; volumes: - [host_path]:/mount/home # 替换成宿主机要共享的目录路径 environment: - USERID=[your_uid] # 替换成宿主机对应用户的UID，运行`id -u`获取 - GROUPID=[your_gid] # 替换成宿主机对应用户的GID，运行`id -g`获取 command: \u0026gt; -u \u0026#34;[username];[password]\u0026#34; -s \u0026#34;[Name];/mount/home;yes;no;no;[username]\u0026#34; 替换[username]，[password]，[Name]为自己想要的值\nDocker容器运行后会产生一些匿名卷，是正常现象\nWindows 打开文件资源管理器 右键点击“此电脑”，选择“映射网络驱动器” 选择一个驱动器字母（例如Z:） 在文件夹栏中输入：\\\\Linux IP Address\\[Name] FileBrowser File Browser是一个文件浏览器，可以用于图形化地管理MiniPC上的文件。但是我比较习惯用Samba，平时还是习惯用Window的文件管理器直接打开MiniPC上的文件。\n然而FileBrowser相较于Samba有一个Web管理器，因此可以将服务暴露到公网，这样我们就相当于自建了一个网盘了。假设和朋友出去玩拍了好多照片，分享的时候嫌微信无法传大文件，就可以用这个了。这样我们每次拍完照把U盘在MiniPC上一插即可。\n由于是部署在公网，我们可以只把SD卡的内容挂载进去，就算被黑了MiniPC本身的文件也不会被涉及。\n部署 本地创建一个文件夹，然后新建一个文件database.db，修改权限\ntouch ./database.db chown 1000:1000 ./database.db chmod 664 ./database.db 创建docker-compose.yml，我打算由cloudflared托管，因此接入它的网络\nservices: filebrowser: image: filebrowser/filebrowser container_name: filebrowser restart: unless-stopped volumes: - ./data:/srv - ./database.db:/database.db expose: - \u0026#34;80\u0026#34; environment: - PUID=1000 - PGID=1000 - UMASK=022 - TZ=America/Toronto user: \u0026#34;1000:1000\u0026#34; networks: - cloudflared networks: cloudflared: external: true 启动容器，默认用户名密码为admin和admin\ndocker compose up -d 修改密码 先停掉容器\ndocker compose down 重置密码\ndocker run --rm \\ -v $(pwd)/database.db:/database.db \\ filebrowser/filebrowser \\ users update User --password 12345678 --database /database.db 挂载U盘 / SD卡 先停止容器docker compose down\n首先需要把U盘挂载到miniPC，如果希望手动挂载，请继续往下看，但是这里建议自动挂载（详见：使用udev自动挂载U盘 | Kunyang\u0026rsquo;s Blog），U盘插入后直接挂载到对应的文件夹。下面是手动挂载的流程：\n假设U盘名称（Label）为Nikon-1，我们先手动挂载在~/filebrowser/Nikon-1下，这样我们访问~/filebrowser/Nikon-1这个文件夹就是在访问我们的U盘\n得到设备名\nlsblk 一般就叫/dev/sdb1\n创建挂载点目录\nsudo mkdir -p ~/filebrowser/nikon-1 挂载设备\nsudo mount /dev/sdb1 ~/filebrowser/nikon-1 假设我的尼康相机有两个SD卡，大疆有一个SD卡，SD卡都分别被我命名为了nikon-1，nikon-2和dji-1。本地的miniPC挂载完成后，修改File Browser的docker-compose.yml，把逻辑卷加入\nvolumes: - ./data:/srv - ./database.db:/database.db # 挂载SD卡 - ./nikon-1/DCIM/102NZ_FC:/srv/nikon/SD1 - ./nikon-2/DCIM/102NZ_FC:/srv/nikon/SD2 - ./dji-1/DCIM/DJI_001:/srv/dji/SD1 # 挂载服务器，不建议，如果用户名密码被破解很危险，建议使用VPN访问 - /home/username/:/srv/debian 重启容器\ndocker compose up -d BaiduPCS Go 虽然百度网盘经常被吐槽限速，但是我一直没有放弃使用百度云，因为我是比较早期的用户，一直有 2T 的存储空间，所以它非常适合用来备份一些“电子鸡肋”（比如现在相机拍一张RAW格式照片动辄就是30MB，拍的大疆视频好几个G，剪视频能有的片段很少），正好可以利用这个空间长期存放。2T的空间我现在才用了不到300G，且这种正常的视频百度云一般不会和谐。\n但是百度云盘无法直接运行在Linux上，况且我的服务器连GUI都没有，因此需要一个Docker + 命令行版本的百度网盘，查了一下还真有，可以使用BaiduPCS Go。我把这个做成了Docker镜像：kyxie/baidupcs-go - Docker Image | Docker Hub\n部署 直接运行\ndocker run -d -it --name baidupcs-go \\ -v $(pwd)/data:/data \\ -v $(pwd)/upload:/upload \\ -v $(pwd)/config:/root/.config/BaiduPCS-Go \\ -w /upload \\ kyxie/baidupcs-go:latest 使用Docker Compose部署（推荐）\nservices: baidupcs-go: image: kyxie/baidupcs-go:latest container_name: baidupcs-go stdin_open: true tty: true volumes: - ./data:/data - ./upload:/upload - ./config:/root/.config/BaiduPCS-Go # 挂载其他目录，比如U盘的目录 - /mnt/usb:/u working_dir: /upload 常见命令 查看容器内部文件\ndocker exec -it baidupcs-go /bin/sh 进入容器，登录后显示网盘的文件\ndocker exec -it baidupcs-go BaiduPCS-Go 登录\n使用浏览器登录百度网盘\n键盘F12 → Application → Cookies → https://pan.baidu.com → 找到BDUSS字段，复制\n输入命令\nlogin -bduss=\u0026lt;BDUSS\u0026gt; 上传，建议使用screen，因为关闭终端有可能会暂停上传\nscreen -S pcs-upload docker exec baidupcs-go \\ BaiduPCS-Go upload \u0026lt;本地路径\u0026gt; \u0026lt;云盘路径\u0026gt; # 举例 docker exec baidupcs-go \\ BaiduPCS-Go upload /nikon-1 \u0026#34;/照片和视频/来自：Nikon Zfc/2025 花瓶岛\u0026#34; docker exec baidupcs-go \\ BaiduPCS-Go upload /dji-1/MP4 \u0026#34;/照片和视频/来自：DJI/2025 花瓶岛\u0026#34; 可以登录到云盘之后pwd显示云盘的路径，如果带有中文可以添加双引号。Ctrl + a，然后按d，暂时退出，不影响上传任务\n其余详见：GitHub - qjfoidnh/BaiduPCS-Go: iikira/BaiduPCS-Go原版基础上集成了分享链接/秒传链接转存功能\nMacOS文件分类命令 Nikon：在Mac上自动把混在一起的.NEF文件和.JPG文件归类成两个文件夹/NEF和/JPG\nmkdir -p RAW JPG \u0026amp;\u0026amp; mv *.NEF RAW/ \u0026amp;\u0026amp; mv *.JPG JPG/ DJI：在Mac上自动把混在一起的.LRF文件和.MP4文件归类成两个文件夹/LRF和/MP4\nmkdir -p LRF MP4 \u0026amp;\u0026amp; mv *.LRF LRF/ \u0026amp;\u0026amp; mv *.MP4 MP4/ OpenList 因为之前也没怎么用过AList，它被卖了之后打算试一下OpenList，使用它可以挂载不同的云盘，方便我们在一个地方管理不同云盘的内容，还可以自动下载和上传云盘的内容。相当于结合了BaiduPCS和FileBrowser吧。\n部署 在之前Cloudflare ZeroTrust创建的Tunnel再创建一个新的public hostname，一个Example：\nSubdomain: cloud Domain: example.com Type: HTTP URL: openlist:5244 OpenList官网有很详细的文档：Use Docker - OpenList Docs\n同样的本地创建一个文件夹，然后创建docker-compose.yml\nservices: openlist: image: \u0026#39;openlistteam/openlist:latest-aio\u0026#39; container_name: openlist volumes: - \u0026#39;./data:/opt/openlist/data\u0026#39; - \u0026#39;./storage:/opt/openlist/storage\u0026#39; environment: - PUID=1000 - PGID=1000 - UMASK=022 - TZ=America/Toronto restart: unless-stopped networks: - cloudflared networks: cloudflared: external: true lastest-aio镜像打包了一个Aria2在里面，作为默认的下载器，在OpenList里也可以配置本机自带的其他的下载器。我并没有集中用一个下载器，影音部分用的是qbit，这里用的Aria2，一方面下载电影确实适合P2P，挂在网盘则不是。另一方面qBit挂载的目录Sonarr和Radarr也得有权限访问，一旦OpenList使用qBit挂载目录配置错了会影响Sonarr的访问，因此干脆直接用两个\n根据这篇文章：使用udev自动挂载U盘 | Kunyang\u0026rsquo;s Blog，我们可以修改/usr/local/bin/auto-mount-usb.sh脚本，把mount_base改为~/openlist/storage\n启动容器\ndocker compose up -d 产生一个临时的随机密码，使用这个密码就可以登录了，登录之后再在网页端修改密码，建议开启2FA\ndocker exec -it openlist ./openlist admin random 挂载本地 我们插入SD卡或者U盘后就会自动挂载到storage目录下 在网页端 → Storage → 添加 → 本地储存 挂载路径就是网页内要展示的路径，比如/SD，还可以使用多级目录，比如/SD/Nikon-2 WebDAV策略默认本地代理 根文件夹目录就是容器内的目录，我设置为/opt/openlist/storage，这样就把U盘映射出去了 如果没找到，则重启容器，需要在启动容器前挂载SD卡 挂载云盘 挂载百度网盘：Baidu Netdisk - OpenList Docs\n在百度云盘点击上传打开的还是Windows的管理器，如果想直接从SD卡上传到百度云可以使用复制，从一个储存复制到另外一个，网盘见互传也可以这样，这样的话可以退役BaiduPCS Go了 挂载Google Drive：Google Drive - OpenList Docs\n目前我只使用了这两个，文档里也有很详细的挂载其他网盘的教程。\n","permalink":"https://kyxie.me/zh/blog/tech/server/debian/cloud/","summary":"得益于MiniPC 24小时不间断加班，太适合在上面部署一些自动化下载上传以及文件管理功能了，这篇文章主要讲使用Docker来部署这些服务： S","title":"使用Docker部署私有云和文件管理"},{"content":"现在服务器部署了这么多服务，忘记端口挺难找到对应的服务，因此有一个合适的管理页面也是挺不错的。最好有个Dashboard展示了所有服务的跳转入口，显示Docker容器的运行状态，监视各种硬件信息（运行在Docker容器内这个似乎难以实现，干脆命令行top吧，我对这个也不太在乎），最好还能提供文件服务（完全可以被Samba代替）。\n这种Dashboard类的服务可以挂载在80端口，这样浏览器直接输入IP就能访问Dashboard页面了，我尝试了下面几个。\nHomer 我试过Homer，但是它有点过于轻量级了，它本身只是一个静态的面板，不会直接管理服务状态、容器、文件等内容，只是跳转和展示链接用的。下面是部署流程：\n本地创建一个文件夹homer，进入文件夹\n创建docker-compose.yml\nservices: homer: image: b4bz/homer:latest container_name: homer volumes: - ./assets:/www/assets ports: - 80:8080 restart: unless-stopped 创建一个文件夹assets，在文件夹内创建config.yml，用于管理所有的服务\n--- # Homepage configuration title: \u0026#34;Kyxie Web Services\u0026#34; subtitle: \u0026#34;Dashboard\u0026#34; logo: \u0026#34;logo.png\u0026#34; icon: \u0026#34;fas fa-skull-crossbones\u0026#34; header: true footer: false columns: \u0026#34;4\u0026#34; # Optional theme customization theme: default colors: light: highlight-primary: \u0026#34;#3367d6\u0026#34; highlight-secondary: \u0026#34;#4285f4\u0026#34; highlight-hover: \u0026#34;#5a95f5\u0026#34; background: \u0026#34;#f5f5f5\u0026#34; card-background: \u0026#34;#ffffff\u0026#34; text: \u0026#34;#363636\u0026#34; text-header: \u0026#34;#ffffff\u0026#34; text-title: \u0026#34;#303030\u0026#34; text-subtitle: \u0026#34;#424242\u0026#34; card-shadow: rgba(0, 0, 0, 0.1) link-hover: \u0026#34;#363636\u0026#34; dark: highlight-primary: \u0026#34;#3367d6\u0026#34; highlight-secondary: \u0026#34;#4285f4\u0026#34; highlight-hover: \u0026#34;#5a95f5\u0026#34; background: \u0026#34;#131313\u0026#34; card-background: \u0026#34;#2b2b2b\u0026#34; text: \u0026#34;#eaeaea\u0026#34; text-header: \u0026#34;#ffffff\u0026#34; text-title: \u0026#34;#fafafa\u0026#34; text-subtitle: \u0026#34;#f5f5f5\u0026#34; card-shadow: rgba(0, 0, 0, 0.4) link-hover: \u0026#34;#ffdd57\u0026#34; # Optional navbar links: - name: \u0026#34;Github\u0026#34; icon: \u0026#34;fab fa-github\u0026#34; url: \u0026#34;https://github.com/Kyxie\u0026#34; target: \u0026#34;_blank\u0026#34; - name: \u0026#34;Blog\u0026#34; icon: \u0026#34;fas fa-file-alt\u0026#34; url: \u0026#34;https://kyxie.me\u0026#34; # Services services: - name: \u0026#34;Services\u0026#34; icon: \u0026#34;fas fa-server\u0026#34; items: - name: \u0026#34;aria2\u0026#34; icon: \u0026#34;fas fa-download\u0026#34; subtitle: \u0026#34;aria2 RPC Web UI\u0026#34; url: \u0026#34;http://192.168.2.218:6880\u0026#34; target: \u0026#34;_blank\u0026#34; - name: \u0026#34;OpenWRT\u0026#34; icon: \u0026#34;fas fa-wifi\u0026#34; subtitle: \u0026#34;OpenWRT Router\u0026#34; url: \u0026#34;http://192.168.2.66\u0026#34; target: \u0026#34;_blank\u0026#34; - name: \u0026#34;File Browser\u0026#34; icon: \u0026#34;fas fa-folder-open\u0026#34; subtitle: \u0026#34;File Browser\u0026#34; url: \u0026#34;https://file.kyxie.me\u0026#34; target: \u0026#34;_blank\u0026#34; - name: \u0026#34;Vaultwarden\u0026#34; icon: \u0026#34;fas fa-key\u0026#34; subtitle: \u0026#34;Vaultwarden Password Manager\u0026#34; url: \u0026#34;https://vault.kyxie.me\u0026#34; target: \u0026#34;_blank\u0026#34; - name: \u0026#34;Home Assistant\u0026#34; icon: \u0026#34;fas fa-home\u0026#34; subtitle: \u0026#34;Home Automation\u0026#34; url: \u0026#34;http://192.168.2.218:8123\u0026#34; target: \u0026#34;_blank\u0026#34; 启动容器，默认用户名密码为admin和admin\ndocker compose up -d Portainer Portainer是个专门用于管理Docker容器状态的管理面板，有点类似于网页版的Docker Desktop，我平时还是更多用命令行操作Docker，总之可以不用但是不能没有吧，下面是部署方式\ndocker-compose.yml：\nservices: portainer: image: portainer/portainer-ce:latest container_name: portainer restart: unless-stopped ports: - \u0026#34;9000:9000\u0026#34; volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data:/data Dashy Dashy和Homer很像（而且GitHub上作者头像的背景也很像不知道为什么），也是一个提供各个服务跳转的页面，而且提供了非常多小组件，且都很好看，作为一个Dashboard我觉得非常不错。\n创建docker网络dashy\ndocker network create dashy docker-compose.yml：\nservices: dashy: image: lissy93/dashy container_name: dashy ports: - \u0026#34;80:8080\u0026#34; volumes: - ./dashy-data:/app/user-data environment: - UID=1000 - GID=1000 restart: unless-stopped networks: - dashy healthcheck: test: [\u0026#39;CMD\u0026#39;, \u0026#39;node\u0026#39;, \u0026#39;/app/services/healthcheck\u0026#39;] interval: 1m30s timeout: 10s retries: 3 start_period: 40s networks: dashy: external: true 在启动之前要先创建一个文件夹dashy-data，然后在文件夹内创建一个conf.yml，原作者提供了很多例子详见：Example Config Files for Dashy · GitHub。\n启动容器\ndocker compose up -d 可以在conf.yml中加入custom css来隐藏footer\nappConfig: customCss: | .clock p.time { font-size: 3rem !important; } footer { display: none !important; } 如果要使用Dashy来监控系统信息，需要安装Glances，Glances在61280端口启动服务，然后Dashy读取信息，这里我把Glances加入了Dashy的Docker网络，详情参考：Widgets | Dashy\nglances: image: nicolargo/glances:latest container_name: glances restart: unless-stopped ports: - \u0026#34;61208:61208\u0026#34; volumes: - /var/run/docker.sock:/var/run/docker.sock:ro pid: host privileged: true environment: GLANCES_OPT: -w PUID: 1000 PGID: 1000 TZ: America/Toronto networks: - dashy Dashy最后配置出来还是非常好看的\n","permalink":"https://kyxie.me/zh/blog/tech/server/debian/dashboard/","summary":"现在服务器部署了这么多服务，忘记端口挺难找到对应的服务，因此有一个合适的管理页面也是挺不错的。最好有个Dashboard展示了所有服务的跳转","title":"使用Docker部署管理页面"},{"content":" ","permalink":"https://kyxie.me/zh/blog/tech/server/debian/umami/","summary":"","title":"使用Docker部署Umami"},{"content":" ","permalink":"https://kyxie.me/zh/blog/tech/server/debian/strava/","summary":"","title":"使用Docker部署Strava数据分析面板"},{"content":"背景 我移民加拿大走的是安省硕博通道，我申请加拿大移民的详细时间线详见：OINP移民加拿大🇨🇦时间线 | Kunyang\u0026rsquo;s Blog。可以看到安调已经很久了，期间我也使用了很多手段催促IRCC快点给我出结果，但是都没有什么用。这篇文章详细介绍一下我的催促手段以及强制令的教程。\n为什么会安调\n提交的材料造假 / 有问题 / IRCC觉得可疑 经历比较敏感，比如学习的专业为工程类，在加拿大以外读过书 但我认为更主要的原因就是运气，被安调就等于点背，我有朋友10043的本科丝滑下卡，有毕业了秒回国的也丝滑下卡，还有初中就来加拿大结果工签和PR双双被安调的 如何知道自己被安调了\n有一个专门跟踪申请的Tracker，和GCKey是单独的，可以单独注册一个。登陆进去后在浏览器点击F12，可以看到console中打印的信息，打开Object → relations → 0 → history，如果出现actStatus=17 \u0026amp;\u0026amp; key=Security就意味着安调开始，33和108好像是体检的开始和结束\n{ \u0026#34;actStatus\u0026#34;: 17, \u0026#34;actType\u0026#34;: 1, \u0026#34;dateCreated\u0026#34;: \u0026#34;2024-02-15T14:56:45.000Z\u0026#34;, \u0026#34;dateLoaded\u0026#34;: \u0026#34;2024-10-04T19:21:33.159Z\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;Security\u0026#34; } 去ATIP调档\n催促措施 Webform 没用，可以从这里提交Webform，然后IRCC大概一个周就会回你，告诉你你的case正在处理中，请耐心等待。不要每天都发一个Webform，IRCC会被问烦，控制频率。\nATIP 建议每隔一段时间就去ATIP调档一下，不仅能麻烦一下他们，让他们注意一下你的case，还能在将来强制令过程中作为证据，还能时刻了解一下自己case的progress。网上有好多调档的教程这里我就不再赘述了，强调一点就是有两种调档选择，一种是免费，另外一种要花$5，综合体验下来两种服务除了第二种比第一种贵$5以外没有任何区别。\n一般来说IRCC觉得你得被安调就把你的file丢给CBSA，大概率CBSA再丢给CSIS，一旦进了CSIS就是深度安调两年打底，如果只进了CBSA没进CSIS的话可能半年就出来了（这种比没安调还稀少，可以去买彩票了），可以先调档IRCC，然后再调CBSA，然后再调CSIS。\n现在调档越来越慢了，调档CSIS怎么着得半年起步。\nMP 给选区的议员发邮件，试过屁用没有，跟我说你的file正在被安调，没有办法。\nNSIRA 如果你的Case已经进了CSIS，就可以向NSIRA投诉CSIS处理的慢。\n先向Director of CSIS发送纸质邮件，抱怨一下处理得慢，保存好邮寄出去的信，后面还要用。Director of CSIS的地址为：\nDirector Canadian Security Intelligence Service P.O. Box 9732, Station “T”, Ottawa, Ontario K1G 4G4 如果60天之内没有收到CSIS的回复（我收到了Email），或者对收到的回复不满意，再向NSIRA投诉，重写一封信，加上CSIS的回复和第一次发给CSIS的信，邮寄给NSIRA，详见：CSIS Complaints - National Security and Intelligence Review Agency，地址为：\nNational Security and Intelligence Review Agency P.O. Box 2430 Station “D” Ottawa, Ontario K1P 5W5 具体有什么效果待更新\n强制令 说实话上面所有的手段几乎都没用，强制令就是直接让法院介入催促IRCC快点做决定了。虽然强制令是可以自己搞的，但是还是很建议找个律师弄，GPT写的东西和律师相比还是差的很远。\n强制令的流程是：\n立案阶段\n向法院提交立案申请 (ALJR)（强一）\n从Federal Court的E-Filling: Federal Court - Terms and conditions of use\nCase Information\nProceeding language: English Proceeding type: Immigration Proceeding subject: Non-Refugee Proceeding nature: Imm - Appl. for leave and judicial review Parties一个填自己，另外一个填Respondent，Individual，为IRCC\nDocument File就是你的强一\n可以选一个离你最近的法院，也可以随便选一个，甚至选别的省的都可以\nRespondent应该为IRCC的总部，也就是渥太华那个，地址为\nImmigration, Refugees, and Citizenship Canada Litigation Management Branch 11th Floor, 365 Laurier Avenue West Ottawa, Ontario K1A 1L1 Tel: (613) 437-6528 Fax: (613) 954-4285 Email: IRCC.LMDe-Fax-e-faxDGL.IRCC@cic.gc.ca 法庭发出缴费通知\n完成缴费，$50\n法庭接受申请，分配档案号，通知相关部门\n初步程序\n司法部提交应诉通知 (NOA) - ALJR送达后十天内 IRCC提交书面解释 (No Reason) - 立即进行 但是IRCC一般会赖着不交，后面改了规定不用等他发No Reason就可以直接递交强二Perfection了，但同时递交了强一一定要跟着强二 材料提交\n提交资料和论证 (Perfection) - 收到No Reason后三十天内，或立案75天内（强二） 强二的Perfection很关键，要认真写（最好还是找个律师），如果写得不好，比如被法官认为提供不了足够的理由会被Dismiss，也就是说你打官司告IRCC失败 不能重复提交强一，这样会被认为司法滥用 递交时Perfection的文件类型为Application Record 递交时需要同时提交Affidavit of Service，详见：Federal Court - E-Filing， 收到NOA之后会有一个DOJ，也就是IRCC方的律师，强二提交Perfection的时候有义务给这个律师发个邮件，告知我已经递交强二了 我尝试给律师本人发邮件，律师将我的邮件forward到了多伦多的DOJ的公用邮箱，为AGC_PGC_TORONTO.IMM@JUSTICE.GC.CA，所以应该直接给这个邮箱发送邮件 发邮件之后会受到对方的自动回复，然后把邮件记录放到Affidavit of Service，然后和Perfection一样需要再去做公证，最终提交给法院的是需要有章的 找公证的分为两种，一种是Notary Public，一种是Commissioner of Oaths。前者比后者更正式，可以用在国际范围内。我当时找他们盖章一个章$20，甚至有人报价一个章$40。但是等收到IRCC的回复之后发现对方也只用的Commissioner of Oaths，这种就比较简单了，在Service Ontario或者一些图书馆就可以做，有些甚至免费，可以打电话咨询一下附近的Service Ontario。 我自己提交的时候因为不知道有这个细节所以被法院打回来好几次，这个环节比较复杂所以还是推荐找个律师一起做，感觉我单独找公证官的费用虽然赶不上找律师，但是消耗了我大量的时间 司法部提交答辩资料 (Argument) - 收到Perfection起三十天内 提交回复 (Reply) - 收到Argument起十天内（强三） 强三又有别的人给我发邮件了，但是回复邮件的时候还是发送给AGC_PGC_TORONTO.IMM@JUSTICE.GC.CA，可以抄送到强二和强三的两个不同的律师。 审议和庭审，IRCC一般不会因为这个跟你上庭，因此进行到这之前一般就能出结果，否则需要找律师一起上庭了\n法庭审议 - 约三个月 拒绝申请 (Dismiss) - 申请结束，并不得上诉 同意申请 (Leave) - 进入庭审阶段 法庭通知移民局提供全部资料 移民局上传资料 - 约一个月 法庭安排庭审日期 - 约三个月 三方开庭Hearing 法庭判决 - 一周内 详见：Federal Court - How to file an Application for Leave and for Judicial review (Immigration)\n","permalink":"https://kyxie.me/zh/blog/pr/mandamus/","summary":"背景 我移民加拿大走的是安省硕博通道，我申请加拿大移民的详细时间线详见：OINP移民加拿大🇨🇦时间线 | Kunyang\u0026rsquo;s Blog。可以看到安调已经很久了，期间","title":"加拿大移民被安调经历"},{"content":"这是现在基本上所有电脑都能实现的功能了，无非就是后台自动搜索设备，然后自动挂载。可能这个场景在没有GUI版的Linux用处不大，因此每次插入U盘都得手动挂载一遍，于是决定写个脚本实现自动挂载。\n我们要实现的效果就是，插入U盘，系统自动把U盘挂载在/path-to-mount/label路径下，label是U盘的名称（注意不要插入两张Label名字相同的SD卡）。\n自动挂载 查看SD卡在miniPC的挂载路径\nlsblk 可以得到\nNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS sda 8:0 0 476.9G 0 disk ├─sda1 8:1 0 512M 0 part /boot/efi ├─sda2 8:2 0 475.5G 0 part / └─sda3 8:3 0 976M 0 part [SWAP] sdb 8:16 1 58.9G 0 disk └─sdb1 8:17 1 58.9G 0 part sdc 8:32 1 0B 0 disk 可以看到sdb1就是我的SD卡，但是目前还没有挂载\nsdb1为一个文件，他的位置在/dev/sdb1，我们找到这个SD卡的UUID\nsudo blkid /dev/sdb1 /dev/sdb1: LABEL=\u0026#34;Nikon-1\u0026#34; UUID=\u0026#34;4A21-0000\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;exfat\u0026#34; PTTYPE=\u0026#34;dos\u0026#34; 其中LABEL就是你给U盘的命名，插入U盘后电脑显示的U盘的名字。\n创建脚本/usr/local/bin/auto-mount-usb.sh\n#!/usr/bin/env bash logfile=\u0026#34;/var/log/udev-usb-label.log\u0026#34; mount_base=\u0026#34;/base-path-to-mount\u0026#34; exec \u0026gt;\u0026gt; \u0026#34;$logfile\u0026#34; 2\u0026gt;\u0026amp;1 logger \u0026#34;Auto-mount script triggered: $@\u0026#34; LABEL=\u0026#34;$1\u0026#34; [[ -z \u0026#34;$LABEL\u0026#34; ]] \u0026amp;\u0026amp; { logger \u0026#34;No LABEL provided\u0026#34; exit 1 } DEVICE=$(readlink -f \u0026#34;/dev/disk/by-label/$LABEL\u0026#34;) if [[ ! -b \u0026#34;$DEVICE\u0026#34; ]]; then logger \u0026#34;Device for label $LABEL not found\u0026#34; exit 1 fi MOUNTPOINT=\u0026#34;$mount_base/$LABEL\u0026#34; mkdir -p \u0026#34;$MOUNTPOINT\u0026#34; logger \u0026#34;Mounting $DEVICE to $MOUNTPOINT\u0026#34; if /usr/bin/mount -t auto -o uid=1000,gid=1000,umask=0022,iocharset=utf8 \u0026#34;$DEVICE\u0026#34; \u0026#34;$MOUNTPOINT\u0026#34;; then logger \u0026#34;Mounted $LABEL to $MOUNTPOINT successfully\u0026#34; else logger \u0026#34;Failed to mount $LABEL\u0026#34; exit 1 fi Log files放在了/tmp，重启后会自动清理 需要修改一下挂载点mount_base=\u0026quot;/base-path-to-mount\u0026quot;，假设我都放在/home/username/，每插入U盘，就会在这个文件夹下以U盘的Label为名字创建新的文件夹，注意不要插入两张Label相同的SD卡 刷新脚本权限\nsudo chmod +x ./auto-mount-usb.sh 创建systemd服务/etc/systemd/system/auto-mount-usb@.service\n[Unit] Description=Auto Mount USB LABEL=%i After=local-fs.target [Service] Type=oneshot ExecStart=/usr/local/bin/auto-mount-usb.sh %i 新建规则文件/etc/udev/rules.d/99-auto-usb-mount.rules\nACTION==\u0026#34;add\u0026#34;, SUBSYSTEM==\u0026#34;block\u0026#34;, ENV{ID_FS_LABEL}!=\u0026#34;\u0026#34;, ENV{SYSTEMD_WANTS}+=\u0026#34;auto-mount-usb@%E{ID_FS_LABEL}.service\u0026#34; 重新加载\nsudo udevadm control --reload-rules sudo udevadm trigger sudo systemctl daemon-reload 这样当你在Linux中新插入U盘后，就会在特定的位置新创建一个文件夹，然后访问你U盘的文件了\n卸载U盘 当希望拔出U盘时，一定要先卸载U盘，否则有可能造成文件损坏，我们这里还是先使用手动的卸载方法，输入命令\nsudo umount /path_to_disk 如果什么也不返回，就可以安全地插拔U盘了，如果挂载点被占用，可以查看被谁占用（注意如果终端在U盘路径内也会卸载不成功）：\nsudo lsof +D /path_to_disk 卸载之后在本地的文件夹不会删除，变成了普通的文件夹，如果需要可以手动删除。\nRaw文件 挂载U盘 / SD卡很大原因是为了配合File Browser自建文件浏览器，方便传送文件给朋友，比如我把相机插到miniPC上，朋友就可以访问和下载相机SD卡的照片。我的相机是Nikon Zfc，它可以配置拍一次照片导出一张RAW文件（.NEF）用于精修，一张.jpg用于预览。但是File Browser是无法在线预览RAW文件的。所以我们可以在/usr/local/bin/auto-mount-usb.sh脚本里添加一步，比如插入名为nikon-x的SD卡后自动把RAW文件挪到一个新建的子文件夹中，然后在File Browser里就可以分类显示.jpg和.NEF了。\n# ---------------- Nikon 文件分类逻辑 ---------------- if [[ \u0026#34;$LABEL\u0026#34; == nikon-* ]]; then logger \u0026#34;Detected Nikon device. Scanning for image files...\u0026#34; TARGET_DIR=\u0026#34;$MOUNTPOINT/DCIM/102NZ_FC\u0026#34; RAW_DIR=\u0026#34;$TARGET_DIR/RAW\u0026#34; JPG_DIR=\u0026#34;$TARGET_DIR/JPG\u0026#34; if [[ -d \u0026#34;$TARGET_DIR\u0026#34; ]]; then mkdir -p \u0026#34;$RAW_DIR\u0026#34; \u0026#34;$JPG_DIR\u0026#34; # 移动 RAW 文件 (.NEF) find \u0026#34;$TARGET_DIR\u0026#34; -maxdepth 1 -type f -iname \u0026#34;*.nef\u0026#34; -exec mv {} \u0026#34;$RAW_DIR\u0026#34; \\; # 移动 JPG 文件 find \u0026#34;$TARGET_DIR\u0026#34; -maxdepth 1 -type f -iname \u0026#34;*.jpg\u0026#34; -exec mv {} \u0026#34;$JPG_DIR\u0026#34; \\; logger \u0026#34;Finished organizing files into RAW and JPG folders\u0026#34; else logger \u0026#34;Target directory $TARGET_DIR not found. Skipping file classification.\u0026#34; fi fi LRF文件 同样大疆在拍摄视频之后会出现一个LRF文件和一个MP4文件，我们可以加入这条命令让其自动区分\n# ---------------- DJI 文件分类逻辑 ---------------- if [[ \u0026#34;$LABEL\u0026#34; =~ ^dji-[0-9]+$ ]]; then logger \u0026#34;Detected DJI device. Scanning for video and LRF files...\u0026#34; TARGET_DIR=\u0026#34;$MOUNTPOINT/DCIM/DJI_001\u0026#34; LRF_DIR=\u0026#34;$TARGET_DIR/LRF\u0026#34; MP4_DIR=\u0026#34;$TARGET_DIR/MP4\u0026#34; if [[ -d \u0026#34;$TARGET_DIR\u0026#34; ]]; then mkdir -p \u0026#34;$LRF_DIR\u0026#34; \u0026#34;$MP4_DIR\u0026#34; # 移动 .LRF 文件 find \u0026#34;$TARGET_DIR\u0026#34; -maxdepth 1 -type f -iname \u0026#34;*.lrf\u0026#34; -exec mv {} \u0026#34;$LRF_DIR\u0026#34; \\; # 移动 .MP4 文件 find \u0026#34;$TARGET_DIR\u0026#34; -maxdepth 1 -type f -iname \u0026#34;*.mp4\u0026#34; -exec mv {} \u0026#34;$MP4_DIR\u0026#34; \\; logger \u0026#34;Finished organizing DJI files into LRF and MP4 folders\u0026#34; else logger \u0026#34;Target directory $TARGET_DIR not found. Skipping file classification.\u0026#34; fi fi 注意事项 配合File Browser的Docker容器使用时，需要先挂载USB，然后再运行Docker容器，否则会找不到文件，如果容器已经运行，可以down再up重启一遍 这样脚本在插入USB后就会马上对文件进行分类，建议先做备份，然后再插入miniPC，以免造成文件丢失 假设有一部分未分类，有一部分已分类，程序会只把未分类的归类，反复插拔U盘不会造成影响 如果有相同名称的有可能会造成文件丢失，但是Nikon会按照快门数给照片分配ID，因此问题不大 ","permalink":"https://kyxie.me/zh/blog/tech/server/others/automount/","summary":"这是现在基本上所有电脑都能实现的功能了，无非就是后台自动搜索设备，然后自动挂载。可能这个场景在没有GUI版的Linux用处不大，因此每次插入","title":"使用udev自动挂载U盘"},{"content":"设置 选项 → 画面设置：\n分辨率：显示器的分辨率 垂直同步：关 景深模式：关 Nvidia DLSS超级分辨率：极致性能 全局画面质量：高 雾气质量设置：关闭 环境光遮蔽质量：关闭 全局光影质量：关闭 景深质量：关闭 动态模糊：关闭 右上角进入高级设置，向下滑动到阴影质量设置，地形阴影：取消 参考视频 《都市天际线2》天际线2需要什么配置能玩？可以玩到多少人口？为什么这么卡？一个视频带你了解天际线2/Cities: Skylines2 ","permalink":"https://kyxie.me/zh/blog/game/cities-skylines-ii/config/","summary":"设置 选项 → 画面设置： 分辨率：显示器的分辨率 垂直同步：关 景深模式：关 Nvidia DLSS超级分辨率：极致性能 全局画面质量：高 雾气质量设置：关闭 环境光遮蔽","title":"Cities Skylines II 画面设置"},{"content":"管理模组 Skyve\n一个管理其他模组的模组\n官方Mod平台下载后重启游戏，会有Install Skyve选项，可以安装Skyve\n之后再开始游戏前先打开Skyve检查模组的更新，再开始游戏\n前置模组 Unified Icon Library Asset Icon Library Extra Lib I18n EveryWhere 推荐 Move It\n参考视频：都市天际线2~神级模组move it重大更新！_实况解说 Find It\n直接搜索想要的各种元素 不要使用Find It摆放车辆，会造成寻路等bug 如果摆放建筑后不画功能区建筑会废弃，配合Plop the Growables模组一起使用 Better Bulldozer\n更好的推土机 Anarchy\n无碰撞 Traffic\n道路连线 Traffic Lights Enhancement Alpha\n红绿灯控制 Extended Tooltip\n鼠标移动到人物，建筑后展示非常详细的信息 Realistic Parking Mod\n真实停车模组，增加大楼的停车位 First Person Camera Continued\n第一人称视角浏览城市 Zone Organizer\n订阅大量资产包后，使低中高功能区变得整洁 Road Builder\n可以自定义道路 目前还在Beta版本，等稳定后可以考虑加入 参考视频：都市天际线2神级模组——road builder震撼来袭！_哔哩哔哩_bilibili 可选 Extra Landscaping Tools 自定义笔刷形状 添加自然资源 Water Features 水源工具 Extra Detailing Tools 更多美化资产工具，修改地皮，放置贴花 Asset Packs Manager 资产导入模组 资产编辑器上线时可能会被禁用 Extra Assets Importer 美化前置组件，用于导入资产 资产编辑器上线时可能会被禁用 Area Bucket 地皮切换模组 填充地皮 Asset Variation Changer 统一摆件颜色 Recolor 调色 Road Wear Remover 去除道路车辙印 Advanced Line Tool 自定义摆放物件，比如按照直线，圆等摆放公园长椅 Magic Taxi 使外部进入城市的出租车全部消失 不影响本地的出租车公司 No Dogs 没狗子了 Hall of Fame 截图，上传服务器，城展 主菜单的背景图会被替换成其他玩家的背景图 Tree Controller Static Ploppables 无属性资产摆件，造景党，只有大楼不住人，没有实际用途 Hide Buildings Notification 隐藏建筑物顶上的图标 参考视频 除了以上提到过的视频，以下是本篇文章还参考的视频：\n《都市天际线2》模组推荐合集！附带功能介绍，25年最新版本~/Cities: Skylines2_游戏热门视频 ","permalink":"https://kyxie.me/zh/blog/game/cities-skylines-ii/mods/","summary":"管理模组 Skyve 一个管理其他模组的模组 官方Mod平台下载后重启游戏，会有Install Skyve选项，可以安装Skyve 之后再开始游戏前先打开Sk","title":"Cities Skylines II 模组推荐"},{"content":"我这几天把本机装的MySQL密码给忘记了，于是想办法恢复\n打开并编辑配置文件my.cnf\nsudo vim /opt/homebrew/etc/my.cnf 在配置文件添加skip-grant-tables\n# Default Homebrew MySQL server config [mysqld] skip-grant-tables # Only allow connections from localhost bind-address = 127.0.0.1 mysqlx-bind-address = 127.0.0.1 重启服务\nsudo brew restart mysql 进入MySQL\nmysql -u root -p 刷新权限\nFLUSH PRIVILEGES; 修改账号密码\nALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;123456\u0026#39;; ","permalink":"https://kyxie.me/zh/blog/tech/others/recover-mysql/","summary":"我这几天把本机装的MySQL密码给忘记了，于是想办法恢复 打开并编辑配置文件my.cnf sudo vim /opt/homebrew/etc/my.cnf 在配置文件添加skip-grant-tables","title":"如何找回Homebrew下载的MySQL的密码"},{"content":"圣诞节之前去了趟坎昆四天三晚，写一写在坎昆踩的坑和旅游攻略。\n酒店我们选的是Haven Riviera All Inclusive，我个人感觉已经非常不错了，餐厅我也觉得很好吃。前三天都是一直呆在酒店，打算最后一天自驾去奇琴伊察。\n租车我租的机场附近的Enterprise，只选了这个大概USD$20的保险。其实墨西哥可能比较危险感觉不太适合自驾游，我算是比较作死的，确实在墨西哥开了一天让我大开眼界，有车快报废的，有开三蹦子上高速的，有限速80的单车道路开40的，有打右拐向灯左拐的，还有红绿灯给我擦车玻璃的（我以为我不给他钱他能掏枪，结果他看绿灯亮了直接让我走了）。\n换汇 以下内容全部为墨西哥比索，除非特别标注C$或USD$。\n我没有在加拿大提前换汇，而是尝试了两次在当地ATM直接取现金。本来想用EQ Bank，但是可能是我好久没有登录EQ的App了，到了墨西哥再登录需要让我验证手机号，这不惨了嘛我加拿大号码在墨西哥也收不到短信了。于是这次旅行尝试使用Wealthsimple Card。\n两次ATM取款WS只给了我一次Reimbursement，一共是C$1.81。我猜测是HSBC给我的，因为HSBC的transaction有很详细的信息，Santander就很简略。但是HSBC的手续费似乎又比Santander多3比索，一个是33，一个是35.84，具体细节只能下次再试试了。\n下表是两次取款的详细信息\nDate Bank MXN CAD Reimbursement Rate Dec 19, 2024 Santander 3033 231.81 0 13.08 Dec 20, 2024 HSBC 1035.84 74.62 1.81 14.22 如果直接拿信用卡消费的话\nDate Activity Card MXN CAD Reward Rate Dec 19, 2024 Uber WS 295.59 21.29 0.21 14.02 Dec 19, 2024 Supermarket WS 218.10 15.71 0.16 14.03 Dec 20, 2024 Enterprise Cobalt 760.12 55.23 55MR (0.88) 13.99 查了一下当天的汇率是13.94到14.14之间，WS基本上可以算作是免FX了。\n消费 其实汇率和FX也都是小事儿，我只是没想到墨西哥消费居然真的不低，本来觉得$3000完全足够了结果不够还是再取了一遍，来之前应该再仔细算一下计划好，总觉得就出去玩一天应该花不了什么钱。\n我们19号去机场的Enterprise取的车，然后吃的El Fogon del May，很推荐Taco很好吃，两个人消费大概$500隔壁还有超市有个很大的停车场。就是市中心实在是太堵了，Plaza Las Americas简直无敌堵，而且车都在乱开，而且这个Mall走进地下停车场就得要钱。我是真没想到工作日晚上也这么多人逛街。\n20号早晨我们早早地从酒店check out，然后开车去奇琴伊察，奇琴伊察8:am开门，我们差不多8:30到，我没想到的是从坎昆到奇琴伊察高速是$385 + $94 = $479。是分两个收费站收的，其中第二个收费站离奇琴伊察非常近也就10min的距离。我们把车停到了景区门口的私人停车场（这个交叉口右拐），停车应该是$50，步行大概5min，我感觉比停到官方停车场要好不少。如果停到官方的停车场应该是$130。奇琴伊察的门票是$548 + $95 = $643，进门要查包，我忘记啥不能带了但是我的大疆Action 4带进去了。一定要早去，我看完的时候门口车排队排成长龙，而且停车费都涨价了。\n去完奇琴伊察后又去了IkKil天坑，我不太会游泳但是穿着救生衣也能飘起来，还尝试了跳水。如果下水要带着泳衣，里面有换衣服的地方和存包柜。可以提前买个手机的防水套，用于拍照什么的。这里要下去的话不让穿鞋，似乎可以穿水鞋但我没有，我光脚下去的时候感觉石头超级硌脚，门票是$200。\n回去的时候因为时间充裕，决定探险一把没走高速，走了无数个鸡飞狗跳的小村子，中间在Valladolid吃个饭，这个村有好多五彩斑斓的房子。路上真的好多狗啊，而且每过一个村子就有警察把守，应该是缉毒警察。可能我比较幸运，这些警察看我们是亚洲面孔基本上都放我们走了，也没有遇见黑警。\n快到坎昆的时候导航推送了一条小路，但是这条小路被人拦起来私自收过路费，我选择没交，事后发现确实绕了好大一块距离，而且右边这个往南走的路特别不好走，没有路灯就一条道（窄得我一开始以为是单行道），地上还很多坑。\n最后到Enterprise对面的加油站加油，没想到的是加满整整花了$1000，这时我花的一毛比索都没有了，油表显示到$1000的时候我还没来得及停住，看表到$1015左右我又给补了USD$1。Enterprise有到机场的shuttle bus，我们还了车之后很快被送到机场了，过完安检走到登机口的时候几乎是下一秒就开始登机了。好在是有惊无险得回到了多伦多。\nFooter 由于时间紧促，还没去X Park，我觉得我明年冬天应该还会来的，等到时候在继续补充。\n","permalink":"https://kyxie.me/zh/blog/tour/cancun/","summary":"圣诞节之前去了趟坎昆四天三晚，写一写在坎昆踩的坑和旅游攻略。 酒店我们选的是Haven Riviera All Inclusive，我个人感觉已经非常不错了，餐厅我","title":"Cancun旅行游记"},{"content":"使用U盘安装系统之后U盘经常会被划分为多个分区，下面使用MacOs和Windows分别合并为一个分区并且格式化。\nMacOs 详见：使用树莓派4B+安装OpenWrt用作旁路由 | Kunyang\u0026rsquo;s Blog\nWindows 打开命令行\ndiskpart 列出磁盘\nlist disk Disk ### Status Size Free Dyn Gpt -------- ------------- ------- ------- --- --- Disk 0 Online 931 GB 1024 KB * Disk 1 Online 931 GB 1024 KB * Disk 2 Online 7696 MB 5050 MB * 选中磁盘，注意别选错了\nsel disk 2 清理\nclean 列出磁盘再看一眼\nDisk ### Status Size Free Dyn Gpt -------- ------------- ------- ------- --- --- Disk 0 Online 931 GB 1024 KB * Disk 1 Online 931 GB 1024 KB * * Disk 2 Online 7696 MB 7695 MB * Win + X打开Disk Management，找到U盘新建简单卷，按照默认步骤一步一步来即可\n","permalink":"https://kyxie.me/zh/blog/tech/others/format-usb/","summary":"使用U盘安装系统之后U盘经常会被划分为多个分区，下面使用MacOs和Windows分别合并为一个分区并且格式化。 MacOs 详见：使用树莓派4B+安装","title":"USB多个分区格式化"},{"content":"PVE安装步骤 官网下载PVE 使用Etcher烧写镜像到U盘 HDMI线连接到显示器，键盘鼠标连到mini PC，插入U盘，启动主机 按F7进入Bios，选择U盘安装 选择Graphical安装，配置IP地址，用户名密码，按照提示一步一步来 安装完成后将mini PC插入路由器，然后进入\u0026lt;pve_ip_address\u0026gt;:8006进入PVE Web Manager，用户名为root，密码为刚才设置的密码 OpenWrt安装步骤 编译OpenWrt系统 编译就不多说了，使用GitHub进行云编译，这里记录一下.config\nTargetSystem: - x86 Subtarget: - x86_64 TargetProfile: - Generic x86/64 TargetImages: - squashfs - Build GRUB images - Use Console Terminal (in addition to Serial) - GZip images LuCI: Themes: - luci-theme-agron Applications: - luci-app-accesscontrol - luci-app-adguardhome - luci-app-arpbind - luci-app-banip - luci-app-ddns - luci-app-filetransfer - luci-app-firewall - luci-app-frpc - luci-app-ksmbd - luci-app-nlbwmon - luci-app-opkg - luci-app-passwall - luci-app-samba - luci-app-sqm - luci-app-statistics - luci-app-upnp - luci-app-vnstat - luci-app-vsftpd - luci-app-wol - luci-app-zerotier Protocols: - luci-protocol-wireguard Network: IP Addresses and Names: - ddns-scripts-cloudflare - drill - tcpdump Utilities: - qrencode 创建虚拟机 编辑VM ID, Name，我填了100和OpenWrt\n系统选择Do not use any media\nDisks删除，暂时使用No Disks\n核心数选择2 Cores\n内存设置为1024M\n创建完成后点击运行VM，我们就可以进入OpenWrt的命令行界面了，按照使用树莓派4B+安装OpenWrt用作旁路由 | Kunyang\u0026rsquo;s Blog修改IP地址\n上传镜像 直接使用scp将编译好的openwrt-x86-64-generic-squashfs-combined.img.gz上传，要上传到/var/lib/vz/template/iso/这个目录\nscp .\\openwrt-x86-64-generic-squashfs-combined.img.gz root@192.168.2.100:/var/lib/vz/template/iso 注意要使用-combined.img.gz这个文件\n解压文件\ngzip -d openwrt-x86-64-generic-squashfs-combined.img.gz 挂载为虚拟机的磁盘\nqm importdisk \u0026lt;vm_id\u0026gt; openwrt-x86-64-generic-squashfs-combined.img local-lvm 出现successfully imported disk 'local-lvm:vm-100-disk-0'就是成功了\n在Options → Boot Order将这块磁盘选中，并设置为第一启动顺序\n完事儿之后可以把.img文件删除\nDebian安装步骤 可以直接在官网下载Debian镜像，进入PVE管理后台，在pve → local (pve) → ISO Images上传镜像（对应位置在/var/lib/vz/template/iso/），安装完后不要删除这个镜像 Disk Size我选了256GB，核心数选择了4核心，因为我的N100本身就是4核心，内存设置为了12GB 安装完之后的.iso文件不能删除 PVE优化 使用了人人都在用的老虎大佬的脚本\nwget -q -O /root/pve_source.tar.gz \u0026#39;https://bbs.x86pi.cn/file/topic/2024-01-06/file/24f723efc6ab4913b1f99c97a1d1a472b2.gz\u0026#39; \u0026amp;\u0026amp; tar zxvf /root/pve_source.tar.gz \u0026amp;\u0026amp; /root/./pve_source PVE关机 最后强调一下如果服务器想要关机的话一定要每个子系统都单独关机一次，直接把电源有可能会造成不可挽回的后果，毕竟PVE是虚拟的。如果害怕家里突然停电可以买个UPS电源\n这篇文章参考了视频：\n\u003c!DOCTYPE HTML\u003e ","permalink":"https://kyxie.me/zh/blog/tech/server/others/pve/","summary":"PVE安装步骤 官网下载PVE 使用Etcher烧写镜像到U盘 HDMI线连接到显示器，键盘鼠标连到mini PC，插入U盘，启动主机 按F7进入Bi","title":"x86 Mini PC安装PVE"},{"content":"需要准备 显示器 HDMI线连接显示器 键盘 至少8GB的U盘 网线 装系统 Ubuntu或Debian官网下载镜像 准备一个至少8GB的U盘，安装Etcher，按照流程将Ubuntu镜像烧写到U盘中 将U盘插入PC，启动，然后不断点击F7键，不同的主板按键不同，然后进入Bios 我需要将整个磁盘都分配给Ubuntu，后续也不折腾的话可以不选择LVM Group，这样只会产生两个分区，/和/boot/efi 后面的无脑填就可以了，等到进入系统 Ubuntu 24.04 我打算将一个网口连接在路由器上，因此需要修改默认的IP地址\n首先ip addr查看当前的地址信息\n我们打算把enp0s1的IP地址修改为192.168.2.66，然后默认网关为主路由器192.168.2.1。我们需要编辑文件01-netcfg.yaml，没有的话就新建\nnetwork: version: 2 renderer: networkd ethernets: enp1s0: dhcp4: no addresses: - 192.168.2.66/24 routes: - to: default via: 192.168.2.1 nameservers: addresses: - 8.8.8.8 - 8.8.4.4 如果提示Permission too open，则修改权限\nsudo chmod 600 /etc/netplan/01-netcfg.yaml 应用Netplan配置\nsudo netplan apply 重启网络服务（可选）\nsudo systemctl restart systemd-networkd 插入网线，验证配置\nip addr Debian 12 首先查看网卡名称\nip addr 我的是ens18\n编辑文件/etc/network/interfaces\n# This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto ens18 iface ens18 inet static address 192.168.2.111/24 # 本机的IP地址 network 192.168.2.0 broadcast 192.168.2.255 gateway 192.168.2.1 dns-nameservers 8.8.8.8 如果你的Linux是Wi-Fi连接，一样的\n# This file describes the network interfaces available on your system # and how to activate them. For more information, see interfaces(5). source /etc/network/interfaces.d/* # The loopback network interface auto lo iface lo inet loopback # The primary network interface auto wlp2s0 allow-hotplug wlp2s0 iface wlp2s0 inet static address 192.168.2.111 # 本机的IP地址 netmask 255.255.255.0\t# Mask gateway 192.168.2.1\t# 网关 dns-nameservers 192.168.2.1\t# DNS wpa-ssid YourWiFiSSID wpa-psk YourWiFiPassword 重启网络服务\nsudo systemctl restart networking.service 其他配置 剩下的就是一些基本的其他配置了\n安装sudo\nsu root apt install sudo # 将用户添加到sudo组 sudo usermod -aG sudo username # 免密码 sudo visudo # 修改文件内容 %sudo ALL=(ALL:ALL) NOPASSWD: ALL 安装vim\nsudo apt install vim 更换时区\nsudo timedatectl set-timezone America/Toronto 安装Openssh\nsudo apt update sudo apt install openssh-server 安装Docker，详见：将OpenWrt制作为Docker镜像 | Kunyang\u0026rsquo;s Blog\n切换zsh\n下载\nsudo apt update sudo apt install zsh git curl -y sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; # 自动建议插件 git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions # 语法高亮插件 git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/zsh-syntax-highlighting 配置\ncat \u0026gt; ~/.zshrc \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; export ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; # ZSH_THEME=\u0026#34;robbyrussell\u0026#34; ZSH_THEME=\u0026#34;philips\u0026#34; plugins=( git docker docker-compose zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH/oh-my-zsh.sh # 插件手动加载（路径确保和上面 clone 的一致） source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh # 常用 alias alias ll=\u0026#39;ls -alF\u0026#39; alias la=\u0026#39;ls -A\u0026#39; alias l=\u0026#39;ls -CF\u0026#39; alias grep=\u0026#39;grep --color=auto\u0026#39; EOF 刷新\nsource ~/.zshrc ","permalink":"https://kyxie.me/zh/blog/tech/server/others/linux-server/","summary":"需要准备 显示器 HDMI线连接显示器 键盘 至少8GB的U盘 网线 装系统 Ubuntu或Debian官网下载镜像 准备一个至少8GB的U盘，安装Etch","title":"使用U盘安装Linux Server"},{"content":"安装Docker 按照Docker官网的教程，我们首先卸载所有冲突的包，apt-get可能会提示没有安装这些包\nUbuntu\nfor pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done Debian\nfor pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置Docker的apt储存库\nUbuntu\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update Debian\n# Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 安装Docker\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 编译 编译就不多说了，使用GitHub云编译，编译完成后在Release中能找到 openwrt-x86-64-generic-rootfs.tar.gz文件，我们把它下载下来制作成Docker镜像。\n制作为Docker镜像 这一步其实也完全并入GitHub Actions中，我暂时先手动制作，等有时间了再更新GitHub Actions。\n制作Dockerfile\nFROM scratch ADD openwrt-x86-64-generic-rootfs.tar.gz / WORKDIR / CMD [\u0026#34;/sbin/init\u0026#34;] 制作Docker镜像\ndocker build -t openwrt:latest . 在Linux上部署 由于macvlan限制了宿主机和Docker容器之间的通信，我执行完这些命令之后还是无法ping通OpenWrt的IP地址，以下内容仅作为个人记录。\n假设我的lan口为enp0s1，开启混杂模式\nip link set enp0s1 promisc on 设置macvlan\ndocker network create -d macvlan \\ --subnet=192.168.2.0/24 \\ --gateway=192.168.2.1 \\ -o parent=enp0s1 \\ wrt_lan 启动OpenWrt镜像\ndocker run -d --name openwrt \\ --net wrt_lan \\ --ip 192.168.2.66 \\ --privileged \\ openwrt /sbin/init 进入OpenWrt容器内将LAN口修改为静态IP地址\ndocker exec -it openwrt sh 然后编辑/etc/config/network\nvi /etc/config/network 修改为以下内容\nconfig interface \u0026#39;lan\u0026#39; option type \u0026#39;bridge\u0026#39; option ifname \u0026#39;eth0\u0026#39; option proto \u0026#39;static\u0026#39; option netmask \u0026#39;255.255.255.0\u0026#39; option ip6assign \u0026#39;60\u0026#39; option ipaddr \u0026#39;192.168.2.66\u0026#39;\t# OpenWrt的IP地址 option gateway \u0026#39;192.168.2.1\u0026#39;\t# 局域网主路由 option dns \u0026#39;192.168.2.1\u0026#39;\t# 局域网主路由 重启OpenWrt网络服务\n/etc/init.d/network restart ","permalink":"https://kyxie.me/zh/blog/tech/server/others/docker-openwrt/","summary":"安装Docker 按照Docker官网的教程，我们首先卸载所有冲突的包，apt-get可能会提示没有安装这些包 Ubuntu for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg;","title":"将OpenWrt制作为Docker镜像"},{"content":"Mac用户非常推荐使用Homebrew来安装一些软件，就Python来说如果在官网直接下载会在Launch Pad出现IDLE和Python Launcher两个图标，个人感觉很丑。\n其实MacOS Catalina只有系统就预装了Python3了（在这之前是Python2），如果只想处理一些基本的Python功能直接用系统自带的就好了，但是为了方便版本控制还是挺推荐使用Homebrew再下载一个版本方便管理，避免影响系统的Python。\n安装步骤 首先需要安装Xcode Command Line Tools，Homebrew依赖这些工具来正常工作，可以在命令行直接输入命令。其实安装完这个git也就顺带着一起安装了，但是一样的道理，还是推荐使用Homebrew再安装一个版本的git。\nxcode-select --install 安装Homebrew\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 可能需要输入密码\n验证安装以及更新到最新版本\nbrew -v brew update 安装Python\nbrew install python 这时系统里可能有两个Python，我们需要指定使用哪个Python\nwhich python3 /usr/bin/python3\t# 出现这个就是还在用系统自带的python 我们找到通过Homebrew安装的Python的位置\nbrew --prefix python /opt/homebrew/opt/python@3.13 打开环境变量配置文件，MacOS Catalina之后默认为zsh\nvim ~/.zshrc 在最后一行加入\nexport PATH=\u0026#34;/opt/homebrew/opt/python@3.13/bin:$PATH\u0026#34; 保存，刷新file\nsource ~/.zshrc 然后再查看一下当前使用的哪个Python版本\nwhich python3 /opt/homebrew/opt/python@3.13/bin/python3\t# Homebrew版本 安装git\nbrew install git 验证安装\ngit -v 一般来说git不会出现像Python一样设置PATH的问题。\n配置git的邮箱和用户名，如果要使用GitHub来管理仓库的话，要保持这个邮箱和用户名和GitHub一致\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; ","permalink":"https://kyxie.me/zh/blog/tech/others/python-and-git-for-macos/","summary":"Mac用户非常推荐使用Homebrew来安装一些软件，就Python来说如果在官网直接下载会在Launch Pad出现IDLE和Python L","title":"使用Homebrew在M芯片的MacBook安装Python和Git"},{"content":"最近有一个项目需要使用GUI，又希望放在云端自动运行。一开始是打算用Windows的instance，尝试了一下基本上下载一个chrome都卡，AWS的免费用户又只能使用只有命令行的Ubuntu server。然后突发奇想诶我可不可以在Ubuntu server上安装一个GUI，查了一下这个方法似乎可行（其实还是不太可行，我已经打算放弃折腾了，不过倒是成功装上了GUI）。\n安装xrdp并enable，安装GUI就需要远程桌面系统，这是Linux的客户端\nsudo apt-get update sudo apt install xrdp -y sudo systemctl enable xrdp 我首先尝试的是gnome，尝试发现这个消耗资源太严重了，免费版用户用起来应该跟Windows一样卡\nsudo add-apt-repository ppa:gnome3-team/gnome3 sudo apt-get install gnome-shell ubuntu-gnome-desktop 后来我决定试试更轻量化的XFCE\napt install xfce4 xfce4-goodies xorg dbus-x11 x11-xserver-utils -y adduser xrdp ssl-cert systemctl restart xrdp 设置密码（AWS的话会需要）\nsudo passwd ubuntu 在EC2 Security group中选择Allow All Traffic\n在MacBook中应用商店下载Windows App，这是Window开发的远程桌面应用，有一说一Windows给Mac开发的软件是真不错\n选择Add a PC，Computer使用AWS提供的DNS，用户名一般为ubuntu，密码为刚才设置的密码\n之后就可以连接上了\n但是尽管XFCE已经很轻量化了，我下载完Chrome之后还是觉得卡，于是放弃折腾了，AWS免费版用户不推荐这么做。\n","permalink":"https://kyxie.me/zh/blog/tech/others/aws-server-gui/","summary":"最近有一个项目需要使用GUI，又希望放在云端自动运行。一开始是打算用Windows的instance，尝试了一下基本上下载一个chrome都","title":"AWS Server安装GUI"},{"content":"常用链接 实时枫叶变色情况以及历史数据 预定门票，门票$21一天，可以提前5天预定 安省枫叶地图 阿冈昆公园地图 推荐的景点 周边：\n白求恩故居 Lions Lookout Dorset Lookout Tower: 印象里这个好像要收费 Big Bend Lookout 60号公路：\n13.8km: Hardwood Lookout Trail: 环形trail（1.61km, 85m, 34min），路上会有向右箭头指示trail的方向，如果想直接看Lookout可以不跟着箭头反着走，即向左走 20km: Art Center \u0026amp; Source Lake: 无需徒步，建议穿白色和浅蓝色的衣服 25km: Track \u0026amp; Tower Trail: 环形Trail（8km, 273m, 2h23min），难度比较高，但是和Booth\u0026rsquo;s Rock Trail风景有一拼 35km: Lake of Two Rivers: 是个沙滩，可以野餐 38km右拐: Centennial Ridges Trail: 环形trail（12.2km, 550m, 4h6min） 39.7km: Algonquin Lookout Trail: 环形trail（2.1km, 71m, 37min） 40.5km右拐: Booth\u0026rsquo;s Rock Trail: 环形trail（5.8km, 232m, 1h51min），需要预约车位 43km: Visitor Center 45km: Beaver Pond Trail: 环形trail（1.9km, 66m, 34min)，但是不知道为什么我感觉这个最累，可能每次都放在最后一个走 50km: Brewer Lake: 不需要徒步，路边停车所以停车位有限，适合长焦拍风景 Footer 最后放几张照片吧\n\u003c!DOCTYPE html\u003e Art Center Found Lake ","permalink":"https://kyxie.me/zh/blog/tour/algonquin/","summary":"常用链接 实时枫叶变色情况以及历史数据 预定门票，门票$21一天，可以提前5天预定 安省枫叶地图 阿冈昆公园地图 推荐的景点 周边： 白求恩故居 Lions Lookout Dorset Lookout Tower:","title":"Algonquin旅行游记"},{"content":"最近我妈来了加拿大，打算带她去Calgary和Banff旅行，发现Banff旅游真的好多坑啊，正好写一篇游记博客，顺便记录一下Banff旅游攻略。\n首先是一些注意事项：\n进入Banff需要购买国家公园Pass，一天CAD$22，有效期到第二天的下午4点（因为4点查票的人就下班了）。我们Sep 19下午5点多才从Calgary提车，在Canmore和Banff之间有一个检票亭子（左侧道路是卖票亭，右侧道路可以bypass），我们从网上买了Sep 20开始的Pass，当我们路过的时候大概是晚上9点，但是还是补上了Sep 19号的（下次打算12点之后再试试，说不定就不用交当天的门票了）。网上买完Pass之后需要打印下来，放在租车玻璃前。 Lake Louise到Jasper以北都没有信号，出发前需要下载谷歌离线地图（开车强烈推荐Apple自带的地图）。 路上也没啥加油站，在大城市需要把油加满。 Sep 19 9.18晚上飞到的Calgary，然后9.19打算去购物，Alberta 5%的税是真香啊。下午5点去Enterprise租车（我终于满25岁了可以不用再交Yonge Driver Fee了，而且Cobalt的信用卡还自带租车保险简直美滋滋），然后准备出发去Banff，由于很早就定了YWCA酒店，所以价格也算是挺便宜的。\nSep 20 我们从这里买的套票，包含了Banff硫磺山的Gondola，冰原探险，和Golden的Skybridge。由于我们之前打算去Jasper的，结果野火把Jasper给烧了，我们不得不改变行程住在Golden，正好这票里的Golden Skybridge也派上了用场，还可以自由安排去各个景点的时间。\n但是有一点需要注意的是，在网上买票如果没有定下具体时间的话是需要到现场schedule的，举个例子，我们本来计划起床后在Banff转转，因为YWCA外边就是瀑布花园（Cascade of Time Garden），吃点饭去惊喜角（Surprise Corner Viewpoint），然后路上路过的湖（Hector Lake Viewpoint, Bow Lake, Peyto Lake）也可以游玩。这样到达冰原中心就大概1点多了，检票的时候告诉我们最早能坐3点的车，白白浪费两个小时。所以建议早晨先去冰原中心，观光完可以在游客中心吃个饭，然后回来的路上（如果晚上住在Canmore或者Banff的话）再顺着湖游玩（有人说下午2点左右是Peyto湖的最佳观赏时间）。\n虽然三四十年后Athabasca Glacier可能会消失，但是我觉得CAD$109的票价有点贵了，大部分时间都是在等车，到了冰原上只有半个小时的拍照时间。\n这天晚上我们住在了Canmore，Canmore景色真的很不错！\nSep 21 这天早晨我们从Canmore出发，逛了Banff镇，Banff Gondola（注意这里网上买了票，到现场也需要schedule，但是我们11:50的缆车，11:00排队没啥人我们就直接上了，不需要像冰原中心傻等）逛了逛Banff镇，然后下午就向Golden出发。下午到了Golden后游览了Golden Skybridge。\n其实Banff Gondola完全可以走着爬硫磺山，然后下缆车一般不检票，再坐缆车下山，Golden Skybridge更是完全没有玩的必要。\nSep 22 22号计划去Lake Louise和Moraine Lake，这两个地方需要提前两天预定Shuttle Bus否则无法停车，这个Shuttle Bus的出发地是Park and Ride - Lake Louise and Moraine Lake Bus Shuttle (1 Whitehorn Rd, Lake Louise, AB T0L 1E0)。由于我们头天晚上住在Golden，因此计划早起开车到这个停车场，然后坐车。在官网中点击Parks Canada shuttles，然后选择Day Use, Shuttle to Lake Louise and Moraine Lake，选好日期就可以预定了。后面选择会有两个，Lake Louise和Moraine Lake，这两个票买哪个都可以，选择哪个湖就是从滑雪场先去哪个湖，注意这里的时间则跟冰原中心一样，网上预约的几点就是几点发车，没错我们又在游客中心傻等了。我们先去的Moraine Lake再去的Lake Louise。Lake Louise旁边有一个Trail可以俯瞰费尔蒙酒店，难度也不大很合适。\n我们晚上是住在Lake Louise的，这是个非常错误的决定，应该前一天在这住，第二天逛完后住在哪里都可，这样就不需要像我们一样早起从Golden赶过来了。\nSep 23 今天是Banff旅行的最后一天，我们从Lake Louise出发看了看Morant\u0026rsquo;s Curve就回卡尔加里还车了。Morant\u0026rsquo;s Curve需要从Lake Louise不上Hwy1，走北边一条路，这条路能见到不少野生动物，所以最好慢点开车，不走hwy也非常有意思。我们见到了小鹿，但是可惜没有见到熊。这条小路可以通往Johnson Canyon，但是后面的路被封了，我其实挺想一直慢点走走到Banff的，如果不去Johnson Canyon的话提前从Castle Junction拐出来（听导航的话）。\nFooter 由于Jasper被火烧 -\u0026gt; 酒店选择错误 -\u0026gt; 在路上消耗的时间比较多 + 游客中心傻等，感觉还是白白浪费了不少时间。看来Banff的坑还是比较多的，下次的话争取合理安排时间多走几个Trail。\n但是无论如何Banff实在是太美啦！！放几张风景照\n\u003c!DOCTYPE html\u003e Lake Louise Lake Louise Fairmont Viewpoint Morant\u0026#39;s Curve Banff Canmore Bow Lake Moraine Lake ","permalink":"https://kyxie.me/zh/blog/tour/banff/","summary":"最近我妈来了加拿大，打算带她去Calgary和Banff旅行，发现Banff旅游真的好多坑啊，正好写一篇游记博客，顺便记录一下Banff旅游","title":"Banff旅行游记"},{"content":" 假设我们有两台Linux虚拟机A和B，使用A和B互相充当Server和Client\nTLS模式 假设我们使用A来充当server，B来充当client\nTLS Server 在A中下载OpenVPN\nsudo apt-get install openvpn 在/usr/share/doc/openvpn/examples/sample-keys/文件夹下有好多keys，在server中，复制ca.crt，server.key，server.crt，dh2048.pem到/etc/openvpn/tls-server\nsudo cp /usr/share/doc/openvpn/examples/sample-keys/{ca.crt,server.key,server.crt,dh2048.pem} /etc/openvpn/tls-server 编写服务器配置文件\nport 1194 proto udp dev tun0 ca ca.crt cert server.crt key server.key dh dh2048.pem server 10.8.0.0 255.255.255.0 keepalive 10 120 user nobody group nogroup persist-key persist-tun verb 3 如果使用TCP连接，则修改为\nport 1194 proto tcp-server dev tun0 ca ca.crt cert server.crt key server.key dh dh2048.pem server 10.8.0.0 255.255.255.0 keepalive 10 120 user nobody group nogroup persist-key persist-tun verb 3 启动OpenVPN Server\ncd /etc/openvpn/tls-server sudo openvpn --config server.conf 这时如果查看IP地址可以看到tun0接口，地址是10.8.0.1\nTLS Client 在B中下载OpenVPN\nsudo apt-get install openvpn 在A中/usr/share/doc/openvpn/examples/sample-keys/下找到ca.crt，client.key，client.crt，复制到B中\n# In B sudo scp [A_usrname]@[A_addr]:/usr/share/doc/openvpn/examples/sample-keys/{ca.crt,client.crt,client.key} /etc/openvpn/tls-client 编写server.conf\nclient dev tun0 remote [A_addr] 1194 udp ca ca.crt cert client.crt key client.key user nobody group nogroup persist-key persist-tun verb 3 如果是TCP连接则\nclient dev tun0 remote [A_addr] 1194 tcp-client ca ca.crt cert client.crt key client.key user nobody group nogroup persist-key persist-tun verb 3 运行OpenVPN Client\ncd /etc/openvpn/tls-client sudo openvpn --config client.conf 这时如果执行\nping 10.8.0.1 成功，说明OpenVPN成功建立\nPSK模式 PSK模式不需要配置复杂的keys，比较简单，但是安全性也会随之降低，这里我们同样让A充当Server，B充当Client\nPSK Server 在A中生成psk.key，并且复制一份给B\n# In A cd /etc/openvpn/psk-server openvpn --genkey --secret psk.key # In B cd /etc/openvpn/psk-client scp [A_usrname]@[A_addr]:/etc/openvpn/psk-server/psk.key . 编写server.conf\ndev-type tun dev tun0 ifconfig 10.8.0.6 10.8.0.1 keepalive 10 120 persist-tun secret psk.key verb 0 # proto tcp-server 如果是TCP连接，则取消注释最后一行\n启动OpenVPN\ncd /etc/openvpn/psk-server sudo openvpn --config server.conf PSK Client 编写client.conf\ndev-type tun dev tun0 remote [A_addr] 1194 udp ifconfig 10.8.0.1 10.8.0.6 keepalive 10 120 persist-tun secret psk.key verb 0 如果是TCP连接\ndev-type tun dev tun0 remote 10.10.200.120 1194 tcp-client ifconfig 10.8.0.1 10.8.0.6 keepalive 10 120 persist-tun secret psk.key verb 0 ","permalink":"https://kyxie.me/zh/blog/tech/others/openvpn/","summary":"假设我们有两台Linux虚拟机A和B，使用A和B互相充当Server和Client TLS模式 假设我们使用A来充当server，B来充当cli","title":"OpenVPN的简单配置"},{"content":"通过使用ssh keys我们可以免密登录Linux（且推荐这么使用），这样以后ssh到Linux的时候就不需要每次填写密码了。\n生成密钥对 可以在任何地方生成，客户端，服务器，第三方，甚至在Vaultwarden方便管理，只要保证不要随意泄露即可，Windows / Mac / Linux可以输入命令\nssh-keygen 一般会生成在C:\\Users\\Username\\.ssh\\，而且都是成对生成的，会有一个公钥id_rsa.pub或者id_ed25519.pub和一个私钥\nServer Server端需要保留公钥，Client端保留私钥（不能泄露）\n在Linux中查看是否有.ssh目录，如果没有则新建\ncd ~ mkdir -p ~/.ssh chmod 700 ~/.ssh 将公钥上传到Linux，也可以直接复制粘贴\ncd C:\\Users\\Username\\.ssh\\ scp .\\id_rsa.pub username@address:~/.ssh scp .\\id_ed25519.pub username@address:~/.ssh 在Linux中查看是否有authorized_keys文件，如果没有则新建\ncd ~/.ssh touch authorized_keys chmod 600 ./authorized_keys cat id_rsa.pub \u0026gt;\u0026gt; ./authorized_keys cat id_ed25519.pub \u0026gt;\u0026gt; ./authorized_keys 添加完之后就可以将公钥删除了\ncd ~/.ssh rm id_rsa.pub rm id_ed25519.pub Client Client端可以在config文件指定密钥对，Windows在C:\\Users\\Username\\.ssh\\config\nHost host1\t# Server主机名 HostName hostname1 # Server的IP地址或者URL User admin\t# USer IdentityFile \u0026#34;C:\\Users\\Username\\.ssh\\id_ed25519\u0026#34;\t# 本机私钥地址 Host host2 HostName hostname2 User admin IdentityFile \u0026#34;C:\\Users\\Username\\.ssh\\id_pem\u0026#34; 如果没指定，默认使用id_ed25519的私钥，且一个id_ed25519文件只能存一个私钥\n配置完成后就可以免密码登录Linux了。\n","permalink":"https://kyxie.me/zh/blog/tech/server/others/keys/","summary":"通过使用ssh keys我们可以免密登录Linux（且推荐这么使用），这样以后ssh到Linux的时候就不需要每次填写密码了。 生成密钥对 可以在","title":"使用Keys免密ssh到Linux"},{"content":"Linux 下载OpenLDAP：\nsudo apt update sudo apt install slapd ldap-utils sudo apt install ldap-utils 配置OpenLDAP：\nsudo dpkg-reconfigure slapd DNS domain name: example.org\nPassword: root\n创建user.ldif：\n# ldap是username dn: uid=ldap,dc=example,dc=org objectClass: inetOrgPerson objectClass: posixAccount uid: ldap sn: LDAP givenName: LDAP cn: LDAP User displayName: LDAP User uidNumber: 10000 gidNumber: 10000 homeDirectory: /home/ldap loginShell: /bin/bash 把user加入OpenLDAP服务器：\nldapadd -x -D \u0026#34;cn=admin,dc=example,dc=org\u0026#34; -W -f user.ldif 启动和查看OpenLDAP的状态：\nsudo systemctl start slapd sudo systemctl status slapd 查看当前已有的用户：\nldapsearch -x -LLL -b \u0026#34;dc=example,dc=org\u0026#34; \u0026#34;(objectclass=inetOrgPerson)\u0026#34; uid userPassword 修改用户密码：\nldappasswd -x -D \u0026#34;cn=admin,dc=example,dc=org\u0026#34; -W -S \u0026#34;uid=ldap,dc=example,dc=org\u0026#34; ","permalink":"https://kyxie.me/zh/blog/tech/others/ldap/","summary":"Linux 下载OpenLDAP： sudo apt update sudo apt install slapd ldap-utils sudo apt install ldap-utils 配置OpenLDAP： sudo dpkg-reconfigure slapd DNS domain name: example.org Password: root 创建user.ldif： # ldap是username","title":"LDAP Server的简单配置"},{"content":" Dec 30, 2022，硕士毕业 Jan 3, 2023，收到毕业信 Apr 27, 2023，收到CELPIP成绩，入池，其实毕业之前就该考出来的，没必要等着PGWP下来再申请省提名，白浪费了半年多 Jun 6, 2023，被捞，当天提交申请 Jun 27, 2023，补交材料 Jun 28, 2023，收到DIP Jul 25, 2023，收到省提名信，这里估摸着差不多了提前把无犯罪证明，出生证明，身份证，户口本公正或者翻译了，还能再省点时间（身份证和户口本是Optional） Aug 1, 2023，提交联邦申请 Dec 1, 2023，收到AOR和指纹信，成功link到IRCC Dec 12, 2023，收到PAL Dec 14, 2023，上午录指纹的时候发现邮箱里有体检信，提醒一下如果有办学签时候的体检证明一块交了，到时候可以waive掉，我这里找不到了只能再做一次体检，验尿抽血胸片，怒花$270，而且保险还不报销😭，由于可以walk in下午我直接去做了体检 Feb 14, 2024，被要求提交简历，看来要被安调 Feb 15, 2024，tracker上F12出现17 security被安调了 Feb 16, 2024，第一次调档IRCC Mar 5, 2024，收到IRCC调档回复 Nov 11, 2024，第一次调档CBSA Dec 13, 2024，收到CBSA调档回复 Mar 12, 2025，第二次调档CBSA Mar 17, 2025，第一次调档CSIS May 3, 2025，联系MP May 15, 2025，递交强制令 May 24, 2025，MP回复说刚上任在收拾办公室 May 19, 2025，投诉Director of CSIS May 22, 2025，强一缴费 May 30, 2025，强一收到NOA Jun 11, 2025，MP说正在被安调，没有办法 Jul 23, 2025，递交强二Perfection Jul 24, 2025，收到强一的No Reason Jul 25, 2025，收到CSIS回信装孬孙，哭惨说去年收到538200份移民审查要忙不过来了，忙不过来你TM还审查个锤子啊 Jul 28, 2025，向NSIRA寄信投诉CSIS Aug 5, 2025，被法院打回，说没有Affidavit of Service，联系了IRCC的DOJ然后网上找了表格填写后重新提交 Aug 6, 2025，又被法院打回来了，说Affidavit of Service不合格，联系了公证员重新盖了几个章后重新提交，怪不得都推荐找律师呢，全是坑 Sep 4, 2025，收到Argument Sep 8, 2025，提交强三Reply Oct 2, 2025，收到NSIRA回复，让我提交Section A Form \u0026hellip; ","permalink":"https://kyxie.me/zh/blog/pr/timeline/","summary":"Dec 30, 2022，硕士毕业 Jan 3, 2023，收到毕业信 Apr 27, 2023，收到CELPIP成绩，入池，其实毕业之前就该考出来的，没必要等着PGWP下来再申","title":"OINP移民加拿大🇨🇦时间线"},{"content":"自己平时喜欢乱搞一些花里胡哨的东西，嫌Windows自带的终端实在是太丑了，打算使用Oh My Posh美化一下，这篇教程基于Windows 11自带的Terminal。\n字体 我使用的字体是CodeNewRoman Nerd Font，这个字体同样是我博客的字体，可以从这里下载，下载后安装即可，也可以在VS Code上使用这个字体。\n下载 oh-my-posh winget install JanDeDobbeleer.OhMyPosh 终端设置 我这里直接修改了Windows PowerShell的配置，如果不想破坏默认的配置也可以新建一个配置文件。\n在配色方案的选项下，我选择的Campbell，但是我打开设置的json file里面把第一个主题的background改成了#0C0C0C，避免了纯黑的背景。\n在Windows PowerShell的常规选项下，取消勾选使用父进程目录，在外观选项下选取下载的字体CodeNowRoman Nerd Font。\n文件配置 在终端输入\necho $profile 找到这个文件，如果找不到自己新建一个。\n从这里选择一个自己喜欢的主题，点击主题名字进入相应的github并且下载.json源码，保存在本地，粘贴下面语句到这个文件中，修改路径为你保存的路径。\noh-my-posh init pwsh --config \u0026#39;C:/Users/Posh/jandedobbeleer.omp.json\u0026#39; | Invoke-Expression 保存后运行：\n. $profile FAQ 如果运行失败，可能需要更新PSReadLine。\n如果识别不了icon，大概率字体的问题，查看是否在PowerShell的页面下设置字体为Nerd字体。\n效果展示 MacOS \u0026amp; Linux 对于MacOS和Linux来说也非常推荐使用zsh，尤其是Linux，因为MacOS应该已经把zsh作为默认终端了，zsh的好处就是可以自动补全，而且比bash好看多了。\n安装了zsh之后可以继续安装oh-my-zsh，用来管理主题和其他插件。\n","permalink":"https://kyxie.me/zh/blog/tech/others/terminal/","summary":"自己平时喜欢乱搞一些花里胡哨的东西，嫌Windows自带的终端实在是太丑了，打算使用Oh My Posh美化一下，这篇教程基于Windows 11自","title":"个性化终端"},{"content":"👉️填写QQ邮箱可以自动获取QQ头像哦\n","permalink":"https://kyxie.me/zh/comment/comments/","summary":"👉️填写QQ邮箱可以自动获取QQ头像哦","title":"留言板 📋"},{"content":"class Me: def __init__(self): self.name = \u0026#34;Kunyang Xie\u0026#34; self.born_year = 1999 self.MBTI = \u0026#34;ISTJ\u0026#34; self.hometown = \u0026#34;Weifang, Shandong, CN\u0026#34; self.location = \u0026#34;Toronto, ON, CA\u0026#34; self.school = \u0026#34;UESTC, uWaterloo\u0026#34; ","permalink":"https://kyxie.me/zh/about/","summary":"class Me: def __init__(self): self.name = \u0026#34;Kunyang Xie\u0026#34; self.born_year = 1999 self.MBTI = \u0026#34;ISTJ\u0026#34; self.hometown = \u0026#34;Weifang, Shandong, CN\u0026#34; self.location = \u0026#34;Toronto, ON, CA\u0026#34; self.school = \u0026#34;UESTC, uWaterloo\u0026#34;","title":"关于我 👋"}]